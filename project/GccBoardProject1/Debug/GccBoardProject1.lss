
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000008ba  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800116  00800116  00000964  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ff2  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138f  00000000  00000000  00002bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002502  00000000  00000000  00003f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00006470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000122c5  00000000  00000000  0000695c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b1  00000000  00000000  00018c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000193d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b46  00000000  00000000  0001955a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	d1 c3       	rjmp	.+1954   	; 0x7a8 <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c3       	rjmp	.+1692   	; 0x6b2 <__vector_5>
  16:	00 00       	nop
  18:	1e c2       	rjmp	.+1084   	; 0x456 <__vector_6>
  1a:	00 00       	nop
  1c:	71 c3       	rjmp	.+1762   	; 0x700 <__vector_7>
  1e:	00 00       	nop
  20:	9c c3       	rjmp	.+1848   	; 0x75a <__vector_8>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	f7 c2       	rjmp	.+1518   	; 0x664 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea eb       	ldi	r30, 0xBA	; 186
  ac:	f8 e0       	ldi	r31, 0x08	; 8
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 31       	cpi	r26, 0x16	; 22
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	a6 e1       	ldi	r26, 0x16	; 22
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 31       	cpi	r26, 0x1C	; 28
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	96 d2       	rcall	.+1324   	; 0x5fc <main>
  d0:	f2 c3       	rjmp	.+2020   	; 0x8b6 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <init_adc>:

volatile uint8_t ADC_Min_result;
bool ADC_keep_running;

extern void init_adc(){
	ADMUX = (1<< REFS0)|(1<<MUX0)|(1<<ADLAR);			// Left adjust, and use VCC as top reference
  d4:	81 e6       	ldi	r24, 0x61	; 97
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE);							//Set the values of the ADC Enable and ADC Interrupt Enable bits to 1
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 = (1<<ADC1D);									//Turns off the digital input buffer for ADC1 on PF1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	ADC_Min_result = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_Min_result>
	ADC_keep_running = false;
  ec:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ADC_keep_running>
  f0:	08 95       	ret

000000f2 <adc_start_conv>:
	ADCSRA |= _BV(ADSC);
}

extern void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <adc_stop_conv>:
	ADC_Max_result = 0;
	adc_do_conv();
}//*/

extern void adc_stop_conv(){
	ADC_Min_result = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_Min_result>
 104:	08 95       	ret

00000106 <read_Min_ADC>:
}


extern uint8_t read_Min_ADC(){
	return ADC_Min_result;
 106:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_Min_result>
}
 10a:	08 95       	ret

0000010c <ADC_interrupt>:

extern void ADC_interrupt(){
	ADC_result = ADCH;
 10c:	e9 e7       	ldi	r30, 0x79	; 121
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ADC_result>
	if(ADC_Min_result > ADCH){
 116:	90 81       	ld	r25, Z
 118:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_Min_result>
 11c:	98 17       	cp	r25, r24
 11e:	20 f4       	brcc	.+8      	; 0x128 <ADC_interrupt+0x1c>
		ADC_Min_result = ADCH;
 120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 124:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_Min_result>
	}
	adc_start_conv();
 128:	e4 cf       	rjmp	.-56     	; 0xf2 <adc_start_conv>
 12a:	08 95       	ret

0000012c <buf_init>:
#include "Buffer.h"
#include <stdlib.h>
#include <avr/io.h>

extern void buf_init(){
	most_recent_pushed_idx = 0;
 12c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <most_recent_pushed_idx>
	current_push_idx = 0;
 130:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <current_push_idx>
	starting_idx = 0;
 134:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <starting_idx>
	first_on_belt = 0;
 138:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <first_on_belt>
 13c:	08 95       	ret

0000013e <buf_new>:
}

extern void buf_new(){
	if(buf_length <= BUFFER_SIZE){
 13e:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <buf_length>
 142:	23 33       	cpi	r18, 0x33	; 51
 144:	f8 f4       	brcc	.+62     	; 0x184 <buf_new+0x46>
		//Save the item to the buffer
		belt[current_push_idx].assumed_material = Black;
 146:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <current_push_idx>
 14a:	83 2f       	mov	r24, r19
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	e2 5e       	subi	r30, 0xE2	; 226
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	43 e0       	ldi	r20, 0x03	; 3
 162:	43 83       	std	Z+3, r20	; 0x03
		belt[current_push_idx].last_stage = Promixity_stage;
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	44 83       	std	Z+4, r20	; 0x04
		belt[current_push_idx].magnetic = false;
 168:	12 82       	std	Z+2, r1	; 0x02
		belt[current_push_idx].max_adc = 0;
 16a:	11 82       	std	Z+1, r1	; 0x01
 16c:	10 82       	st	Z, r1

		//Increment the variables for next time		
		most_recent_pushed_idx = current_push_idx;
 16e:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <most_recent_pushed_idx>
		current_push_idx = (current_push_idx + 1) % BUFFER_SIZE;
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	62 e3       	ldi	r22, 0x32	; 50
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	68 d3       	rcall	.+1744   	; 0x84a <__divmodhi4>
 17a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <current_push_idx>
		buf_length++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <buf_length>
 184:	08 95       	ret

00000186 <set_first_item>:
	}
}

extern set_first_item(Materials mat, Stage stag){
	belt[first_on_belt].assumed_material = mat;
 186:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <first_on_belt>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	9f 01       	movw	r18, r30
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	e2 0f       	add	r30, r18
 198:	f3 1f       	adc	r31, r19
 19a:	e2 5e       	subi	r30, 0xE2	; 226
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	83 83       	std	Z+3, r24	; 0x03
	belt[first_on_belt].last_stage = stag;
 1a0:	64 83       	std	Z+4, r22	; 0x04
}
 1a2:	08 95       	ret

000001a4 <buf_is_magnetic>:

extern buf_is_magnetic(){
	belt[most_recent_pushed_idx].magnetic = true;
 1a4:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <most_recent_pushed_idx>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	cf 01       	movw	r24, r30
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	e2 5e       	subi	r30, 0xE2	; 226
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	82 83       	std	Z+2, r24	; 0x02
	belt[most_recent_pushed_idx].assumed_material = Steel;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	83 83       	std	Z+3, r24	; 0x03
}
 1c4:	08 95       	ret

000001c6 <buf_get_first_item_material>:

extern inline Materials buf_get_first_item_material(){
	return belt[first_on_belt].assumed_material;
 1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <first_on_belt>
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	8e 0f       	add	r24, r30
 1d8:	9f 1f       	adc	r25, r31
 1da:	fc 01       	movw	r30, r24
 1dc:	e2 5e       	subi	r30, 0xE2	; 226
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
}
 1e0:	83 81       	ldd	r24, Z+3	; 0x03
 1e2:	08 95       	ret

000001e4 <init_interrupt>:

#include <avr/io.h>

void init_interrupt(){
	//EICRA |= _BV(ISC00);
	EICRA |= _BV(ISC00);
 1e4:	e9 e6       	ldi	r30, 0x69	; 105
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	80 83       	st	Z, r24
	
	//Stepper motor at home, active low
	EICRB |= _BV(ISC51);
 1ee:	ea e6       	ldi	r30, 0x6A	; 106
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	80 83       	st	Z, r24
	
	//First promixity sensor, active low
	EICRB |= _BV(ISC41);
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
	
	//Last promixity sensor, active low
	EICRB |= _BV(ISC61);
 1fe:	80 81       	ld	r24, Z
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 83       	st	Z, r24
	
	//Magnetic detection sensor, active low
	EICRB |= _BV(ISC71);
 204:	80 81       	ld	r24, Z
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
	
	EIMSK |= 0b11110001;
 20a:	8d b3       	in	r24, 0x1d	; 29
 20c:	81 6f       	ori	r24, 0xF1	; 241
 20e:	8d bb       	out	0x1d, r24	; 29
 210:	08 95       	ret

00000212 <init_led>:
	}else{
		PORTA >>= 1;	
	}
	
	current_LED++;
	current_LED %= 10;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	81 b9       	out	0x01, r24	; 1
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	80 6f       	ori	r24, 0xF0	; 240
 21a:	8a b9       	out	0x0a, r24	; 10
 21c:	12 b8       	out	0x02, r1	; 2
 21e:	08 95       	ret

00000220 <status_leds>:
}

extern void status_leds(Status_LED_Position pos, Status_LED_Colour colour){
		if(pos == top){
 220:	86 30       	cpi	r24, 0x06	; 6
 222:	89 f4       	brne	.+34     	; 0x246 <status_leds+0x26>
			PORTD &= ~0xC0;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8f 73       	andi	r24, 0x3F	; 63
 228:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 22a:	63 30       	cpi	r22, 0x03	; 3
 22c:	21 f4       	brne	.+8      	; 0x236 <status_leds+0x16>
				PORTD |= 0xC0;	
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	80 6c       	ori	r24, 0xC0	; 192
 232:	8b b9       	out	0x0b, r24	; 11
 234:	08 95       	ret
			}else if(colour == red){
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	11 f4       	brne	.+4      	; 0x23e <status_leds+0x1e>
				PORTD |= 0x80;
 23a:	5f 9a       	sbi	0x0b, 7	; 11
 23c:	08 95       	ret
			}else if(colour == green){
 23e:	62 30       	cpi	r22, 0x02	; 2
 240:	81 f4       	brne	.+32     	; 0x262 <status_leds+0x42>
				PORTD |= 0x40;
 242:	5e 9a       	sbi	0x0b, 6	; 11
 244:	08 95       	ret
			}else{
				
			}
		}else{
			PORTD &= ~0x30;
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	8f 7c       	andi	r24, 0xCF	; 207
 24a:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 24c:	63 30       	cpi	r22, 0x03	; 3
 24e:	21 f4       	brne	.+8      	; 0x258 <status_leds+0x38>
				PORTD |= 0x30;
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	80 63       	ori	r24, 0x30	; 48
 254:	8b b9       	out	0x0b, r24	; 11
 256:	08 95       	ret
			}else if(colour == red){
 258:	61 30       	cpi	r22, 0x01	; 1
 25a:	11 f4       	brne	.+4      	; 0x260 <status_leds+0x40>
				PORTD |= 0x10;
 25c:	5c 9a       	sbi	0x0b, 4	; 11
 25e:	08 95       	ret
			}else if(colour = green){
				PORTD |= 0x20;
 260:	5d 9a       	sbi	0x0b, 5	; 11
 262:	08 95       	ret

00000264 <mTimerConfig>:
#include "mtimer.h"

extern void mTimerConfig()
{
	/* Insert system clock initialization code here (sysclk_init()). */
	TCCR1B |= _BV(CS10);
 264:	e1 e8       	ldi	r30, 0x81	; 129
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
 26e:	08 95       	ret

00000270 <mTimer>:
}

extern void mTimer(int count)
{
 270:	ac 01       	movw	r20, r24
	int i = 0;
	
	TCCR1B |= _BV(WGM12); /*CTC mode*/
 272:	e1 e8       	ldi	r30, 0x81	; 129
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	90 81       	ld	r25, Z
 278:	98 60       	ori	r25, 0x08	; 8
 27a:	90 83       	st	Z, r25
	
	OCR1A = 0x03e8; //1000
 27c:	88 ee       	ldi	r24, 0xE8	; 232
 27e:	93 e0       	ldi	r25, 0x03	; 3
 280:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 284:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCNT1 = 0x0000;
 288:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 28c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
 290:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B |= _BV(CS10);
}

extern void mTimer(int count)
{
	int i = 0;
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <mTimer+0x32>
	{
		if ((TIFR1 & 0x02) == 0x02)
 298:	b1 9b       	sbis	0x16, 1	; 22
 29a:	fe cf       	rjmp	.-4      	; 0x298 <mTimer+0x28>
		{
			TIFR1 |= _BV(OCF1A);
 29c:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 2a2:	24 17       	cp	r18, r20
 2a4:	35 07       	cpc	r19, r21
 2a6:	1c f4       	brge	.+6      	; 0x2ae <mTimer+0x3e>
	{
		if ((TIFR1 & 0x02) == 0x02)
 2a8:	b1 9b       	sbis	0x16, 1	; 22
 2aa:	f6 cf       	rjmp	.-20     	; 0x298 <mTimer+0x28>
 2ac:	f7 cf       	rjmp	.-18     	; 0x29c <mTimer+0x2c>
 2ae:	08 95       	ret

000002b0 <init_pwm>:
#define IB	(0x2)
#define EB	(0x8)

extern void init_pwm(){
	//Turn on B7 to output mode
	DDRB |= 0x8F; 
 2b0:	84 b1       	in	r24, 0x04	; 4
 2b2:	8f 68       	ori	r24, 0x8F	; 143
 2b4:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A =(1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//Set timer counter compare register to Fast PWM
 2b6:	83 e8       	ldi	r24, 0x83	; 131
 2b8:	84 bd       	out	0x24, r24	; 36

	TCCR0B = (1<<CS01) | (1<<CS00);
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 2be:	17 bc       	out	0x27, r1	; 39
 2c0:	08 95       	ret

000002c2 <set_dc_motor_speed>:
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 2c2:	87 bd       	out	0x27, r24	; 39
 2c4:	08 95       	ret

000002c6 <set_motor_setting>:
	set_motor_setting(Brake_to_VCC);
}

extern void set_motor_setting(Motor_Setting setting){
	//Force all settings to off
	PORTB &= ~(IA | IB | EA | EB);
 2c6:	95 b1       	in	r25, 0x05	; 5
 2c8:	90 7f       	andi	r25, 0xF0	; 240
 2ca:	95 b9       	out	0x05, r25	; 5
	
	if(setting == DC_Motor_Clockwise){
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <set_motor_setting+0xe>
		PORTB |= IB;
 2d0:	29 9a       	sbi	0x05, 1	; 5
 2d2:	08 95       	ret
	}
	else if (setting == DC_Motor_Counter_Clockwise){
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	09 f4       	brne	.+2      	; 0x2da <set_motor_setting+0x14>
		PORTB |= IA;
 2d8:	2a 9a       	sbi	0x05, 2	; 5
 2da:	08 95       	ret

000002dc <stop_pwm>:
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 2dc:	17 bc       	out	0x27, r1	; 39
}

extern inline void stop_pwm(){
	set_dc_motor_speed(0);
	set_motor_setting(Brake_to_VCC);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	f2 cf       	rjmp	.-28     	; 0x2c6 <set_motor_setting>
 2e2:	08 95       	ret

000002e4 <init_stepper>:
	return stepper_material_position;
}

extern bool check_if_home(){
	return (bool)(home_flag); 
}
 2e4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <home_flag>
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	87 b9       	out	0x07, r24	; 7
 2ec:	08 95       	ret

000002ee <step>:
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	79 f4       	brne	.+30     	; 0x310 <step+0x22>
 2f2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	83 70       	andi	r24, 0x03	; 3
 2fc:	90 78       	andi	r25, 0x80	; 128
 2fe:	99 23       	and	r25, r25
 300:	24 f4       	brge	.+8      	; 0x30a <step+0x1c>
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	8c 6f       	ori	r24, 0xFC	; 252
 306:	9f 6f       	ori	r25, 0xFF	; 255
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 30e:	0b c0       	rjmp	.+22     	; 0x326 <step+0x38>
 310:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 314:	81 11       	cpse	r24, r1
 316:	04 c0       	rjmp	.+8      	; 0x320 <step+0x32>
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 31e:	03 c0       	rjmp	.+6      	; 0x326 <step+0x38>
 320:	81 50       	subi	r24, 0x01	; 1
 322:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 326:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	ef 5f       	subi	r30, 0xFF	; 255
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
 336:	88 b9       	out	0x08, r24	; 8
 338:	08 95       	ret

0000033a <get_current_stepper_material>:
 33a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
 33e:	08 95       	ret

00000340 <block_till_stepper_home>:

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 340:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <home_flag>
 344:	81 11       	cpse	r24, r1
 346:	09 c0       	rjmp	.+18     	; 0x35a <block_till_stepper_home+0x1a>
		step(Clock_Wise);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	d1 df       	rcall	.-94     	; 0x2ee <step>
		mTimer(STEP_TIME_MS);
 34c:	8f e0       	ldi	r24, 0x0F	; 15
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	8f df       	rcall	.-226    	; 0x270 <mTimer>
extern bool check_if_home(){
	return (bool)(home_flag); 
}

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 352:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <home_flag>
 356:	88 23       	and	r24, r24
 358:	b9 f3       	breq	.-18     	; 0x348 <block_till_stepper_home+0x8>
		step(Clock_Wise);
		mTimer(STEP_TIME_MS);
	}
	stepper_material_position = Black;
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <stepper_material_position>
 360:	08 95       	ret

00000362 <stepper_repeat_steps>:
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
	for(uint8_t i = 0; i < steps; i++){
 368:	88 23       	and	r24, r24
 36a:	59 f0       	breq	.+22     	; 0x382 <stepper_repeat_steps+0x20>
 36c:	16 2f       	mov	r17, r22
 36e:	d8 2f       	mov	r29, r24
 370:	c0 e0       	ldi	r28, 0x00	; 0
		step(dir);
 372:	81 2f       	mov	r24, r17
 374:	bc df       	rcall	.-136    	; 0x2ee <step>
		mTimer(STEP_TIME_MS);
 376:	8f e0       	ldi	r24, 0x0F	; 15
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	7a df       	rcall	.-268    	; 0x270 <mTimer>
	}
	stepper_material_position = Black;
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
	for(uint8_t i = 0; i < steps; i++){
 37c:	cf 5f       	subi	r28, 0xFF	; 255
 37e:	dc 13       	cpse	r29, r28
 380:	f8 cf       	rjmp	.-16     	; 0x372 <stepper_repeat_steps+0x10>
		step(dir);
		mTimer(STEP_TIME_MS);
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	08 95       	ret

0000038a <go_to_material>:

extern void go_to_material(Materials mat){
 38a:	cf 93       	push	r28
 38c:	c8 2f       	mov	r28, r24
	if(stepper_material_position == Black){
 38e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	79 f4       	brne	.+30     	; 0x3b4 <go_to_material+0x2a>
		if(mat == Steel){
 396:	c2 30       	cpi	r28, 0x02	; 2
 398:	21 f4       	brne	.+8      	; 0x3a2 <go_to_material+0x18>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 39a:	6f ef       	ldi	r22, 0xFF	; 255
 39c:	82 e3       	ldi	r24, 0x32	; 50
 39e:	e1 df       	rcall	.-62     	; 0x362 <stepper_repeat_steps>
 3a0:	49 c0       	rjmp	.+146    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		}else if(mat == Aluminum){
 3a2:	c1 11       	cpse	r28, r1
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <go_to_material+0x24>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	82 e3       	ldi	r24, 0x32	; 50
 3aa:	db df       	rcall	.-74     	; 0x362 <stepper_repeat_steps>
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 3ac:	43 c0       	rjmp	.+134    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	84 e6       	ldi	r24, 0x64	; 100
		}
	}
	if(stepper_material_position == Steel){
 3b2:	d7 df       	rcall	.-82     	; 0x362 <stepper_repeat_steps>
 3b4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
 3b8:	82 30       	cpi	r24, 0x02	; 2
		if(mat == White)
 3ba:	79 f4       	brne	.+30     	; 0x3da <go_to_material+0x50>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 3bc:	c1 30       	cpi	r28, 0x01	; 1
 3be:	21 f4       	brne	.+8      	; 0x3c8 <go_to_material+0x3e>
 3c0:	6f ef       	ldi	r22, 0xFF	; 255
 3c2:	82 e3       	ldi	r24, 0x32	; 50
		else if(mat == Black)
 3c4:	ce df       	rcall	.-100    	; 0x362 <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 3c6:	3b c0       	rjmp	.+118    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3c8:	c3 30       	cpi	r28, 0x03	; 3
 3ca:	21 f4       	brne	.+8      	; 0x3d4 <go_to_material+0x4a>
 3cc:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 3ce:	82 e3       	ldi	r24, 0x32	; 50
 3d0:	c8 df       	rcall	.-112    	; 0x362 <stepper_repeat_steps>
 3d2:	35 c0       	rjmp	.+106    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3d4:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(stepper_material_position == White){
 3d6:	84 e6       	ldi	r24, 0x64	; 100
 3d8:	c4 df       	rcall	.-120    	; 0x362 <stepper_repeat_steps>
 3da:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
		if(mat == Aluminum)
 3de:	81 30       	cpi	r24, 0x01	; 1
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 3e0:	79 f4       	brne	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e2:	c1 11       	cpse	r28, r1
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <go_to_material+0x64>
 3e6:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == Steel)
 3e8:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 3ea:	bb df       	rcall	.-138    	; 0x362 <stepper_repeat_steps>
 3ec:	2d c0       	rjmp	.+90     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3ee:	c2 30       	cpi	r28, 0x02	; 2
 3f0:	21 f4       	brne	.+8      	; 0x3fa <go_to_material+0x70>
 3f2:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 3f4:	82 e3       	ldi	r24, 0x32	; 50
 3f6:	b5 df       	rcall	.-150    	; 0x362 <stepper_repeat_steps>
 3f8:	27 c0       	rjmp	.+78     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	}
	if(stepper_material_position == Aluminum){
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	84 e6       	ldi	r24, 0x64	; 100
 3fe:	b1 df       	rcall	.-158    	; 0x362 <stepper_repeat_steps>
 400:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
		if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 404:	81 11       	cpse	r24, r1
 406:	13 c0       	rjmp	.+38     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 408:	c3 30       	cpi	r28, 0x03	; 3
 40a:	21 f4       	brne	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == White){
 40e:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 410:	a8 df       	rcall	.-176    	; 0x362 <stepper_repeat_steps>
 412:	0d c0       	rjmp	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 414:	c1 30       	cpi	r28, 0x01	; 1
			PORTA ^= 0x04;
 416:	41 f4       	brne	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	82 e3       	ldi	r24, 0x32	; 50
 41c:	a2 df       	rcall	.-188    	; 0x362 <stepper_repeat_steps>
 41e:	92 b1       	in	r25, 0x02	; 2
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	89 27       	eor	r24, r25
 424:	82 b9       	out	0x02, r24	; 2
 426:	03 c0       	rjmp	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	}//*/
	stepper_material_position = mat;
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	84 e6       	ldi	r24, 0x64	; 100
}
 42c:	9a df       	rcall	.-204    	; 0x362 <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
		}
	}
	if(stepper_material_position == Steel){
 42e:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <stepper_material_position>
 432:	0f c0       	rjmp	.+30     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 434:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
		else if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == White){
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	79 f6       	brne	.-98     	; 0x3da <go_to_material+0x50>
 43c:	cb cf       	rjmp	.-106    	; 0x3d4 <go_to_material+0x4a>
 43e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
		else if(mat == Steel)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == Aluminum){
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	e9 f6       	brne	.-70     	; 0x400 <__LOCK_REGION_LENGTH__>
 446:	d9 cf       	rjmp	.-78     	; 0x3fa <go_to_material+0x70>
 448:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <stepper_material_position>
			PORTA ^= 0x04;
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}//*/
	stepper_material_position = mat;
}
 44c:	88 23       	and	r24, r24
 44e:	61 f3       	breq	.-40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 450:	ee cf       	rjmp	.-36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <__vector_6>:

ISR(INT5_vect){
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	8f 93       	push	r24
	home_flag = true;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <home_flag>
 468:	8f 91       	pop	r24
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <usartInit>:
#include "mtimer.h"

extern void usartInit (uint16_t baud)
{
	//Set baud rate
	UBRR1H = (uint8_t)(baud >> 8);
 474:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(baud);
 478:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1A |= DoubSpeed;
 47c:	e8 ec       	ldi	r30, 0xC8	; 200
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
	
	UCSR1B |= TxEn;			//Enable TX mode for USART1
 486:	e9 ec       	ldi	r30, 0xC9	; 201
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	80 83       	st	Z, r24
	//UCSR1B |= RxEn;		//Enable RX mode for USART1
	UCSR1C |= Mode8Bit;		//Set Usart to 8 bit data mode
 490:	ea ec       	ldi	r30, 0xCA	; 202
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	86 60       	ori	r24, 0x06	; 6
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret

0000049c <usartTX>:
//This function displace one char at a time on the serial port
//
//Pass this function a char.
extern void usartTX (unsigned char data)
{
	while (!(UCSR1A & TxBuffRdy));	//Wait for the TX buffer to be ready for data
 49c:	e8 ec       	ldi	r30, 0xC8	; 200
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	90 81       	ld	r25, Z
 4a2:	95 ff       	sbrs	r25, 5
 4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <usartTX+0x4>
	
	UDR1 = data;
 4a6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4aa:	08 95       	ret

000004ac <usartTXs>:
}
//This function can display strings on the serial port by calling the display char
//function.
//Pass this function a string.
extern void usartTXs (const char *string)
{
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	fc 01       	movw	r30, r24
	uint8_t c = 0;
	
	while (string [c] != 0)
 4b4:	80 81       	ld	r24, Z
 4b6:	88 23       	and	r24, r24
 4b8:	51 f0       	breq	.+20     	; 0x4ce <usartTXs+0x22>
 4ba:	8f 01       	movw	r16, r30
	{
		usartTX(string[c]);
 4bc:	c0 e0       	ldi	r28, 0x00	; 0
		c++;
 4be:	ee df       	rcall	.-36     	; 0x49c <usartTX>
//Pass this function a string.
extern void usartTXs (const char *string)
{
	uint8_t c = 0;
	
	while (string [c] != 0)
 4c0:	cf 5f       	subi	r28, 0xFF	; 255
 4c2:	f8 01       	movw	r30, r16
 4c4:	ec 0f       	add	r30, r28
 4c6:	f1 1d       	adc	r31, r1
 4c8:	80 81       	ld	r24, Z
 4ca:	81 11       	cpse	r24, r1
	{
		usartTX(string[c]);
		c++;
	}
}
 4cc:	f8 cf       	rjmp	.-16     	; 0x4be <usartTXs+0x12>
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <usartNumTXs>:

extern void usartNumTXs(uint16_t num){
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	8c 01       	movw	r16, r24

	usartTX((char)(((num/1000)%10) + 48));
 4e0:	9c 01       	movw	r18, r24
 4e2:	36 95       	lsr	r19
 4e4:	27 95       	ror	r18
 4e6:	36 95       	lsr	r19
 4e8:	27 95       	ror	r18
 4ea:	36 95       	lsr	r19
 4ec:	27 95       	ror	r18
 4ee:	a5 ec       	ldi	r26, 0xC5	; 197
 4f0:	b0 e2       	ldi	r27, 0x20	; 32
 4f2:	be d1       	rcall	.+892    	; 0x870 <__umulhisi3>
 4f4:	ac 01       	movw	r20, r24
 4f6:	52 95       	swap	r21
 4f8:	42 95       	swap	r20
 4fa:	4f 70       	andi	r20, 0x0F	; 15
 4fc:	45 27       	eor	r20, r21
 4fe:	5f 70       	andi	r21, 0x0F	; 15
 500:	45 27       	eor	r20, r21
 502:	9a 01       	movw	r18, r20
 504:	ad ec       	ldi	r26, 0xCD	; 205
 506:	bc ec       	ldi	r27, 0xCC	; 204
 508:	b3 d1       	rcall	.+870    	; 0x870 <__umulhisi3>
 50a:	96 95       	lsr	r25
 50c:	87 95       	ror	r24
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	9c 01       	movw	r18, r24
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	82 0f       	add	r24, r18
 52a:	93 1f       	adc	r25, r19
 52c:	9a 01       	movw	r18, r20
 52e:	28 1b       	sub	r18, r24
 530:	39 0b       	sbc	r19, r25
 532:	c9 01       	movw	r24, r18
 534:	80 5d       	subi	r24, 0xD0	; 208
 536:	b2 df       	rcall	.-156    	; 0x49c <usartTX>
	usartTX((char)(((num/100)%10) + 48));
 538:	98 01       	movw	r18, r16
 53a:	36 95       	lsr	r19
 53c:	27 95       	ror	r18
 53e:	36 95       	lsr	r19
 540:	27 95       	ror	r18
 542:	ab e7       	ldi	r26, 0x7B	; 123
 544:	b4 e1       	ldi	r27, 0x14	; 20
 546:	94 d1       	rcall	.+808    	; 0x870 <__umulhisi3>
 548:	ac 01       	movw	r20, r24
 54a:	56 95       	lsr	r21
 54c:	47 95       	ror	r20
 54e:	9a 01       	movw	r18, r20
 550:	ad ec       	ldi	r26, 0xCD	; 205
 552:	bc ec       	ldi	r27, 0xCC	; 204
 554:	8d d1       	rcall	.+794    	; 0x870 <__umulhisi3>
 556:	96 95       	lsr	r25
 558:	87 95       	ror	r24
 55a:	96 95       	lsr	r25
 55c:	87 95       	ror	r24
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	9c 01       	movw	r18, r24
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	9a 01       	movw	r18, r20
 57a:	28 1b       	sub	r18, r24
 57c:	39 0b       	sbc	r19, r25
 57e:	c9 01       	movw	r24, r18
 580:	80 5d       	subi	r24, 0xD0	; 208
	usartTX((char)(((num/10)%10) + 48));
 582:	8c df       	rcall	.-232    	; 0x49c <usartTX>
 584:	98 01       	movw	r18, r16
 586:	ad ec       	ldi	r26, 0xCD	; 205
 588:	bc ec       	ldi	r27, 0xCC	; 204
 58a:	72 d1       	rcall	.+740    	; 0x870 <__umulhisi3>
 58c:	ec 01       	movw	r28, r24
 58e:	d6 95       	lsr	r29
 590:	c7 95       	ror	r28
 592:	d6 95       	lsr	r29
 594:	c7 95       	ror	r28
 596:	d6 95       	lsr	r29
 598:	c7 95       	ror	r28
 59a:	9e 01       	movw	r18, r28
 59c:	69 d1       	rcall	.+722    	; 0x870 <__umulhisi3>
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	9c 01       	movw	r18, r24
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	82 0f       	add	r24, r18
 5be:	93 1f       	adc	r25, r19
 5c0:	9e 01       	movw	r18, r28
 5c2:	28 1b       	sub	r18, r24
 5c4:	39 0b       	sbc	r19, r25
 5c6:	c9 01       	movw	r24, r18
 5c8:	80 5d       	subi	r24, 0xD0	; 208
 5ca:	68 df       	rcall	.-304    	; 0x49c <usartTX>
	usartTX((char)((num%10) + 48));
 5cc:	ce 01       	movw	r24, r28
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	cc 0f       	add	r28, r28
 5d4:	dd 1f       	adc	r29, r29
 5d6:	cc 0f       	add	r28, r28
 5d8:	dd 1f       	adc	r29, r29
 5da:	cc 0f       	add	r28, r28
 5dc:	dd 1f       	adc	r29, r29
 5de:	c8 0f       	add	r28, r24
 5e0:	d9 1f       	adc	r29, r25
 5e2:	c8 01       	movw	r24, r16
 5e4:	8c 1b       	sub	r24, r28
 5e6:	9d 0b       	sbc	r25, r29
 5e8:	80 5d       	subi	r24, 0xD0	; 208
	usartTXs("\r\n");
 5ea:	58 df       	rcall	.-336    	; 0x49c <usartTX>
 5ec:	83 e1       	ldi	r24, 0x13	; 19
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	5d df       	rcall	.-326    	; 0x4ac <usartTXs>
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	08 95       	ret

000005fc <main>:
int main()
{	
	cli();
	mTimerConfig();
	init_led();
	init_interrupt();
 5fc:	f8 94       	cli
 5fe:	32 de       	rcall	.-924    	; 0x264 <mTimerConfig>
 600:	08 de       	rcall	.-1008   	; 0x212 <init_led>
 602:	f0 dd       	rcall	.-1056   	; 0x1e4 <init_interrupt>
 604:	6f de       	rcall	.-802    	; 0x2e4 <init_stepper>
 606:	54 de       	rcall	.-856    	; 0x2b0 <init_pwm>
 608:	65 dd       	rcall	.-1334   	; 0xd4 <init_adc>
 60a:	90 dd       	rcall	.-1248   	; 0x12c <buf_init>
 60c:	8c e0       	ldi	r24, 0x0C	; 12
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	31 df       	rcall	.-414    	; 0x474 <usartInit>
 612:	78 94       	sei
 614:	89 e0       	ldi	r24, 0x09	; 9
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	49 df       	rcall	.-366    	; 0x4ac <usartTXs>
 61a:	84 e6       	ldi	r24, 0x64	; 100
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	5b df       	rcall	.-330    	; 0x4d6 <usartNumTXs>
 620:	88 ec       	ldi	r24, 0xC8	; 200
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	25 de       	rcall	.-950    	; 0x270 <mTimer>
 626:	8c de       	rcall	.-744    	; 0x340 <block_till_stepper_home>
 628:	88 ec       	ldi	r24, 0xC8	; 200
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	21 de       	rcall	.-958    	; 0x270 <mTimer>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	4a de       	rcall	.-876    	; 0x2c6 <set_motor_setting>
 632:	8e e1       	ldi	r24, 0x1E	; 30
 634:	46 de       	rcall	.-884    	; 0x2c2 <set_dc_motor_speed>
 636:	5d dd       	rcall	.-1350   	; 0xf2 <adc_start_conv>
 638:	63 e0       	ldi	r22, 0x03	; 3
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	a4 dd       	rcall	.-1208   	; 0x186 <set_first_item>
 63e:	88 ec       	ldi	r24, 0xC8	; 200
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	16 de       	rcall	.-980    	; 0x270 <mTimer>
 644:	c0 dd       	rcall	.-1152   	; 0x1c6 <buf_get_first_item_material>
 646:	c8 2f       	mov	r28, r24
 648:	78 de       	rcall	.-784    	; 0x33a <get_current_stepper_material>
 64a:	c8 13       	cpse	r28, r24
 64c:	05 c0       	rjmp	.+10     	; 0x658 <main+0x5c>
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	3a de       	rcall	.-908    	; 0x2c6 <set_motor_setting>
 652:	8e e1       	ldi	r24, 0x1E	; 30
 654:	36 de       	rcall	.-916    	; 0x2c2 <set_dc_motor_speed>
 656:	02 c0       	rjmp	.+4      	; 0x65c <main+0x60>
 658:	b6 dd       	rcall	.-1172   	; 0x1c6 <buf_get_first_item_material>
 65a:	97 de       	rcall	.-722    	; 0x38a <go_to_material>
 65c:	84 e6       	ldi	r24, 0x64	; 100
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	07 de       	rcall	.-1010   	; 0x270 <mTimer>
 662:	f0 cf       	rjmp	.-32     	; 0x644 <main+0x48>

00000664 <__vector_29>:
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	0b b6       	in	r0, 0x3b	; 59
 670:	0f 92       	push	r0
 672:	2f 93       	push	r18
 674:	3f 93       	push	r19
 676:	4f 93       	push	r20
 678:	5f 93       	push	r21
 67a:	6f 93       	push	r22
 67c:	7f 93       	push	r23
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	af 93       	push	r26
 684:	bf 93       	push	r27
 686:	ef 93       	push	r30
 688:	ff 93       	push	r31
 68a:	40 dd       	rcall	.-1408   	; 0x10c <ADC_interrupt>
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	bf 91       	pop	r27
 692:	af 91       	pop	r26
 694:	9f 91       	pop	r25
 696:	8f 91       	pop	r24
 698:	7f 91       	pop	r23
 69a:	6f 91       	pop	r22
 69c:	5f 91       	pop	r21
 69e:	4f 91       	pop	r20
 6a0:	3f 91       	pop	r19
 6a2:	2f 91       	pop	r18
 6a4:	0f 90       	pop	r0
 6a6:	0b be       	out	0x3b, r0	; 59
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_5>:
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	0b b6       	in	r0, 0x3b	; 59
 6be:	0f 92       	push	r0
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	5f 93       	push	r21
 6c8:	6f 93       	push	r22
 6ca:	7f 93       	push	r23
 6cc:	8f 93       	push	r24
 6ce:	9f 93       	push	r25
 6d0:	af 93       	push	r26
 6d2:	bf 93       	push	r27
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
 6d8:	32 dd       	rcall	.-1436   	; 0x13e <buf_new>
 6da:	ff 91       	pop	r31
 6dc:	ef 91       	pop	r30
 6de:	bf 91       	pop	r27
 6e0:	af 91       	pop	r26
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	7f 91       	pop	r23
 6e8:	6f 91       	pop	r22
 6ea:	5f 91       	pop	r21
 6ec:	4f 91       	pop	r20
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	0f 90       	pop	r0
 6f4:	0b be       	out	0x3b, r0	; 59
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_7>:
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	0b b6       	in	r0, 0x3b	; 59
 70c:	0f 92       	push	r0
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	4f 93       	push	r20
 714:	5f 93       	push	r21
 716:	6f 93       	push	r22
 718:	7f 93       	push	r23
 71a:	8f 93       	push	r24
 71c:	9f 93       	push	r25
 71e:	af 93       	push	r26
 720:	bf 93       	push	r27
 722:	cf 93       	push	r28
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
 728:	08 de       	rcall	.-1008   	; 0x33a <get_current_stepper_material>
 72a:	c8 2f       	mov	r28, r24
 72c:	4c dd       	rcall	.-1384   	; 0x1c6 <buf_get_first_item_material>
 72e:	c8 13       	cpse	r28, r24
 730:	d5 dd       	rcall	.-1110   	; 0x2dc <stop_pwm>
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	cf 91       	pop	r28
 738:	bf 91       	pop	r27
 73a:	af 91       	pop	r26
 73c:	9f 91       	pop	r25
 73e:	8f 91       	pop	r24
 740:	7f 91       	pop	r23
 742:	6f 91       	pop	r22
 744:	5f 91       	pop	r21
 746:	4f 91       	pop	r20
 748:	3f 91       	pop	r19
 74a:	2f 91       	pop	r18
 74c:	0f 90       	pop	r0
 74e:	0b be       	out	0x3b, r0	; 59
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_8>:
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	0b b6       	in	r0, 0x3b	; 59
 766:	0f 92       	push	r0
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	4f 93       	push	r20
 76e:	5f 93       	push	r21
 770:	6f 93       	push	r22
 772:	7f 93       	push	r23
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	af 93       	push	r26
 77a:	bf 93       	push	r27
 77c:	ef 93       	push	r30
 77e:	ff 93       	push	r31
 780:	11 dd       	rcall	.-1502   	; 0x1a4 <buf_is_magnetic>
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0b be       	out	0x3b, r0	; 59
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_1>:
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	0b b6       	in	r0, 0x3b	; 59
 7b4:	0f 92       	push	r0
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	4f 93       	push	r20
 7bc:	5f 93       	push	r21
 7be:	6f 93       	push	r22
 7c0:	7f 93       	push	r23
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	af 93       	push	r26
 7c8:	bf 93       	push	r27
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
 7ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	31 f4       	brne	.+12     	; 0x7e2 <__vector_1+0x3a>
 7d6:	62 e0       	ldi	r22, 0x02	; 2
 7d8:	86 e0       	ldi	r24, 0x06	; 6
 7da:	22 dd       	rcall	.-1468   	; 0x220 <status_leds>
 7dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 7e0:	21 c0       	rjmp	.+66     	; 0x824 <__vector_1+0x7c>
 7e2:	63 e0       	ldi	r22, 0x03	; 3
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	1c dd       	rcall	.-1480   	; 0x220 <status_leds>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 7ee:	8b dc       	rcall	.-1770   	; 0x106 <read_Min_ADC>
 7f0:	82 b9       	out	0x02, r24	; 2
 7f2:	89 dc       	rcall	.-1774   	; 0x106 <read_Min_ADC>
 7f4:	89 3e       	cpi	r24, 0xE9	; 233
 7f6:	20 f0       	brcs	.+8      	; 0x800 <__vector_1+0x58>
 7f8:	63 e0       	ldi	r22, 0x03	; 3
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	c4 dc       	rcall	.-1656   	; 0x186 <set_first_item>
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <__vector_1+0x7a>
 800:	82 dc       	rcall	.-1788   	; 0x106 <read_Min_ADC>
 802:	85 3d       	cpi	r24, 0xD5	; 213
 804:	20 f0       	brcs	.+8      	; 0x80e <__vector_1+0x66>
 806:	63 e0       	ldi	r22, 0x03	; 3
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	bd dc       	rcall	.-1670   	; 0x186 <set_first_item>
 80c:	0a c0       	rjmp	.+20     	; 0x822 <__vector_1+0x7a>
 80e:	7b dc       	rcall	.-1802   	; 0x106 <read_Min_ADC>
 810:	87 37       	cpi	r24, 0x77	; 119
 812:	20 f0       	brcs	.+8      	; 0x81c <__vector_1+0x74>
 814:	63 e0       	ldi	r22, 0x03	; 3
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	b6 dc       	rcall	.-1684   	; 0x186 <set_first_item>
 81a:	03 c0       	rjmp	.+6      	; 0x822 <__vector_1+0x7a>
 81c:	63 e0       	ldi	r22, 0x03	; 3
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	b2 dc       	rcall	.-1692   	; 0x186 <set_first_item>
 822:	6d dc       	rcall	.-1830   	; 0xfe <adc_stop_conv>
 824:	ff 91       	pop	r31
 826:	ef 91       	pop	r30
 828:	bf 91       	pop	r27
 82a:	af 91       	pop	r26
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	7f 91       	pop	r23
 832:	6f 91       	pop	r22
 834:	5f 91       	pop	r21
 836:	4f 91       	pop	r20
 838:	3f 91       	pop	r19
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0b be       	out	0x3b, r0	; 59
 840:	0f 90       	pop	r0
 842:	0f be       	out	0x3f, r0	; 63
 844:	0f 90       	pop	r0
 846:	1f 90       	pop	r1
 848:	18 95       	reti

0000084a <__divmodhi4>:
 84a:	97 fb       	bst	r25, 7
 84c:	07 2e       	mov	r0, r23
 84e:	16 f4       	brtc	.+4      	; 0x854 <__divmodhi4+0xa>
 850:	00 94       	com	r0
 852:	06 d0       	rcall	.+12     	; 0x860 <__divmodhi4_neg1>
 854:	77 fd       	sbrc	r23, 7
 856:	08 d0       	rcall	.+16     	; 0x868 <__divmodhi4_neg2>
 858:	1a d0       	rcall	.+52     	; 0x88e <__udivmodhi4>
 85a:	07 fc       	sbrc	r0, 7
 85c:	05 d0       	rcall	.+10     	; 0x868 <__divmodhi4_neg2>
 85e:	3e f4       	brtc	.+14     	; 0x86e <__divmodhi4_exit>

00000860 <__divmodhi4_neg1>:
 860:	90 95       	com	r25
 862:	81 95       	neg	r24
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__divmodhi4_neg2>:
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255

0000086e <__divmodhi4_exit>:
 86e:	08 95       	ret

00000870 <__umulhisi3>:
 870:	a2 9f       	mul	r26, r18
 872:	b0 01       	movw	r22, r0
 874:	b3 9f       	mul	r27, r19
 876:	c0 01       	movw	r24, r0
 878:	a3 9f       	mul	r26, r19
 87a:	70 0d       	add	r23, r0
 87c:	81 1d       	adc	r24, r1
 87e:	11 24       	eor	r1, r1
 880:	91 1d       	adc	r25, r1
 882:	b2 9f       	mul	r27, r18
 884:	70 0d       	add	r23, r0
 886:	81 1d       	adc	r24, r1
 888:	11 24       	eor	r1, r1
 88a:	91 1d       	adc	r25, r1
 88c:	08 95       	ret

0000088e <__udivmodhi4>:
 88e:	aa 1b       	sub	r26, r26
 890:	bb 1b       	sub	r27, r27
 892:	51 e1       	ldi	r21, 0x11	; 17
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__udivmodhi4_ep>

00000896 <__udivmodhi4_loop>:
 896:	aa 1f       	adc	r26, r26
 898:	bb 1f       	adc	r27, r27
 89a:	a6 17       	cp	r26, r22
 89c:	b7 07       	cpc	r27, r23
 89e:	10 f0       	brcs	.+4      	; 0x8a4 <__udivmodhi4_ep>
 8a0:	a6 1b       	sub	r26, r22
 8a2:	b7 0b       	sbc	r27, r23

000008a4 <__udivmodhi4_ep>:
 8a4:	88 1f       	adc	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	5a 95       	dec	r21
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__udivmodhi4_loop>
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	bc 01       	movw	r22, r24
 8b2:	cd 01       	movw	r24, r26
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
