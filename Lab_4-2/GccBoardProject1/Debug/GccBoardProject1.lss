
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012aa  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f72  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015fb  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011bd7  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000170  00000000  00000000  000159bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00015b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004439  00000000  00000000  00015bdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	a9 c0       	rjmp	.+338    	; 0x1c8 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e1       	ldi	r30, 0x1A	; 26
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	72 d0       	rcall	.+228    	; 0x1b4 <main>
  d0:	a2 c0       	rjmp	.+324    	; 0x216 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <init_adc>:

uint8_t ADC_result;
bool ADC_result_change_flag;

extern void init_adc(){
	ADMUX = (1<< REFS0)|(1<<MUX0)|(1<<ADLAR);			// Left adjust, and use VCC as top reference
  d4:	81 e6       	ldi	r24, 0x61	; 97
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE);							//Set the values of the ADC Enable and ADC Interrupt Enable bits to 1
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 = (1<<ADC1D);									//Turns off the digital input buffer for ADC1 on PF1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	PORTA ^= 0x01;
  e6:	92 b1       	in	r25, 0x02	; 2
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	89 27       	eor	r24, r25
  ec:	82 b9       	out	0x02, r24	; 2
	
	ADC_result = 0;
  ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	ADC_result_change_flag = false;
  f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ADC_result_change_flag>
  f6:	08 95       	ret

000000f8 <adc_start_conv>:
}

extern inline void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	PORTA ^= 0x02;
 102:	92 b1       	in	r25, 0x02	; 2
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	89 27       	eor	r24, r25
 108:	82 b9       	out	0x02, r24	; 2
 10a:	08 95       	ret

0000010c <read_ADC>:
}

extern uint8_t read_ADC(){
	return ADC_result;
	//PORTA ^= 0x10; 
}
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 110:	08 95       	ret

00000112 <ADC_interrupt>:

extern void inline ADC_interrupt(){
	ADC_result = ADCH;
 112:	e9 e7       	ldi	r30, 0x79	; 121
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	ADC_result_change_flag = false;
}

extern inline void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
 11c:	aa e7       	ldi	r26, 0x7A	; 122
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	8c 91       	ld	r24, X
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8c 93       	st	X, r24
	PORTA ^= 0x02;
 126:	92 b1       	in	r25, 0x02	; 2
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	89 27       	eor	r24, r25
 12c:	82 b9       	out	0x02, r24	; 2

extern void inline ADC_interrupt(){
	ADC_result = ADCH;
	adc_start_conv();
	//PORTA ^= 0x40;
	PORTA = ADCH;
 12e:	80 81       	ld	r24, Z
 130:	82 b9       	out	0x02, r24	; 2
	mTimer(1000);
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	0b c0       	rjmp	.+22     	; 0x14e <mTimer>
 138:	08 95       	ret

0000013a <init_led>:
#include <asf.h>
#include "led.h"


extern void init_led(){
	DDRA = 0b11111111; /* Sets all pins on Port D to output */
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0; /* initialize port to low – turn on LEDs */
 13e:	12 b8       	out	0x02, r1	; 2
 140:	08 95       	ret

00000142 <mTimerConfig>:
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <mTimer>:
 14e:	ac 01       	movw	r20, r24
 150:	e1 e8       	ldi	r30, 0x81	; 129
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	98 60       	ori	r25, 0x08	; 8
 158:	90 83       	st	Z, r25
 15a:	88 ee       	ldi	r24, 0xE8	; 232
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 162:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 166:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 16a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 16e:	ef e6       	ldi	r30, 0x6F	; 111
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	92 60       	ori	r25, 0x02	; 2
 176:	90 83       	st	Z, r25
 178:	b1 9a       	sbi	0x16, 1	; 22
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	05 c0       	rjmp	.+10     	; 0x18a <mTimer+0x3c>
 180:	b1 9b       	sbis	0x16, 1	; 22
 182:	fe cf       	rjmp	.-4      	; 0x180 <mTimer+0x32>
 184:	b1 9a       	sbi	0x16, 1	; 22
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	24 17       	cp	r18, r20
 18c:	35 07       	cpc	r19, r21
 18e:	1c f4       	brge	.+6      	; 0x196 <mTimer+0x48>
 190:	b1 9b       	sbis	0x16, 1	; 22
 192:	f6 cf       	rjmp	.-20     	; 0x180 <mTimer+0x32>
 194:	f7 cf       	rjmp	.-18     	; 0x184 <mTimer+0x36>
 196:	08 95       	ret

00000198 <init_pwm>:

#include "pwm.h"

extern void init_pwm(){
	//Turn on B7 to output mode
	DDRB |= 0x80; 
 198:	27 9a       	sbi	0x04, 7	; 4
	
	TCCR0A =(1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//Set timer counter compare register to Fast PWM
 19a:	83 e8       	ldi	r24, 0x83	; 131
 19c:	84 bd       	out	0x24, r24	; 36

	TCCR0B = (1<<CS01);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 120;
 1a2:	88 e7       	ldi	r24, 0x78	; 120
 1a4:	87 bd       	out	0x27, r24	; 39
 1a6:	08 95       	ret

000001a8 <set_dc_motor_speed>:
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 1a8:	87 bd       	out	0x27, r24	; 39
 1aa:	08 95       	ret

000001ac <init_stepper>:
	PORTD = steps_lookup[current_step];
}

extern inline void init_stepper()
{
	DDRA = 0xFF; /* Sets all pins on Port F to output */
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	81 b9       	out	0x01, r24	; 1
	DDRD = 0xFF; /* Sets all pins on Port F to output */
 1b0:	8a b9       	out	0x0a, r24	; 10
 1b2:	08 95       	ret

000001b4 <main>:

/* main routine */
int main()
{	
	mTimerConfig();
	init_led();
 1b4:	c6 df       	rcall	.-116    	; 0x142 <mTimerConfig>
 1b6:	c1 df       	rcall	.-126    	; 0x13a <init_led>
 1b8:	f9 df       	rcall	.-14     	; 0x1ac <init_stepper>
 1ba:	ee df       	rcall	.-36     	; 0x198 <init_pwm>
 1bc:	8b df       	rcall	.-234    	; 0xd4 <init_adc>
 1be:	78 94       	sei
 1c0:	9b df       	rcall	.-202    	; 0xf8 <adc_start_conv>
 1c2:	a4 df       	rcall	.-184    	; 0x10c <read_ADC>
 1c4:	f1 df       	rcall	.-30     	; 0x1a8 <set_dc_motor_speed>
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <main+0xe>

000001c8 <__vector_29>:
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0b b6       	in	r0, 0x3b	; 59
 1d4:	0f 92       	push	r0
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	91 df       	rcall	.-222    	; 0x112 <ADC_interrupt>
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
