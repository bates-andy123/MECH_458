
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  0080010a  0080010a  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d2c  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128a  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001efc  00000000  00000000  0000395e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  0000585c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000120f9  00000000  00000000  00005cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  00017dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00018415  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004815  00000000  00000000  00018575  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	f6 c2       	rjmp	.+1516   	; 0x5f2 <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c2       	rjmp	.+1254   	; 0x4fc <__vector_5>
  16:	00 00       	nop
  18:	18 c2       	rjmp	.+1072   	; 0x44a <__vector_6>
  1a:	00 00       	nop
  1c:	96 c2       	rjmp	.+1324   	; 0x54a <__vector_7>
  1e:	00 00       	nop
  20:	c1 c2       	rjmp	.+1410   	; 0x5a4 <__vector_8>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1c c2       	rjmp	.+1080   	; 0x4ae <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 eb       	ldi	r30, 0xB8	; 184
  ac:	f6 e0       	ldi	r31, 0x06	; 6
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	aa 30       	cpi	r26, 0x0A	; 10
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	aa e0       	ldi	r26, 0x0A	; 10
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a0 31       	cpi	r26, 0x10	; 16
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	cc d1       	rcall	.+920    	; 0x468 <main>
  d0:	f1 c2       	rjmp	.+1506   	; 0x6b4 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <init_adc>:
}


extern uint16_t read_Max_ADC(){
	return ADC_Min_result;
}
  d4:	81 e6       	ldi	r24, 0x61	; 97
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADC_Min_result>
  ec:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ADC_keep_running>
  f0:	08 95       	ret

000000f2 <adc_start_conv>:
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <adc_stop_conv>:
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADC_Min_result>
 104:	08 95       	ret

00000106 <ADC_interrupt>:

extern void ADC_interrupt(){
	ADC_result = ADCH;
 106:	e9 e7       	ldi	r30, 0x79	; 121
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_result>
	if(ADC_Min_result > ADCH){
 110:	90 81       	ld	r25, Z
 112:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_Min_result>
 116:	98 17       	cp	r25, r24
 118:	20 f4       	brcc	.+8      	; 0x122 <ADC_interrupt+0x1c>
		ADC_Min_result = ADCH;
 11a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADC_Min_result>
	}
	adc_start_conv();
	PORTA = ADC_Min_result;
 122:	e7 df       	rcall	.-50     	; 0xf2 <adc_start_conv>
 124:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_Min_result>
 128:	82 b9       	out	0x02, r24	; 2
 12a:	08 95       	ret

0000012c <buf_init>:
#include "Buffer.h"
#include <stdlib.h>
#include <avr/io.h>

extern void buf_init(){
	most_recent_pushed_idx = 0;
 12c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <most_recent_pushed_idx>
	current_push_idx = 0;
 130:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <current_push_idx>
	starting_idx = 0;
 134:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <starting_idx>
	first_on_belt = 0;
 138:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <first_on_belt>
 13c:	08 95       	ret

0000013e <buf_new>:
}

extern void buf_new(){
	if(buf_length <= BUFFER_SIZE){
 13e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <buf_length>
 142:	23 33       	cpi	r18, 0x33	; 51
 144:	f8 f4       	brcc	.+62     	; 0x184 <buf_new+0x46>
		//Save the item to the buffer
		belt[current_push_idx].assumed_material = amount_of_materials;
 146:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <current_push_idx>
 14a:	83 2f       	mov	r24, r19
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	ee 5e       	subi	r30, 0xEE	; 238
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	44 e0       	ldi	r20, 0x04	; 4
 162:	43 83       	std	Z+3, r20	; 0x03
		belt[current_push_idx].last_stage = Promixity_stage;
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	44 83       	std	Z+4, r20	; 0x04
		belt[current_push_idx].magnetic = false;
 168:	12 82       	std	Z+2, r1	; 0x02
		belt[current_push_idx].max_adc = 0;
 16a:	11 82       	std	Z+1, r1	; 0x01
 16c:	10 82       	st	Z, r1

		//Increment the variables for next time		
		most_recent_pushed_idx = current_push_idx;
 16e:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <most_recent_pushed_idx>
		current_push_idx = (current_push_idx + 1) % BUFFER_SIZE;
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	62 e3       	ldi	r22, 0x32	; 50
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	76 d2       	rcall	.+1260   	; 0x666 <__divmodhi4>
 17a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <current_push_idx>
		buf_length++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <buf_length>
 184:	08 95       	ret

00000186 <set_first_item>:
	}
}

extern set_first_item(Materials mat, Stage stag){
	belt[first_on_belt].assumed_material = mat;
 186:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <first_on_belt>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	9f 01       	movw	r18, r30
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	e2 0f       	add	r30, r18
 198:	f3 1f       	adc	r31, r19
 19a:	ee 5e       	subi	r30, 0xEE	; 238
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	83 83       	std	Z+3, r24	; 0x03
	belt[first_on_belt].last_stage = stag;
 1a0:	64 83       	std	Z+4, r22	; 0x04
}
 1a2:	08 95       	ret

000001a4 <buf_is_magnetic>:

extern buf_is_magnetic(){
	belt[most_recent_pushed_idx].magnetic = true;
 1a4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <most_recent_pushed_idx>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	cf 01       	movw	r24, r30
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	ee 5e       	subi	r30, 0xEE	; 238
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	82 83       	std	Z+2, r24	; 0x02
	belt[most_recent_pushed_idx].assumed_material = Steel;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	83 83       	std	Z+3, r24	; 0x03
}
 1c4:	08 95       	ret

000001c6 <buf_get_first_item_material>:

extern inline Materials buf_get_first_item_material(){
	return belt[first_on_belt].assumed_material;
 1c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <first_on_belt>
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	8e 0f       	add	r24, r30
 1d8:	9f 1f       	adc	r25, r31
 1da:	fc 01       	movw	r30, r24
 1dc:	ee 5e       	subi	r30, 0xEE	; 238
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
}
 1e0:	83 81       	ldd	r24, Z+3	; 0x03
 1e2:	08 95       	ret

000001e4 <init_interrupt>:

#include <avr/io.h>

void init_interrupt(){
	//EICRA |= _BV(ISC00);
	EICRA |= _BV(ISC00);
 1e4:	e9 e6       	ldi	r30, 0x69	; 105
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	80 83       	st	Z, r24
	
	//Stepper motor at home, active low
	EICRB |= _BV(ISC51);
 1ee:	ea e6       	ldi	r30, 0x6A	; 106
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	80 83       	st	Z, r24
	
	//First promixity sensor, active low
	EICRB |= _BV(ISC41);
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
	
	//Last promixity sensor, active low
	EICRB |= _BV(ISC61);
 1fe:	80 81       	ld	r24, Z
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 83       	st	Z, r24
	
	//Magnetic detection sensor, active low
	EICRB |= _BV(ISC71);
 204:	80 81       	ld	r24, Z
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
	
	EIMSK |= 0b11110001;
 20a:	8d b3       	in	r24, 0x1d	; 29
 20c:	81 6f       	ori	r24, 0xF1	; 241
 20e:	8d bb       	out	0x1d, r24	; 29
 210:	08 95       	ret

00000212 <init_led>:
	}else{
		PORTA >>= 1;	
	}
	
	current_LED++;
	current_LED %= 10;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	81 b9       	out	0x01, r24	; 1
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	80 6f       	ori	r24, 0xF0	; 240
 21a:	8a b9       	out	0x0a, r24	; 10
 21c:	12 b8       	out	0x02, r1	; 2
 21e:	08 95       	ret

00000220 <status_leds>:
}

extern void status_leds(Status_LED_Position pos, Status_LED_Colour colour){
		if(pos == top){
 220:	86 30       	cpi	r24, 0x06	; 6
 222:	79 f4       	brne	.+30     	; 0x242 <status_leds+0x22>
			PORTD &= ~0xC0;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8f 73       	andi	r24, 0x3F	; 63
 228:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 22a:	63 30       	cpi	r22, 0x03	; 3
 22c:	21 f4       	brne	.+8      	; 0x236 <status_leds+0x16>
				PORTD |= 0xC0;	
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	80 6c       	ori	r24, 0xC0	; 192
 232:	8b b9       	out	0x0b, r24	; 11
 234:	08 95       	ret
			}else if(colour == red){
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	11 f4       	brne	.+4      	; 0x23e <status_leds+0x1e>
				PORTD |= 0x80;
 23a:	5f 9a       	sbi	0x0b, 7	; 11
 23c:	08 95       	ret
			}else{
				PORTD |= 0x40;
 23e:	5e 9a       	sbi	0x0b, 6	; 11
 240:	08 95       	ret
			}
		}else{
			PORTD &= ~0x30;
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8f 7c       	andi	r24, 0xCF	; 207
 246:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 248:	63 30       	cpi	r22, 0x03	; 3
 24a:	21 f4       	brne	.+8      	; 0x254 <status_leds+0x34>
				PORTD |= 0x30;
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	80 63       	ori	r24, 0x30	; 48
 250:	8b b9       	out	0x0b, r24	; 11
 252:	08 95       	ret
				}else if(colour == red){
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	11 f4       	brne	.+4      	; 0x25c <status_leds+0x3c>
				PORTD |= 0x10;
 258:	5c 9a       	sbi	0x0b, 4	; 11
 25a:	08 95       	ret
				}else{
				PORTD |= 0x20;
 25c:	5d 9a       	sbi	0x0b, 5	; 11
 25e:	08 95       	ret

00000260 <mTimerConfig>:
#include "mtimer.h"

extern void mTimerConfig()
{
	/* Insert system clock initialization code here (sysclk_init()). */
	TCCR1B |= _BV(CS10);
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	81 60       	ori	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
 26a:	08 95       	ret

0000026c <mTimer>:
}

extern void mTimer(int count)
{
 26c:	ac 01       	movw	r20, r24
	int i = 0;
	
	TCCR1B |= _BV(WGM12); /*CTC mode*/
 26e:	e1 e8       	ldi	r30, 0x81	; 129
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	98 60       	ori	r25, 0x08	; 8
 276:	90 83       	st	Z, r25
	
	OCR1A = 0x03e8; //1000
 278:	88 ee       	ldi	r24, 0xE8	; 232
 27a:	93 e0       	ldi	r25, 0x03	; 3
 27c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 280:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCNT1 = 0x0000;
 284:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 288:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
 28c:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B |= _BV(CS10);
}

extern void mTimer(int count)
{
	int i = 0;
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 292:	05 c0       	rjmp	.+10     	; 0x29e <mTimer+0x32>
	{
		if ((TIFR1 & 0x02) == 0x02)
 294:	b1 9b       	sbis	0x16, 1	; 22
 296:	fe cf       	rjmp	.-4      	; 0x294 <mTimer+0x28>
		{
			TIFR1 |= _BV(OCF1A);
 298:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 29e:	24 17       	cp	r18, r20
 2a0:	35 07       	cpc	r19, r21
 2a2:	1c f4       	brge	.+6      	; 0x2aa <mTimer+0x3e>
	{
		if ((TIFR1 & 0x02) == 0x02)
 2a4:	b1 9b       	sbis	0x16, 1	; 22
 2a6:	f6 cf       	rjmp	.-20     	; 0x294 <mTimer+0x28>
 2a8:	f7 cf       	rjmp	.-18     	; 0x298 <mTimer+0x2c>
 2aa:	08 95       	ret

000002ac <init_pwm>:
#define IB	(0x2)
#define EB	(0x8)

extern void init_pwm(){
	//Turn on B7 to output mode
	DDRB |= 0x8F; 
 2ac:	84 b1       	in	r24, 0x04	; 4
 2ae:	8f 68       	ori	r24, 0x8F	; 143
 2b0:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A =(1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//Set timer counter compare register to Fast PWM
 2b2:	83 e8       	ldi	r24, 0x83	; 131
 2b4:	84 bd       	out	0x24, r24	; 36

	TCCR0B = (1<<CS01) | (1<<CS00);
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 2ba:	17 bc       	out	0x27, r1	; 39
 2bc:	08 95       	ret

000002be <set_dc_motor_speed>:
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 2be:	87 bd       	out	0x27, r24	; 39
 2c0:	08 95       	ret

000002c2 <set_motor_setting>:
	set_motor_setting(Brake_to_VCC);
}

extern void set_motor_setting(Motor_Setting setting){
	//Force all settings to off
	PORTB &= ~(IA | IB | EA | EB);
 2c2:	95 b1       	in	r25, 0x05	; 5
 2c4:	90 7f       	andi	r25, 0xF0	; 240
 2c6:	95 b9       	out	0x05, r25	; 5
	
	if(setting == DC_Motor_Clockwise){
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <set_motor_setting+0xe>
		PORTB |= IB;
 2cc:	29 9a       	sbi	0x05, 1	; 5
 2ce:	08 95       	ret
	}
	else if (setting == DC_Motor_Counter_Clockwise){
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <set_motor_setting+0x14>
		PORTB |= IA;
 2d4:	2a 9a       	sbi	0x05, 2	; 5
 2d6:	08 95       	ret

000002d8 <stop_pwm>:
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 2d8:	17 bc       	out	0x27, r1	; 39
}

extern inline void stop_pwm(){
	set_dc_motor_speed(0);
	set_motor_setting(Brake_to_VCC);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	f2 cf       	rjmp	.-28     	; 0x2c2 <set_motor_setting>
 2de:	08 95       	ret

000002e0 <init_stepper>:
	return stepper_material_position;
}

extern bool check_if_home(){
	return (bool)(home_flag); 
}
 2e0:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <home_flag>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	87 b9       	out	0x07, r24	; 7
 2e8:	08 95       	ret

000002ea <step>:
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	79 f4       	brne	.+30     	; 0x30c <step+0x22>
 2ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	83 70       	andi	r24, 0x03	; 3
 2f8:	90 78       	andi	r25, 0x80	; 128
 2fa:	99 23       	and	r25, r25
 2fc:	24 f4       	brge	.+8      	; 0x306 <step+0x1c>
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	8c 6f       	ori	r24, 0xFC	; 252
 302:	9f 6f       	ori	r25, 0xFF	; 255
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 30a:	0b c0       	rjmp	.+22     	; 0x322 <step+0x38>
 30c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 310:	81 11       	cpse	r24, r1
 312:	04 c0       	rjmp	.+8      	; 0x31c <step+0x32>
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 31a:	03 c0       	rjmp	.+6      	; 0x322 <step+0x38>
 31c:	81 50       	subi	r24, 0x01	; 1
 31e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 322:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	ef 5f       	subi	r30, 0xFF	; 255
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	80 81       	ld	r24, Z
 332:	88 b9       	out	0x08, r24	; 8
 334:	08 95       	ret

00000336 <get_current_stepper_material>:
 336:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
 33a:	08 95       	ret

0000033c <block_till_stepper_home>:

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 33c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <home_flag>
 340:	81 11       	cpse	r24, r1
 342:	09 c0       	rjmp	.+18     	; 0x356 <block_till_stepper_home+0x1a>
		step(Clock_Wise);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	d1 df       	rcall	.-94     	; 0x2ea <step>
		mTimer(STEP_TIME_MS);
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	8f df       	rcall	.-226    	; 0x26c <mTimer>
extern bool check_if_home(){
	return (bool)(home_flag); 
}

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 34e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <home_flag>
 352:	88 23       	and	r24, r24
 354:	b9 f3       	breq	.-18     	; 0x344 <block_till_stepper_home+0x8>
		step(Clock_Wise);
		mTimer(STEP_TIME_MS);
	}
	stepper_material_position = Black;
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <stepper_material_position>
 35c:	08 95       	ret

0000035e <stepper_repeat_steps>:
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
	for(uint8_t i = 0; i < steps; i++){
 364:	88 23       	and	r24, r24
 366:	59 f0       	breq	.+22     	; 0x37e <stepper_repeat_steps+0x20>
 368:	16 2f       	mov	r17, r22
 36a:	d8 2f       	mov	r29, r24
 36c:	c0 e0       	ldi	r28, 0x00	; 0
		step(dir);
 36e:	81 2f       	mov	r24, r17
 370:	bc df       	rcall	.-136    	; 0x2ea <step>
		mTimer(STEP_TIME_MS);
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	7a df       	rcall	.-268    	; 0x26c <mTimer>
	}
	stepper_material_position = Black;
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
	for(uint8_t i = 0; i < steps; i++){
 378:	cf 5f       	subi	r28, 0xFF	; 255
 37a:	dc 13       	cpse	r29, r28
 37c:	f8 cf       	rjmp	.-16     	; 0x36e <stepper_repeat_steps+0x10>
		step(dir);
		mTimer(STEP_TIME_MS);
	}
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	08 95       	ret

00000386 <go_to_material>:

extern void go_to_material(Materials mat){
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
	
	if(stepper_material_position == Black){
 38a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	79 f4       	brne	.+30     	; 0x3b0 <go_to_material+0x2a>
		if(mat == Steel){
 392:	c2 30       	cpi	r28, 0x02	; 2
 394:	21 f4       	brne	.+8      	; 0x39e <go_to_material+0x18>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 396:	6f ef       	ldi	r22, 0xFF	; 255
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	e1 df       	rcall	.-62     	; 0x35e <stepper_repeat_steps>
 39c:	45 c0       	rjmp	.+138    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		}else if(mat == Aluminum){
 39e:	c1 11       	cpse	r28, r1
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <go_to_material+0x24>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	82 e3       	ldi	r24, 0x32	; 50
 3a6:	db df       	rcall	.-74     	; 0x35e <stepper_repeat_steps>
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 3a8:	3f c0       	rjmp	.+126    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	84 e6       	ldi	r24, 0x64	; 100
		}
	}
	if(stepper_material_position == Steel){
 3ae:	d7 df       	rcall	.-82     	; 0x35e <stepper_repeat_steps>
 3b0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
 3b4:	82 30       	cpi	r24, 0x02	; 2
		if(mat == White)
 3b6:	79 f4       	brne	.+30     	; 0x3d6 <go_to_material+0x50>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 3b8:	c1 30       	cpi	r28, 0x01	; 1
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <go_to_material+0x3e>
 3bc:	6f ef       	ldi	r22, 0xFF	; 255
 3be:	82 e3       	ldi	r24, 0x32	; 50
		else if(mat == Black)
 3c0:	ce df       	rcall	.-100    	; 0x35e <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 3c2:	37 c0       	rjmp	.+110    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3c4:	c3 30       	cpi	r28, 0x03	; 3
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <go_to_material+0x4a>
 3c8:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 3ca:	82 e3       	ldi	r24, 0x32	; 50
 3cc:	c8 df       	rcall	.-112    	; 0x35e <stepper_repeat_steps>
 3ce:	31 c0       	rjmp	.+98     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3d0:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(stepper_material_position == White){
 3d2:	84 e6       	ldi	r24, 0x64	; 100
 3d4:	c4 df       	rcall	.-120    	; 0x35e <stepper_repeat_steps>
 3d6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
		if(mat == Aluminum)
 3da:	81 30       	cpi	r24, 0x01	; 1
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 3dc:	79 f4       	brne	.+30     	; 0x3fc <go_to_material+0x76>
 3de:	c1 11       	cpse	r28, r1
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <go_to_material+0x64>
 3e2:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == Steel)
 3e4:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 3e6:	bb df       	rcall	.-138    	; 0x35e <stepper_repeat_steps>
 3e8:	29 c0       	rjmp	.+82     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3ea:	c2 30       	cpi	r28, 0x02	; 2
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <go_to_material+0x70>
 3ee:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 3f0:	82 e3       	ldi	r24, 0x32	; 50
 3f2:	b5 df       	rcall	.-150    	; 0x35e <stepper_repeat_steps>
 3f4:	23 c0       	rjmp	.+70     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	}
	if(stepper_material_position == Aluminum){
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	84 e6       	ldi	r24, 0x64	; 100
 3fa:	b1 df       	rcall	.-158    	; 0x35e <stepper_repeat_steps>
 3fc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
		if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 400:	81 11       	cpse	r24, r1
 402:	0f c0       	rjmp	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 404:	c3 30       	cpi	r28, 0x03	; 3
 406:	21 f4       	brne	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		else if(mat == White)
 408:	6f ef       	ldi	r22, 0xFF	; 255
 40a:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 40c:	a8 df       	rcall	.-176    	; 0x35e <stepper_repeat_steps>
 40e:	09 c0       	rjmp	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 410:	c1 30       	cpi	r28, 0x01	; 1
 412:	21 f4       	brne	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 416:	82 e3       	ldi	r24, 0x32	; 50
 418:	a2 df       	rcall	.-188    	; 0x35e <stepper_repeat_steps>
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	61 e0       	ldi	r22, 0x01	; 1
	}//*/
	stepper_material_position = mat;
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	9e df       	rcall	.-196    	; 0x35e <stepper_repeat_steps>
}
 422:	c0 93 0f 02 	sts	0x020F, r28	; 0x80020f <stepper_material_position>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
		}
	}
	if(stepper_material_position == Steel){
 426:	0f c0       	rjmp	.+30     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 428:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
 42c:	82 30       	cpi	r24, 0x02	; 2
		else if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == White){
 42e:	99 f6       	brne	.-90     	; 0x3d6 <go_to_material+0x50>
 430:	cf cf       	rjmp	.-98     	; 0x3d0 <go_to_material+0x4a>
 432:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
 436:	81 30       	cpi	r24, 0x01	; 1
		else if(mat == Steel)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == Aluminum){
 438:	09 f7       	brne	.-62     	; 0x3fc <go_to_material+0x76>
 43a:	dd cf       	rjmp	.-70     	; 0x3f6 <go_to_material+0x70>
 43c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <stepper_material_position>
 440:	88 23       	and	r24, r24
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}//*/
	stepper_material_position = mat;
}
 442:	61 f3       	breq	.-40     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 444:	ee cf       	rjmp	.-36     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <__vector_6>:

ISR(INT5_vect){
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	8f 93       	push	r24
	home_flag = true;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <home_flag>
 45c:	8f 91       	pop	r24
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <main>:
int main()
{	
	cli();
	mTimerConfig();
	init_led();
	init_interrupt();
 468:	f8 94       	cli
 46a:	fa de       	rcall	.-524    	; 0x260 <mTimerConfig>
 46c:	d2 de       	rcall	.-604    	; 0x212 <init_led>
 46e:	ba de       	rcall	.-652    	; 0x1e4 <init_interrupt>
 470:	37 df       	rcall	.-402    	; 0x2e0 <init_stepper>
 472:	1c df       	rcall	.-456    	; 0x2ac <init_pwm>
 474:	2f de       	rcall	.-930    	; 0xd4 <init_adc>
 476:	5a de       	rcall	.-844    	; 0x12c <buf_init>
 478:	78 94       	sei
 47a:	88 ec       	ldi	r24, 0xC8	; 200
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	f6 de       	rcall	.-532    	; 0x26c <mTimer>
 480:	5d df       	rcall	.-326    	; 0x33c <block_till_stepper_home>
 482:	88 ec       	ldi	r24, 0xC8	; 200
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	f2 de       	rcall	.-540    	; 0x26c <mTimer>
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	1b df       	rcall	.-458    	; 0x2c2 <set_motor_setting>
 48c:	8f e0       	ldi	r24, 0x0F	; 15
 48e:	17 df       	rcall	.-466    	; 0x2be <set_dc_motor_speed>
 490:	30 de       	rcall	.-928    	; 0xf2 <adc_start_conv>
 492:	88 ec       	ldi	r24, 0xC8	; 200
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	ea de       	rcall	.-556    	; 0x26c <mTimer>
 498:	96 de       	rcall	.-724    	; 0x1c6 <buf_get_first_item_material>
 49a:	c8 2f       	mov	r28, r24
 49c:	4c df       	rcall	.-360    	; 0x336 <get_current_stepper_material>
 49e:	c8 17       	cp	r28, r24
 4a0:	11 f0       	breq	.+4      	; 0x4a6 <main+0x3e>
 4a2:	91 de       	rcall	.-734    	; 0x1c6 <buf_get_first_item_material>
 4a4:	70 df       	rcall	.-288    	; 0x386 <go_to_material>
 4a6:	84 e6       	ldi	r24, 0x64	; 100
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	e0 de       	rcall	.-576    	; 0x26c <mTimer>
 4ac:	f5 cf       	rjmp	.-22     	; 0x498 <main+0x30>

000004ae <__vector_29>:
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	0b b6       	in	r0, 0x3b	; 59
 4ba:	0f 92       	push	r0
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
 4d4:	18 de       	rcall	.-976    	; 0x106 <ADC_interrupt>
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0b be       	out	0x3b, r0	; 59
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__vector_5>:
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	0b b6       	in	r0, 0x3b	; 59
 508:	0f 92       	push	r0
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
 522:	0d de       	rcall	.-998    	; 0x13e <buf_new>
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0b be       	out	0x3b, r0	; 59
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_7>:
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	0b b6       	in	r0, 0x3b	; 59
 556:	0f 92       	push	r0
 558:	2f 93       	push	r18
 55a:	3f 93       	push	r19
 55c:	4f 93       	push	r20
 55e:	5f 93       	push	r21
 560:	6f 93       	push	r22
 562:	7f 93       	push	r23
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	cf 93       	push	r28
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
 572:	e1 de       	rcall	.-574    	; 0x336 <get_current_stepper_material>
 574:	c8 2f       	mov	r28, r24
 576:	27 de       	rcall	.-946    	; 0x1c6 <buf_get_first_item_material>
 578:	c8 13       	cpse	r28, r24
 57a:	ae de       	rcall	.-676    	; 0x2d8 <stop_pwm>
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	cf 91       	pop	r28
 582:	bf 91       	pop	r27
 584:	af 91       	pop	r26
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	7f 91       	pop	r23
 58c:	6f 91       	pop	r22
 58e:	5f 91       	pop	r21
 590:	4f 91       	pop	r20
 592:	3f 91       	pop	r19
 594:	2f 91       	pop	r18
 596:	0f 90       	pop	r0
 598:	0b be       	out	0x3b, r0	; 59
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <__vector_8>:
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	0b b6       	in	r0, 0x3b	; 59
 5b0:	0f 92       	push	r0
 5b2:	2f 93       	push	r18
 5b4:	3f 93       	push	r19
 5b6:	4f 93       	push	r20
 5b8:	5f 93       	push	r21
 5ba:	6f 93       	push	r22
 5bc:	7f 93       	push	r23
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	af 93       	push	r26
 5c4:	bf 93       	push	r27
 5c6:	ef 93       	push	r30
 5c8:	ff 93       	push	r31
 5ca:	ec dd       	rcall	.-1064   	; 0x1a4 <buf_is_magnetic>
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0b be       	out	0x3b, r0	; 59
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <__vector_1>:
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	0b b6       	in	r0, 0x3b	; 59
 5fe:	0f 92       	push	r0
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
 618:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	31 f4       	brne	.+12     	; 0x62c <__vector_1+0x3a>
 620:	62 e0       	ldi	r22, 0x02	; 2
 622:	86 e0       	ldi	r24, 0x06	; 6
 624:	fd dd       	rcall	.-1030   	; 0x220 <status_leds>
 626:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 62a:	0a c0       	rjmp	.+20     	; 0x640 <__vector_1+0x4e>
 62c:	63 e0       	ldi	r22, 0x03	; 3
 62e:	86 e0       	ldi	r24, 0x06	; 6
 630:	f7 dd       	rcall	.-1042   	; 0x220 <status_leds>
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 638:	62 dd       	rcall	.-1340   	; 0xfe <adc_stop_conv>
 63a:	63 e0       	ldi	r22, 0x03	; 3
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	a3 dd       	rcall	.-1210   	; 0x186 <set_first_item>
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0b be       	out	0x3b, r0	; 59
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__divmodhi4>:
 666:	97 fb       	bst	r25, 7
 668:	07 2e       	mov	r0, r23
 66a:	16 f4       	brtc	.+4      	; 0x670 <__divmodhi4+0xa>
 66c:	00 94       	com	r0
 66e:	06 d0       	rcall	.+12     	; 0x67c <__divmodhi4_neg1>
 670:	77 fd       	sbrc	r23, 7
 672:	08 d0       	rcall	.+16     	; 0x684 <__divmodhi4_neg2>
 674:	0b d0       	rcall	.+22     	; 0x68c <__udivmodhi4>
 676:	07 fc       	sbrc	r0, 7
 678:	05 d0       	rcall	.+10     	; 0x684 <__divmodhi4_neg2>
 67a:	3e f4       	brtc	.+14     	; 0x68a <__divmodhi4_exit>

0000067c <__divmodhi4_neg1>:
 67c:	90 95       	com	r25
 67e:	81 95       	neg	r24
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__divmodhi4_neg2>:
 684:	70 95       	com	r23
 686:	61 95       	neg	r22
 688:	7f 4f       	sbci	r23, 0xFF	; 255

0000068a <__divmodhi4_exit>:
 68a:	08 95       	ret

0000068c <__udivmodhi4>:
 68c:	aa 1b       	sub	r26, r26
 68e:	bb 1b       	sub	r27, r27
 690:	51 e1       	ldi	r21, 0x11	; 17
 692:	07 c0       	rjmp	.+14     	; 0x6a2 <__udivmodhi4_ep>

00000694 <__udivmodhi4_loop>:
 694:	aa 1f       	adc	r26, r26
 696:	bb 1f       	adc	r27, r27
 698:	a6 17       	cp	r26, r22
 69a:	b7 07       	cpc	r27, r23
 69c:	10 f0       	brcs	.+4      	; 0x6a2 <__udivmodhi4_ep>
 69e:	a6 1b       	sub	r26, r22
 6a0:	b7 0b       	sbc	r27, r23

000006a2 <__udivmodhi4_ep>:
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	5a 95       	dec	r21
 6a8:	a9 f7       	brne	.-22     	; 0x694 <__udivmodhi4_loop>
 6aa:	80 95       	com	r24
 6ac:	90 95       	com	r25
 6ae:	bc 01       	movw	r22, r24
 6b0:	cd 01       	movw	r24, r26
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
