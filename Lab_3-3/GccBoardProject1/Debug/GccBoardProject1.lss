
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000510  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  000005aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001247  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df5  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dda  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000034e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011a57  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000311  00000000  00000000  00015077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00015388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000412c  00000000  00000000  00015408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	a6 e0       	ldi	r26, 0x06	; 6
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	aa 30       	cpi	r26, 0x0A	; 10
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e0 e1       	ldi	r30, 0x10	; 16
  bc:	f5 e0       	ldi	r31, 0x05	; 5
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>
  ce:	7f d0       	rcall	.+254    	; 0x1ce <main>
  d0:	1d c2       	rjmp	.+1082   	; 0x50c <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <led_init>:

#include <asf.h>


extern void led_init(){
	DDRA = 0b11111111; /* Sets all pins on Port D to output */
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0; /* initialize port to high – turn on LEDs */
  d8:	12 b8       	out	0x02, r1	; 2
  da:	08 95       	ret

000000dc <mTimerConfig>:
#include <avr/io.h>
#include "mtimer.h"

extern void mTimerConfig()
{
	TCCR1B |= _BV(CS10);
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <mTimer>:
}

extern void mTimer(int count)
{
  e8:	ac 01       	movw	r20, r24
	int i = 0;
	
	TCCR1B |= _BV(WGM12); /*CTC mode*/
  ea:	e1 e8       	ldi	r30, 0x81	; 129
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	98 60       	ori	r25, 0x08	; 8
  f2:	90 83       	st	Z, r25
	
	OCR1A = 0x03e8; //1000
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCNT1 = 0x0000;
 100:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 104:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	TIMSK1 |= 0b00000010;
 108:	ef e6       	ldi	r30, 0x6F	; 111
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	92 60       	ori	r25, 0x02	; 2
 110:	90 83       	st	Z, r25
	
	TIFR1 |= _BV(OCF1A);
 112:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B |= _BV(CS10);
}

extern void mTimer(int count)
{
	int i = 0;
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
	
	TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 118:	05 c0       	rjmp	.+10     	; 0x124 <mTimer+0x3c>
	{
		if ((TIFR1 & 0x02) == 0x02)
 11a:	b1 9b       	sbis	0x16, 1	; 22
 11c:	fe cf       	rjmp	.-4      	; 0x11a <mTimer+0x32>
		{
			TIFR1 |= _BV(OCF1A);
 11e:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 124:	24 17       	cp	r18, r20
 126:	35 07       	cpc	r19, r21
 128:	1c f4       	brge	.+6      	; 0x130 <mTimer+0x48>
	{
		if ((TIFR1 & 0x02) == 0x02)
 12a:	b1 9b       	sbis	0x16, 1	; 22
 12c:	f6 cf       	rjmp	.-20     	; 0x11a <mTimer+0x32>
 12e:	f7 cf       	rjmp	.-18     	; 0x11e <mTimer+0x36>
 130:	08 95       	ret

00000132 <initLink>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	c6 d0       	rcall	.+396    	; 0x2ca <malloc>
 13e:	99 83       	std	Y+1, r25	; 0x01
 140:	88 83       	st	Y, r24
 142:	fc 01       	movw	r30, r24
 144:	13 82       	std	Z+3, r1	; 0x03
 146:	12 82       	std	Z+2, r1	; 0x02
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <enqueue>:
 14e:	db 01       	movw	r26, r22
 150:	ed 91       	ld	r30, X+
 152:	fc 91       	ld	r31, X
 154:	30 97       	sbiw	r30, 0x00	; 0
 156:	61 f0       	breq	.+24     	; 0x170 <enqueue+0x22>
 158:	da 01       	movw	r26, r20
 15a:	8d 91       	ld	r24, X+
 15c:	9c 91       	ld	r25, X
 15e:	11 97       	sbiw	r26, 0x01	; 1
 160:	93 83       	std	Z+3, r25	; 0x03
 162:	82 83       	std	Z+2, r24	; 0x02
 164:	8d 91       	ld	r24, X+
 166:	9c 91       	ld	r25, X
 168:	fb 01       	movw	r30, r22
 16a:	91 83       	std	Z+1, r25	; 0x01
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret
 170:	da 01       	movw	r26, r20
 172:	2d 91       	ld	r18, X+
 174:	3c 91       	ld	r19, X
 176:	11 97       	sbiw	r26, 0x01	; 1
 178:	fc 01       	movw	r30, r24
 17a:	31 83       	std	Z+1, r19	; 0x01
 17c:	20 83       	st	Z, r18
 17e:	8d 91       	ld	r24, X+
 180:	9c 91       	ld	r25, X
 182:	db 01       	movw	r26, r22
 184:	8d 93       	st	X+, r24
 186:	9c 93       	st	X, r25
 188:	08 95       	ret

0000018a <dequeue>:
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	db 01       	movw	r26, r22
 192:	8d 93       	st	X+, r24
 194:	9c 93       	st	X, r25
 196:	a0 81       	ld	r26, Z
 198:	b1 81       	ldd	r27, Z+1	; 0x01
 19a:	10 97       	sbiw	r26, 0x00	; 0
 19c:	31 f0       	breq	.+12     	; 0x1aa <dequeue+0x20>
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	8d 91       	ld	r24, X+
 1a2:	9c 91       	ld	r25, X
 1a4:	13 97       	sbiw	r26, 0x03	; 3
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 1ac:	dc 01       	movw	r26, r24
 1ae:	ed 91       	ld	r30, X+
 1b0:	fc 91       	ld	r31, X

	while(temp != NULL){
 1b2:	30 97       	sbiw	r30, 0x00	; 0
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <size+0x1c>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
 1ba:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 1c2:	30 97       	sbiw	r30, 0x00	; 0
 1c4:	d1 f7       	brne	.-12     	; 0x1ba <size+0xe>
 1c6:	08 95       	ret
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 1cc:	08 95       	ret

000001ce <main>:
/* global variables */
/* Avoid using these */

/* main routine */
int main()
{	
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	28 97       	sbiw	r28, 0x08	; 8
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
	mTimerConfig();
	led_init();
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	7c df       	rcall	.-264    	; 0xdc <mTimerConfig>
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	DDRB = 0xFF; 		/* Used for debugging purposes only */
 1e4:	77 df       	rcall	.-274    	; 0xd4 <led_init>
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
				

	rtnLink = NULL;
 1e8:	84 b9       	out	0x04, r24	; 4
 1ea:	18 86       	std	Y+8, r1	; 0x08
	newLink = NULL;
 1ec:	1f 82       	std	Y+7, r1	; 0x07
 1ee:	1e 82       	std	Y+6, r1	; 0x06
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 1f0:	1d 82       	std	Y+5, r1	; 0x05
 1f2:	1a 82       	std	Y+2, r1	; 0x02
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	1c 82       	std	Y+4, r1	; 0x04

	setup(&head, &tail);
	while(1)
	{
		//After de-bounce we want to hold the code until state flops
		while(BUTTON_STATUS(go_button) == 0);
 1f8:	1b 82       	std	Y+3, r1	; 0x03
		mTimer(BUTTON_DEBOUNCE_MS);
 1fa:	30 9b       	sbis	0x06, 0	; 6
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <main+0x2c>
		
		//Add the data to buffer
		initLink(&newLink);
 1fe:	84 e1       	ldi	r24, 0x14	; 20
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	72 df       	rcall	.-284    	; 0xe8 <mTimer>
 204:	ce 01       	movw	r24, r28
		newLink->e.itemCode = ((PINC & 0x30) >> 4);
 206:	05 96       	adiw	r24, 0x05	; 5
 208:	94 df       	rcall	.-216    	; 0x132 <initLink>
 20a:	ed 81       	ldd	r30, Y+5	; 0x05
 20c:	fe 81       	ldd	r31, Y+6	; 0x06
 20e:	86 b1       	in	r24, 0x06	; 6
 210:	80 73       	andi	r24, 0x30	; 48
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	95 95       	asr	r25
 21e:	87 95       	ror	r24
 220:	95 95       	asr	r25
		enqueue(&head, &tail, &newLink);
 222:	87 95       	ror	r24
 224:	80 83       	st	Z, r24
 226:	ae 01       	movw	r20, r28
 228:	4b 5f       	subi	r20, 0xFB	; 251
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	be 01       	movw	r22, r28
 22e:	6d 5f       	subi	r22, 0xFD	; 253
 230:	7f 4f       	sbci	r23, 0xFF	; 255
		
		PORTA = (size(&head, &tail) << 6);
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	8b df       	rcall	.-234    	; 0x14e <enqueue>
 238:	be 01       	movw	r22, r28
 23a:	6d 5f       	subi	r22, 0xFD	; 253
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	b4 df       	rcall	.-152    	; 0x1ac <size>
 244:	82 95       	swap	r24
		
		while(BUTTON_STATUS(go_button));
 246:	88 0f       	add	r24, r24
 248:	88 0f       	add	r24, r24
		mTimer(BUTTON_DEBOUNCE_MS);
 24a:	80 7c       	andi	r24, 0xC0	; 192
 24c:	82 b9       	out	0x02, r24	; 2
 24e:	30 99       	sbic	0x06, 0	; 6
		
		if(size(&head, &tail) >= 4)
 250:	fe cf       	rjmp	.-4      	; 0x24e <main+0x80>
 252:	84 e1       	ldi	r24, 0x14	; 20
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	48 df       	rcall	.-368    	; 0xe8 <mTimer>
 258:	be 01       	movw	r22, r28
 25a:	6d 5f       	subi	r22, 0xFD	; 253
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			dequeue( &head, &rtnLink);
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a4 df       	rcall	.-184    	; 0x1ac <size>
 264:	04 97       	sbiw	r24, 0x04	; 4
 266:	4c f2       	brlt	.-110    	; 0x1fa <main+0x2c>
 268:	be 01       	movw	r22, r28
			free(rtnLink);
 26a:	69 5f       	subi	r22, 0xF9	; 249
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	ce 01       	movw	r24, r28
			
			//Turn off all the LEDs
			PORTA = 0;
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	8b df       	rcall	.-234    	; 0x18a <dequeue>
 274:	8f 81       	ldd	r24, Y+7	; 0x07
			
			for(uint8_t i = 0; i < 3; i++)
			{
				dequeue( &head, &rtnLink);
 276:	98 85       	ldd	r25, Y+8	; 0x08
 278:	c0 d0       	rcall	.+384    	; 0x3fa <free>
 27a:	12 b8       	out	0x02, r1	; 2
 27c:	00 e0       	ldi	r16, 0x00	; 0
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	be 01       	movw	r22, r28
 282:	69 5f       	subi	r22, 0xF9	; 249
				
				
				PORTA = (rtnLink->e.itemCode << (i*2)) | PORTA;
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	7f df       	rcall	.-258    	; 0x18a <dequeue>
 28c:	22 b1       	in	r18, 0x02	; 2
 28e:	ef 81       	ldd	r30, Y+7	; 0x07
 290:	f8 85       	ldd	r31, Y+8	; 0x08
 292:	80 81       	ld	r24, Z
 294:	08 2e       	mov	r0, r24
 296:	00 0c       	add	r0, r0
 298:	99 0b       	sbc	r25, r25
 29a:	00 2e       	mov	r0, r16
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <main+0xd4>
				
				free(rtnLink);
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <main+0xd0>
				mTimer(2000);
 2a6:	82 2b       	or	r24, r18
 2a8:	82 b9       	out	0x02, r24	; 2
 2aa:	8f 81       	ldd	r24, Y+7	; 0x07
 2ac:	98 85       	ldd	r25, Y+8	; 0x08
 2ae:	a5 d0       	rcall	.+330    	; 0x3fa <free>
 2b0:	80 ed       	ldi	r24, 0xD0	; 208
			free(rtnLink);
			
			//Turn off all the LEDs
			PORTA = 0;
			
			for(uint8_t i = 0; i < 3; i++)
 2b2:	97 e0       	ldi	r25, 0x07	; 7
 2b4:	19 df       	rcall	.-462    	; 0xe8 <mTimer>
 2b6:	0e 5f       	subi	r16, 0xFE	; 254
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	06 30       	cpi	r16, 0x06	; 6
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 2bc:	11 05       	cpc	r17, r1
 2be:	01 f7       	brne	.-64     	; 0x280 <main+0xb2>
 2c0:	1a 82       	std	Y+2, r1	; 0x02
 2c2:	19 82       	std	Y+1, r1	; 0x01
 2c4:	1c 82       	std	Y+4, r1	; 0x04
 2c6:	1b 82       	std	Y+3, r1	; 0x03
 2c8:	98 cf       	rjmp	.-208    	; 0x1fa <main+0x2c>

000002ca <malloc>:
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	91 05       	cpc	r25, r1
 2d6:	10 f4       	brcc	.+4      	; 0x2dc <malloc+0x12>
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 2e0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	a0 e0       	ldi	r26, 0x00	; 0
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	30 97       	sbiw	r30, 0x00	; 0
 2ee:	19 f1       	breq	.+70     	; 0x336 <malloc+0x6c>
 2f0:	40 81       	ld	r20, Z
 2f2:	51 81       	ldd	r21, Z+1	; 0x01
 2f4:	02 81       	ldd	r16, Z+2	; 0x02
 2f6:	13 81       	ldd	r17, Z+3	; 0x03
 2f8:	48 17       	cp	r20, r24
 2fa:	59 07       	cpc	r21, r25
 2fc:	c8 f0       	brcs	.+50     	; 0x330 <malloc+0x66>
 2fe:	84 17       	cp	r24, r20
 300:	95 07       	cpc	r25, r21
 302:	69 f4       	brne	.+26     	; 0x31e <malloc+0x54>
 304:	10 97       	sbiw	r26, 0x00	; 0
 306:	31 f0       	breq	.+12     	; 0x314 <malloc+0x4a>
 308:	12 96       	adiw	r26, 0x02	; 2
 30a:	0c 93       	st	X, r16
 30c:	12 97       	sbiw	r26, 0x02	; 2
 30e:	13 96       	adiw	r26, 0x03	; 3
 310:	1c 93       	st	X, r17
 312:	27 c0       	rjmp	.+78     	; 0x362 <malloc+0x98>
 314:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 318:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 31c:	22 c0       	rjmp	.+68     	; 0x362 <malloc+0x98>
 31e:	21 15       	cp	r18, r1
 320:	31 05       	cpc	r19, r1
 322:	19 f0       	breq	.+6      	; 0x32a <malloc+0x60>
 324:	42 17       	cp	r20, r18
 326:	53 07       	cpc	r21, r19
 328:	18 f4       	brcc	.+6      	; 0x330 <malloc+0x66>
 32a:	9a 01       	movw	r18, r20
 32c:	bd 01       	movw	r22, r26
 32e:	ef 01       	movw	r28, r30
 330:	df 01       	movw	r26, r30
 332:	f8 01       	movw	r30, r16
 334:	db cf       	rjmp	.-74     	; 0x2ec <malloc+0x22>
 336:	21 15       	cp	r18, r1
 338:	31 05       	cpc	r19, r1
 33a:	f9 f0       	breq	.+62     	; 0x37a <malloc+0xb0>
 33c:	28 1b       	sub	r18, r24
 33e:	39 0b       	sbc	r19, r25
 340:	24 30       	cpi	r18, 0x04	; 4
 342:	31 05       	cpc	r19, r1
 344:	80 f4       	brcc	.+32     	; 0x366 <malloc+0x9c>
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	9b 81       	ldd	r25, Y+3	; 0x03
 34a:	61 15       	cp	r22, r1
 34c:	71 05       	cpc	r23, r1
 34e:	21 f0       	breq	.+8      	; 0x358 <malloc+0x8e>
 350:	fb 01       	movw	r30, r22
 352:	93 83       	std	Z+3, r25	; 0x03
 354:	82 83       	std	Z+2, r24	; 0x02
 356:	04 c0       	rjmp	.+8      	; 0x360 <malloc+0x96>
 358:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 35c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 360:	fe 01       	movw	r30, r28
 362:	32 96       	adiw	r30, 0x02	; 2
 364:	44 c0       	rjmp	.+136    	; 0x3ee <malloc+0x124>
 366:	fe 01       	movw	r30, r28
 368:	e2 0f       	add	r30, r18
 36a:	f3 1f       	adc	r31, r19
 36c:	81 93       	st	Z+, r24
 36e:	91 93       	st	Z+, r25
 370:	22 50       	subi	r18, 0x02	; 2
 372:	31 09       	sbc	r19, r1
 374:	39 83       	std	Y+1, r19	; 0x01
 376:	28 83       	st	Y, r18
 378:	3a c0       	rjmp	.+116    	; 0x3ee <malloc+0x124>
 37a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 37e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 382:	23 2b       	or	r18, r19
 384:	41 f4       	brne	.+16     	; 0x396 <malloc+0xcc>
 386:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 38a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 38e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 392:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 396:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 39a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 39e:	21 15       	cp	r18, r1
 3a0:	31 05       	cpc	r19, r1
 3a2:	41 f4       	brne	.+16     	; 0x3b4 <malloc+0xea>
 3a4:	2d b7       	in	r18, 0x3d	; 61
 3a6:	3e b7       	in	r19, 0x3e	; 62
 3a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 3ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 3b0:	24 1b       	sub	r18, r20
 3b2:	35 0b       	sbc	r19, r21
 3b4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 3b8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 3bc:	e2 17       	cp	r30, r18
 3be:	f3 07       	cpc	r31, r19
 3c0:	a0 f4       	brcc	.+40     	; 0x3ea <malloc+0x120>
 3c2:	2e 1b       	sub	r18, r30
 3c4:	3f 0b       	sbc	r19, r31
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	78 f0       	brcs	.+30     	; 0x3ea <malloc+0x120>
 3cc:	ac 01       	movw	r20, r24
 3ce:	4e 5f       	subi	r20, 0xFE	; 254
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	24 17       	cp	r18, r20
 3d4:	35 07       	cpc	r19, r21
 3d6:	48 f0       	brcs	.+18     	; 0x3ea <malloc+0x120>
 3d8:	4e 0f       	add	r20, r30
 3da:	5f 1f       	adc	r21, r31
 3dc:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 3e0:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 3e4:	81 93       	st	Z+, r24
 3e6:	91 93       	st	Z+, r25
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <malloc+0x124>
 3ea:	e0 e0       	ldi	r30, 0x00	; 0
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	cf 01       	movw	r24, r30
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <free>:
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	81 c0       	rjmp	.+258    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 404:	fc 01       	movw	r30, r24
 406:	32 97       	sbiw	r30, 0x02	; 2
 408:	13 82       	std	Z+3, r1	; 0x03
 40a:	12 82       	std	Z+2, r1	; 0x02
 40c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 410:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 414:	10 97       	sbiw	r26, 0x00	; 0
 416:	81 f4       	brne	.+32     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 418:	20 81       	ld	r18, Z
 41a:	31 81       	ldd	r19, Z+1	; 0x01
 41c:	82 0f       	add	r24, r18
 41e:	93 1f       	adc	r25, r19
 420:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 424:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 428:	28 17       	cp	r18, r24
 42a:	39 07       	cpc	r19, r25
 42c:	51 f5       	brne	.+84     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 42e:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 432:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 436:	67 c0       	rjmp	.+206    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 438:	ed 01       	movw	r28, r26
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	ce 17       	cp	r28, r30
 440:	df 07       	cpc	r29, r31
 442:	40 f4       	brcc	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 444:	4a 81       	ldd	r20, Y+2	; 0x02
 446:	5b 81       	ldd	r21, Y+3	; 0x03
 448:	9e 01       	movw	r18, r28
 44a:	41 15       	cp	r20, r1
 44c:	51 05       	cpc	r21, r1
 44e:	f1 f0       	breq	.+60     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 450:	ea 01       	movw	r28, r20
 452:	f5 cf       	rjmp	.-22     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 454:	d3 83       	std	Z+3, r29	; 0x03
 456:	c2 83       	std	Z+2, r28	; 0x02
 458:	40 81       	ld	r20, Z
 45a:	51 81       	ldd	r21, Z+1	; 0x01
 45c:	84 0f       	add	r24, r20
 45e:	95 1f       	adc	r25, r21
 460:	c8 17       	cp	r28, r24
 462:	d9 07       	cpc	r29, r25
 464:	59 f4       	brne	.+22     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 466:	88 81       	ld	r24, Y
 468:	99 81       	ldd	r25, Y+1	; 0x01
 46a:	84 0f       	add	r24, r20
 46c:	95 1f       	adc	r25, r21
 46e:	02 96       	adiw	r24, 0x02	; 2
 470:	91 83       	std	Z+1, r25	; 0x01
 472:	80 83       	st	Z, r24
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	9b 81       	ldd	r25, Y+3	; 0x03
 478:	93 83       	std	Z+3, r25	; 0x03
 47a:	82 83       	std	Z+2, r24	; 0x02
 47c:	21 15       	cp	r18, r1
 47e:	31 05       	cpc	r19, r1
 480:	29 f4       	brne	.+10     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 482:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 486:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 48a:	3d c0       	rjmp	.+122    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 48c:	e9 01       	movw	r28, r18
 48e:	fb 83       	std	Y+3, r31	; 0x03
 490:	ea 83       	std	Y+2, r30	; 0x02
 492:	49 91       	ld	r20, Y+
 494:	59 91       	ld	r21, Y+
 496:	c4 0f       	add	r28, r20
 498:	d5 1f       	adc	r29, r21
 49a:	ec 17       	cp	r30, r28
 49c:	fd 07       	cpc	r31, r29
 49e:	61 f4       	brne	.+24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a0:	80 81       	ld	r24, Z
 4a2:	91 81       	ldd	r25, Z+1	; 0x01
 4a4:	84 0f       	add	r24, r20
 4a6:	95 1f       	adc	r25, r21
 4a8:	02 96       	adiw	r24, 0x02	; 2
 4aa:	e9 01       	movw	r28, r18
 4ac:	99 83       	std	Y+1, r25	; 0x01
 4ae:	88 83       	st	Y, r24
 4b0:	82 81       	ldd	r24, Z+2	; 0x02
 4b2:	93 81       	ldd	r25, Z+3	; 0x03
 4b4:	9b 83       	std	Y+3, r25	; 0x03
 4b6:	8a 83       	std	Y+2, r24	; 0x02
 4b8:	e0 e0       	ldi	r30, 0x00	; 0
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	12 96       	adiw	r26, 0x02	; 2
 4be:	8d 91       	ld	r24, X+
 4c0:	9c 91       	ld	r25, X
 4c2:	13 97       	sbiw	r26, 0x03	; 3
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	19 f0       	breq	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c8:	fd 01       	movw	r30, r26
 4ca:	dc 01       	movw	r26, r24
 4cc:	f7 cf       	rjmp	.-18     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ce:	8d 91       	ld	r24, X+
 4d0:	9c 91       	ld	r25, X
 4d2:	11 97       	sbiw	r26, 0x01	; 1
 4d4:	9d 01       	movw	r18, r26
 4d6:	2e 5f       	subi	r18, 0xFE	; 254
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	82 0f       	add	r24, r18
 4dc:	93 1f       	adc	r25, r19
 4de:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 4e2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 4e6:	28 17       	cp	r18, r24
 4e8:	39 07       	cpc	r19, r25
 4ea:	69 f4       	brne	.+26     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ec:	30 97       	sbiw	r30, 0x00	; 0
 4ee:	29 f4       	brne	.+10     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 4f4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fa:	13 82       	std	Z+3, r1	; 0x03
 4fc:	12 82       	std	Z+2, r1	; 0x02
 4fe:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 502:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
