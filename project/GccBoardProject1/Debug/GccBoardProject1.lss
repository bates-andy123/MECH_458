
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f8  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6f  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001615  00000000  00000000  000026c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00003cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011c66  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000197  00000000  00000000  00015b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00015cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004451  00000000  00000000  00015d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	ba c0       	rjmp	.+372    	; 0x1ea <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec e3       	ldi	r30, 0x3C	; 60
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ab 30       	cpi	r26, 0x0B	; 11
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	7f d0       	rcall	.+254    	; 0x1ce <main>
  d0:	b3 c0       	rjmp	.+358    	; 0x238 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <adc_start_conv>:
	ADCSRA |= _BV(ADSC);
}

extern uint8_t read_ADC(){
	return ADC_result;
}
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <ADC_interrupt>:

extern void ADC_interrupt(){
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	ADC_result = ADCH;
  e4:	c9 e7       	ldi	r28, 0x79	; 121
  e6:	d0 e0       	ldi	r29, 0x00	; 0
  e8:	88 81       	ld	r24, Y
  ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_result>
	adc_start_conv();
	PORTA = ADCH;
  ee:	f2 df       	rcall	.-28     	; 0xd4 <adc_start_conv>
  f0:	88 81       	ld	r24, Y
	OCR0A=ADCH;
  f2:	82 b9       	out	0x02, r24	; 2
  f4:	88 81       	ld	r24, Y
  f6:	87 bd       	out	0x27, r24	; 39
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <init_led>:
#include <asf.h>
#include "led.h"


extern void init_led(){
	DDRA = 0b11111111; /* Sets all pins on Port D to output */
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0; /* initialize port to low – turn on LEDs */
 102:	12 b8       	out	0x02, r1	; 2
 104:	08 95       	ret

00000106 <mTimerConfig>:
#include "mtimer.h"

extern void mTimerConfig()
{
	/* Insert system clock initialization code here (sysclk_init()). */
	TCCR1B |= _BV(CS10);
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <mTimer>:
}

extern void mTimer(int count)
{
 112:	ac 01       	movw	r20, r24
	int i = 0;
	
	TCCR1B |= _BV(WGM12); /*CTC mode*/
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	98 60       	ori	r25, 0x08	; 8
 11c:	90 83       	st	Z, r25
	
	OCR1A = 0x03e8; //1000
 11e:	88 ee       	ldi	r24, 0xE8	; 232
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 126:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCNT1 = 0x0000;
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
 132:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B |= _BV(CS10);
}

extern void mTimer(int count)
{
	int i = 0;
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 138:	05 c0       	rjmp	.+10     	; 0x144 <mTimer+0x32>
	{
		if ((TIFR1 & 0x02) == 0x02)
 13a:	b1 9b       	sbis	0x16, 1	; 22
 13c:	fe cf       	rjmp	.-4      	; 0x13a <mTimer+0x28>
		{
			TIFR1 |= _BV(OCF1A);
 13e:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 144:	24 17       	cp	r18, r20
 146:	35 07       	cpc	r19, r21
 148:	1c f4       	brge	.+6      	; 0x150 <mTimer+0x3e>
	{
		if ((TIFR1 & 0x02) == 0x02)
 14a:	b1 9b       	sbis	0x16, 1	; 22
 14c:	f6 cf       	rjmp	.-20     	; 0x13a <mTimer+0x28>
 14e:	f7 cf       	rjmp	.-18     	; 0x13e <mTimer+0x2c>
 150:	08 95       	ret

00000152 <init_pwm>:
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 152:	84 b1       	in	r24, 0x04	; 4
 154:	8f 68       	ori	r24, 0x8F	; 143
 156:	84 b9       	out	0x04, r24	; 4
 158:	83 e8       	ldi	r24, 0x83	; 131
 15a:	84 bd       	out	0x24, r24	; 36
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	85 bd       	out	0x25, r24	; 37
 160:	17 bc       	out	0x27, r1	; 39
 162:	08 95       	ret

00000164 <set_motor_setting>:
}

extern void set_motor_setting(Motor_Setting setting){
	//Force all settings to off
	PORTB &= ~(IA | IB | EA | EB);
 164:	95 b1       	in	r25, 0x05	; 5
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	95 b9       	out	0x05, r25	; 5
	
	if(setting == DC_Motor_Clockwise){
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	11 f4       	brne	.+4      	; 0x172 <set_motor_setting+0xe>
		PORTB |= IB;
 16e:	29 9a       	sbi	0x05, 1	; 5
 170:	08 95       	ret
	}
	else if (setting == DC_Motor_Counter_Clockwise){
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	09 f4       	brne	.+2      	; 0x178 <set_motor_setting+0x14>
		PORTB |= IA;
 176:	2a 9a       	sbi	0x05, 2	; 5
 178:	08 95       	ret

0000017a <init_stepper>:
		PORTD = steps_lookup[current_step];
}

extern inline void init_stepper()
{
	DDRA = 0xFF; /* Sets all pins on Port F to output */
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	81 b9       	out	0x01, r24	; 1
	DDRD = 0xFF; /* Sets all pins on Port F to output */
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	08 95       	ret

00000182 <step>:

extern void step(stepper_direction dir)
{
	static uint8_t current_step = step_1;
	
	if(dir == Clock_Wise){
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	79 f4       	brne	.+30     	; 0x1a4 <step+0x22>
		current_step = ((current_step + 1) % amount_of_steps);
 186:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	83 70       	andi	r24, 0x03	; 3
 190:	90 78       	andi	r25, 0x80	; 128
 192:	99 23       	and	r25, r25
 194:	24 f4       	brge	.+8      	; 0x19e <step+0x1c>
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	8c 6f       	ori	r24, 0xFC	; 252
 19a:	9f 6f       	ori	r25, 0xFF	; 255
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <step+0x38>
	}else{
		if(current_step == step_1)
 1a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1a8:	81 11       	cpse	r24, r1
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <step+0x32>
			current_step = step_4;
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <step+0x38>
		else
			current_step = current_step - 1;
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	0b000101  //0xx101 step_4
};

static inline drive_stepper(stepper_steps current_step)
{
		PORTD = steps_lookup[current_step];
 1ba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e0 50       	subi	r30, 0x00	; 0
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	80 81       	ld	r24, Z
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	08 95       	ret

000001ce <main>:
{	
	cli();
	mTimerConfig();
	init_led();

	init_stepper();
 1ce:	f8 94       	cli
	
	//write_to_led_display(0xFF);
	
	//adc_start_conv();
	
	set_motor_setting(DC_Motor_Clockwise);
 1d0:	9a df       	rcall	.-204    	; 0x106 <mTimerConfig>
 1d2:	95 df       	rcall	.-214    	; 0xfe <init_led>
	//set_dc_motor_speed(50);
	while(1){
		step(Clock_Wise);
 1d4:	d2 df       	rcall	.-92     	; 0x17a <init_stepper>
 1d6:	bd df       	rcall	.-134    	; 0x152 <init_pwm>
 1d8:	78 94       	sei
		mTimer(STEP_TIME_MS);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	c3 df       	rcall	.-122    	; 0x164 <set_motor_setting>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	d0 df       	rcall	.-96     	; 0x182 <step>
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	95 df       	rcall	.-214    	; 0x112 <mTimer>
 1e8:	fa cf       	rjmp	.-12     	; 0x1de <main+0x10>

000001ea <__vector_29>:
/***************************** SUBROUTINES ********************************************/
/**************************************************************************************/


ISR(ADC_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	0b b6       	in	r0, 0x3b	; 59
 1f6:	0f 92       	push	r0
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
	ADC_interrupt();
 20e:	ff 93       	push	r31
}
 210:	67 df       	rcall	.-306    	; 0xe0 <ADC_interrupt>
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
