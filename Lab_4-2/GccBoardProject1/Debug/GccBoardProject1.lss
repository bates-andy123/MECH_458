
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122d  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e96  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001137  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000355c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011b35  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000307  00000000  00000000  000151f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000154f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000042a1  00000000  00000000  00015590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a9 30       	cpi	r26, 0x09	; 9
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	4a d0       	rcall	.+148    	; 0x164 <main>
  d0:	52 c0       	rjmp	.+164    	; 0x176 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <init_led>:

#include <asf.h>


extern void init_led(){
	DDRA = 0b11111111; /* Sets all pins on Port D to output */
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0; /* initialize port to high – turn on LEDs */
  d8:	12 b8       	out	0x02, r1	; 2
  da:	08 95       	ret

000000dc <mTimerConfig>:
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <mTimer>:
  e8:	ac 01       	movw	r20, r24
  ea:	e1 e8       	ldi	r30, 0x81	; 129
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	98 60       	ori	r25, 0x08	; 8
  f2:	90 83       	st	Z, r25
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 100:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 104:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 108:	ef e6       	ldi	r30, 0x6F	; 111
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	92 60       	ori	r25, 0x02	; 2
 110:	90 83       	st	Z, r25
 112:	b1 9a       	sbi	0x16, 1	; 22
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <mTimer+0x3c>
 11a:	b1 9b       	sbis	0x16, 1	; 22
 11c:	fe cf       	rjmp	.-4      	; 0x11a <mTimer+0x32>
 11e:	b1 9a       	sbi	0x16, 1	; 22
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	24 17       	cp	r18, r20
 126:	35 07       	cpc	r19, r21
 128:	1c f4       	brge	.+6      	; 0x130 <mTimer+0x48>
 12a:	b1 9b       	sbis	0x16, 1	; 22
 12c:	f6 cf       	rjmp	.-20     	; 0x11a <mTimer+0x32>
 12e:	f7 cf       	rjmp	.-18     	; 0x11e <mTimer+0x36>
 130:	08 95       	ret

00000132 <init_stepper>:
	PORTA = steps_lookup[current_step];
}

extern inline void init_stepper()
{
	DDRA = 0xFF; /* Sets all pins on Port F to output */
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	81 b9       	out	0x01, r24	; 1
 136:	08 95       	ret

00000138 <step>:

extern void step(stepper_direction dir)
{
	static uint8_t current_step = step_1;
	
	if(dir == Clock_Wise){
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	39 f4       	brne	.+14     	; 0x14a <step+0x12>
		current_step = ((++current_step) % amount_of_steps);
 13c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	83 70       	andi	r24, 0x03	; 3
 144:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 148:	03 c0       	rjmp	.+6      	; 0x150 <step+0x18>
	}else{
		if(current_step = step_1)
			current_step = step_4;
		else
			current_step--;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	0b000101  //0xx101 step_4
};

static inline drive_stepper(stepper_steps current_step)
{
	PORTA = steps_lookup[current_step];
 150:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	82 b9       	out	0x02, r24	; 2
 162:	08 95       	ret

00000164 <main>:
/* Avoid using these */

/* main routine */
int main()
{	
	mTimerConfig();
 164:	bb df       	rcall	.-138    	; 0xdc <mTimerConfig>
 166:	b6 df       	rcall	.-148    	; 0xd4 <init_led>
 168:	e4 df       	rcall	.-56     	; 0x132 <init_stepper>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	e5 df       	rcall	.-54     	; 0x138 <step>
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ba df       	rcall	.-140    	; 0xe8 <mTimer>
 174:	fa cf       	rjmp	.-12     	; 0x16a <main+0x6>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
