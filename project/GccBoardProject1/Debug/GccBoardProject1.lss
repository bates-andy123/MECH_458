
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000aac  00000b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800146  00800146  00000b86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b1  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000142e  00000000  00000000  00003201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002843  00000000  00000000  0000462f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00006e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000122df  00000000  00000000  00007470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1b  00000000  00000000  0001974f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0001a16a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004c3d  00000000  00000000  0001a332  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	51 c4       	rjmp	.+2210   	; 0x8a8 <__vector_1>
   6:	00 00       	nop
   8:	ba c4       	rjmp	.+2420   	; 0x97e <__vector_2>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	e2 c3       	rjmp	.+1988   	; 0x7da <__vector_5>
  16:	00 00       	nop
  18:	aa c2       	rjmp	.+1364   	; 0x56e <__vector_6>
  1a:	00 00       	nop
  1c:	05 c4       	rjmp	.+2058   	; 0x828 <__vector_7>
  1e:	00 00       	nop
  20:	39 c4       	rjmp	.+2162   	; 0x894 <__vector_8>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c6 c4       	rjmp	.+2444   	; 0x9ea <__vector_23>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	8b c3       	rjmp	.+1814   	; 0x78c <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec ea       	ldi	r30, 0xAC	; 172
  ac:	fa e0       	ldi	r31, 0x0A	; 10
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 34       	cpi	r26, 0x46	; 70
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	a6 e4       	ldi	r26, 0x46	; 70
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 35       	cpi	r26, 0x51	; 81
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	1f d3       	rcall	.+1598   	; 0x70e <main>
  d0:	eb c4       	rjmp	.+2518   	; 0xaa8 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <init_adc>:
uint16_t ADC_Min_result;
uint16_t Total_Count;
bool ADC_keep_running;

extern void init_adc(){
	ADMUX = (1<< REFS0)|(1<<MUX0);			// Left adjust, and use VCC as top reference
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE);							//Set the values of the ADC Enable and ADC Interrupt Enable bits to 1
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 = (1<<ADC1D);									//Turns off the digital input buffer for ADC1 on PF1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	ADC_Min_result = 0xFFFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ADC_Min_result+0x1>
  ee:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ADC_Min_result>
	Total_Count = 0;
  f2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Total_Count+0x1>
  f6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <Total_Count>
	ADC_keep_running = false;
  fa:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ADC_keep_running>
  fe:	08 95       	ret

00000100 <adc_start_conv>:
	ADCSRA |= _BV(ADSC);
}

extern inline void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <adc_stop_conv>:
	//PORTA ^= 0x20;
}

extern inline void adc_stop_conv(){
	ADC_Min_result = 0xFFFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	9f ef       	ldi	r25, 0xFF	; 255
 110:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ADC_Min_result+0x1>
 114:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ADC_Min_result>
 118:	08 95       	ret

0000011a <read_Min_ADC>:
}


extern uint16_t read_Min_ADC(){
	return ADC_Min_result;
}
 11a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ADC_Min_result>
 11e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ADC_Min_result+0x1>
 122:	08 95       	ret

00000124 <ADC_reset_count>:

extern void ADC_reset_count(){
	Total_Count = 0;
 124:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Total_Count+0x1>
 128:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <Total_Count>
 12c:	08 95       	ret

0000012e <ADC_return_Count>:
}

extern uint16_t ADC_return_Count(){
	return Total_Count;
}
 12e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Total_Count>
 132:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Total_Count+0x1>
 136:	08 95       	ret

00000138 <ADC_interrupt>:

extern inline void ADC_interrupt(){
	Total_Count = Total_Count + 1;
 138:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Total_Count>
 13c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Total_Count+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <Total_Count+0x1>
 146:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <Total_Count>
	ADC_result = ADC;
 14a:	e8 e7       	ldi	r30, 0x78	; 120
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	91 81       	ldd	r25, Z+1	; 0x01
 152:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <ADC_result+0x1>
 156:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ADC_result>
	if(ADC_Min_result > ADC){
 15a:	20 81       	ld	r18, Z
 15c:	31 81       	ldd	r19, Z+1	; 0x01
 15e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ADC_Min_result>
 162:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ADC_Min_result+0x1>
 166:	28 17       	cp	r18, r24
 168:	39 07       	cpc	r19, r25
 16a:	40 f4       	brcc	.+16     	; 0x17c <ADC_interrupt+0x44>
		ADC_Min_result = ADC;
 16c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 170:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 174:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ADC_Min_result+0x1>
 178:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ADC_Min_result>
	ADCSRA |= _BV(ADSC);
}

extern inline void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <buf_init>:
}

extern buf_is_magnetic(){
	belt[most_recent_pushed_idx].magnetic = true;
	belt[most_recent_pushed_idx].assumed_material = Steel;
}
 188:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <most_recent_pushed_idx>
 18c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <current_push_idx>
 190:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <first_on_belt>
 194:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <most_recent_idx_to_past_second_prox_sensor>
 198:	08 95       	ret

0000019a <buf_new>:
 19a:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <buf_length>
 19e:	23 33       	cpi	r18, 0x33	; 51
 1a0:	e8 f4       	brcc	.+58     	; 0x1dc <buf_new+0x42>
 1a2:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <current_push_idx>
 1a6:	83 2f       	mov	r24, r19
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	ec 5a       	subi	r30, 0xAC	; 172
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	44 83       	std	Z+4, r20	; 0x04
 1c0:	12 82       	std	Z+2, r1	; 0x02
 1c2:	11 82       	std	Z+1, r1	; 0x01
 1c4:	10 82       	st	Z, r1
 1c6:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <most_recent_pushed_idx>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	62 e3       	ldi	r22, 0x32	; 50
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	35 d4       	rcall	.+2154   	; 0xa3c <__divmodhi4>
 1d2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <current_push_idx>
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <buf_length>
 1dc:	08 95       	ret

000001de <set_second_prox_sensor_item>:
 1de:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <most_recent_idx_to_past_second_prox_sensor>
 1e2:	e9 2f       	mov	r30, r25
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	9f 01       	movw	r18, r30
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	e2 0f       	add	r30, r18
 1f2:	f3 1f       	adc	r31, r19
 1f4:	ec 5a       	subi	r30, 0xAC	; 172
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	83 83       	std	Z+3, r24	; 0x03
 1fa:	64 83       	std	Z+4, r22	; 0x04
 1fc:	9f 5f       	subi	r25, 0xFF	; 255
 1fe:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <most_recent_idx_to_past_second_prox_sensor>
 202:	08 95       	ret

00000204 <buf_get_first_item_material>:

extern inline Materials buf_get_first_item_material(){
	return belt[first_on_belt].assumed_material;
 204:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <first_on_belt>
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	8e 0f       	add	r24, r30
 216:	9f 1f       	adc	r25, r31
 218:	fc 01       	movw	r30, r24
 21a:	ec 5a       	subi	r30, 0xAC	; 172
 21c:	fe 4f       	sbci	r31, 0xFE	; 254
}
 21e:	83 81       	ldd	r24, Z+3	; 0x03
 220:	08 95       	ret

00000222 <remove_first_item>:

extern inline remove_first_item(){
	belt[first_on_belt].last_stage = Complete;
 222:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <first_on_belt>
 226:	82 2f       	mov	r24, r18
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	8e 0f       	add	r24, r30
 236:	9f 1f       	adc	r25, r31
 238:	fc 01       	movw	r30, r24
 23a:	ec 5a       	subi	r30, 0xAC	; 172
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	84 83       	std	Z+4, r24	; 0x04
	first_on_belt++;
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <first_on_belt>
}
 248:	08 95       	ret

0000024a <init_interrupt>:
#include <avr/io.h>

void init_interrupt(){
	//EICRA |= _BV(ISC00);
	//Any edge causes interrupt on last promixity sensor
	EICRA |= _BV(ISC00);
 24a:	e9 e6       	ldi	r30, 0x69	; 105
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	81 60       	ori	r24, 0x01	; 1
 252:	80 83       	st	Z, r24
	
	//Pause button, active low
	EICRA |= _BV(ISC11) | _BV(ISC10);
 254:	80 81       	ld	r24, Z
 256:	8c 60       	ori	r24, 0x0C	; 12
 258:	80 83       	st	Z, r24
	
	//Stepper motor at home, active low
	EICRB |= _BV(ISC51);
 25a:	ea e6       	ldi	r30, 0x6A	; 106
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 60       	ori	r24, 0x08	; 8
 262:	80 83       	st	Z, r24
	
	//First promixity sensor, active low
	EICRB |= _BV(ISC41);
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
	
	//Last promixity sensor, active low
	EICRB |= _BV(ISC61);
 26a:	80 81       	ld	r24, Z
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	80 83       	st	Z, r24
	
	//Magnetic detection sensor, active low
	EICRB |= _BV(ISC71);
 270:	80 81       	ld	r24, Z
 272:	80 68       	ori	r24, 0x80	; 128
 274:	80 83       	st	Z, r24
	
	EIMSK |= 0b11110011;
 276:	8d b3       	in	r24, 0x1d	; 29
 278:	83 6f       	ori	r24, 0xF3	; 243
 27a:	8d bb       	out	0x1d, r24	; 29
 27c:	08 95       	ret

0000027e <init_led>:
	}else{
		PORTA >>= 1;	
	}
	
	current_LED++;
	current_LED %= 10;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	81 b9       	out	0x01, r24	; 1
 282:	8a b1       	in	r24, 0x0a	; 10
 284:	80 6e       	ori	r24, 0xE0	; 224
 286:	8a b9       	out	0x0a, r24	; 10
 288:	12 b8       	out	0x02, r1	; 2
 28a:	08 95       	ret

0000028c <status_leds>:
}

extern void status_leds(Status_LED_Position pos, Status_LED_Colour colour){
		if(pos == top){
 28c:	86 30       	cpi	r24, 0x06	; 6
 28e:	89 f4       	brne	.+34     	; 0x2b2 <status_leds+0x26>
			PORTD &= ~0xC0;
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	8f 73       	andi	r24, 0x3F	; 63
 294:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 296:	63 30       	cpi	r22, 0x03	; 3
 298:	21 f4       	brne	.+8      	; 0x2a2 <status_leds+0x16>
				PORTD |= 0xC0;	
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	80 6c       	ori	r24, 0xC0	; 192
 29e:	8b b9       	out	0x0b, r24	; 11
 2a0:	08 95       	ret
			}else if(colour == red){
 2a2:	61 30       	cpi	r22, 0x01	; 1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <status_leds+0x1e>
				PORTD |= 0x80;
 2a6:	5f 9a       	sbi	0x0b, 7	; 11
 2a8:	08 95       	ret
			}else if(colour == green){
 2aa:	62 30       	cpi	r22, 0x02	; 2
 2ac:	81 f4       	brne	.+32     	; 0x2ce <status_leds+0x42>
				PORTD |= 0x40;
 2ae:	5e 9a       	sbi	0x0b, 6	; 11
 2b0:	08 95       	ret
			}else{
				
			}
		}else{
			PORTD &= ~0x30;
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	8f 7c       	andi	r24, 0xCF	; 207
 2b6:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 2b8:	63 30       	cpi	r22, 0x03	; 3
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <status_leds+0x38>
				PORTD |= 0x30;
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	80 63       	ori	r24, 0x30	; 48
 2c0:	8b b9       	out	0x0b, r24	; 11
 2c2:	08 95       	ret
				}else if(colour == red){
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	11 f4       	brne	.+4      	; 0x2cc <status_leds+0x40>
				PORTD |= 0x10;
 2c8:	5c 9a       	sbi	0x0b, 4	; 11
 2ca:	08 95       	ret
				}else if(colour = green){
				PORTD |= 0x20;
 2cc:	5d 9a       	sbi	0x0b, 5	; 11
 2ce:	08 95       	ret

000002d0 <mTimerConfig>:
}

extern void timer0_init()
{
	TCCR1B |= _BV(CS10);
	TIMSK0 |= _BV(TOIE1);
 2d0:	e1 e8       	ldi	r30, 0x81	; 129
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	80 83       	st	Z, r24
 2da:	08 95       	ret

000002dc <mTimer>:
}

extern void mTimer(int count)
{
 2dc:	ac 01       	movw	r20, r24
	int i = 0;
	
	TCCR1B |= _BV(WGM12); /*CTC mode*/
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	90 81       	ld	r25, Z
 2e4:	98 60       	ori	r25, 0x08	; 8
 2e6:	90 83       	st	Z, r25
	
	OCR1A = 0x03e8; //1000
 2e8:	88 ee       	ldi	r24, 0xE8	; 232
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCNT1 = 0x0000;
 2f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
 2fc:	b1 9a       	sbi	0x16, 1	; 22
	TIMSK0 |= _BV(TOIE1);
}

extern void mTimer(int count)
{
	int i = 0;
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 302:	05 c0       	rjmp	.+10     	; 0x30e <mTimer+0x32>
	{
		if ((TIFR1 & 0x02) == 0x02)
 304:	b1 9b       	sbis	0x16, 1	; 22
 306:	fe cf       	rjmp	.-4      	; 0x304 <mTimer+0x28>
		{
			TIFR1 |= _BV(OCF1A);
 308:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 30e:	24 17       	cp	r18, r20
 310:	35 07       	cpc	r19, r21
 312:	1c f4       	brge	.+6      	; 0x31a <mTimer+0x3e>
	{
		if ((TIFR1 & 0x02) == 0x02)
 314:	b1 9b       	sbis	0x16, 1	; 22
 316:	f6 cf       	rjmp	.-20     	; 0x304 <mTimer+0x28>
 318:	f7 cf       	rjmp	.-18     	; 0x308 <mTimer+0x2c>
 31a:	08 95       	ret

0000031c <init_pwm>:
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 31c:	84 b1       	in	r24, 0x04	; 4
 31e:	8f 68       	ori	r24, 0x8F	; 143
 320:	84 b9       	out	0x04, r24	; 4
 322:	83 e8       	ldi	r24, 0x83	; 131
 324:	84 bd       	out	0x24, r24	; 36
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	85 bd       	out	0x25, r24	; 37
 32a:	17 bc       	out	0x27, r1	; 39
 32c:	08 95       	ret

0000032e <set_motor_setting>:
	set_dc_motor_speed(speed);
}

extern void set_motor_setting(Motor_Setting setting){
	//Force all settings to off
	PORTB &= ~(IA | IB | EA | EB);
 32e:	95 b1       	in	r25, 0x05	; 5
 330:	90 7f       	andi	r25, 0xF0	; 240
 332:	95 b9       	out	0x05, r25	; 5
	
	if(setting == DC_Motor_Clockwise){
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	11 f4       	brne	.+4      	; 0x33c <set_motor_setting+0xe>
		PORTB |= IB;
 338:	29 9a       	sbi	0x05, 1	; 5
 33a:	08 95       	ret
	}
	else if (setting == DC_Motor_Counter_Clockwise){
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	09 f4       	brne	.+2      	; 0x342 <set_motor_setting+0x14>
		PORTB |= IA;
 340:	2a 9a       	sbi	0x05, 2	; 5
 342:	08 95       	ret

00000344 <stop_pwm>:
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 344:	17 bc       	out	0x27, r1	; 39
}

extern inline void stop_pwm(){
	set_dc_motor_speed(0);
	set_motor_setting(Brake_to_VCC);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	f2 cf       	rjmp	.-28     	; 0x32e <set_motor_setting>
 34a:	08 95       	ret

0000034c <start_pwm>:
}

extern inline void start_pwm(uint8_t speed){
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
	set_motor_setting(DC_Motor_Clockwise);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	ed df       	rcall	.-38     	; 0x32e <set_motor_setting>
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 354:	c7 bd       	out	0x27, r28	; 39
}

extern inline void start_pwm(uint8_t speed){
	set_motor_setting(DC_Motor_Clockwise);
	set_dc_motor_speed(speed);
}
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <init_stepper>:
	return stepper_material_position;
}

extern bool check_if_home(){
	return (bool)(home_flag); 
}
 35a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <home_flag>
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	87 b9       	out	0x07, r24	; 7
 362:	08 95       	ret

00000364 <step>:
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	79 f4       	brne	.+30     	; 0x386 <step+0x22>
 368:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	83 70       	andi	r24, 0x03	; 3
 372:	90 78       	andi	r25, 0x80	; 128
 374:	99 23       	and	r25, r25
 376:	24 f4       	brge	.+8      	; 0x380 <step+0x1c>
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	8c 6f       	ori	r24, 0xFC	; 252
 37c:	9f 6f       	ori	r25, 0xFF	; 255
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
 384:	0b c0       	rjmp	.+22     	; 0x39c <step+0x38>
 386:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 38a:	81 11       	cpse	r24, r1
 38c:	04 c0       	rjmp	.+8      	; 0x396 <step+0x32>
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
 394:	03 c0       	rjmp	.+6      	; 0x39c <step+0x38>
 396:	81 50       	subi	r24, 0x01	; 1
 398:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
 39c:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__data_end>
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 5f       	subi	r30, 0xFE	; 254
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	80 81       	ld	r24, Z
 3ac:	88 b9       	out	0x08, r24	; 8
 3ae:	08 95       	ret

000003b0 <get_current_stepper_material>:
 3b0:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
 3b4:	08 95       	ret

000003b6 <block_till_stepper_home>:

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 3b6:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <home_flag>
 3ba:	81 11       	cpse	r24, r1
 3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <block_till_stepper_home+0x1a>
		step(Clock_Wise);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	d1 df       	rcall	.-94     	; 0x364 <step>
		mTimer(STEP_TIME_MS);
 3c2:	8f e0       	ldi	r24, 0x0F	; 15
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	8a df       	rcall	.-236    	; 0x2dc <mTimer>
extern bool check_if_home(){
	return (bool)(home_flag); 
}

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 3c8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <home_flag>
 3cc:	88 23       	and	r24, r24
 3ce:	b9 f3       	breq	.-18     	; 0x3be <block_till_stepper_home+0x8>
		step(Clock_Wise);
		mTimer(STEP_TIME_MS);
	}
	stepper_material_position = Black;
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <stepper_material_position>
 3d6:	08 95       	ret

000003d8 <stepper_repeat_steps>:
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
 3d8:	7f 92       	push	r7
 3da:	8f 92       	push	r8
 3dc:	9f 92       	push	r9
 3de:	af 92       	push	r10
 3e0:	bf 92       	push	r11
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
	for(uint8_t i = 0; i < steps; i++){
 3f2:	88 23       	and	r24, r24
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <stepper_repeat_steps+0x20>
 3f6:	47 c0       	rjmp	.+142    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 3f8:	76 2e       	mov	r7, r22
 3fa:	0f ef       	ldi	r16, 0xFF	; 255
 3fc:	08 0f       	add	r16, r24
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	0f 5f       	subi	r16, 0xFF	; 255
 402:	1f 4f       	sbci	r17, 0xFF	; 255
 404:	c0 e0       	ldi	r28, 0x00	; 0
 406:	d0 e0       	ldi	r29, 0x00	; 0
		step(dir);
		if(i <= 4 || i >= (steps-4)){
 408:	88 2e       	mov	r8, r24
 40a:	91 2c       	mov	r9, r1
 40c:	74 01       	movw	r14, r8
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	e8 1a       	sub	r14, r24
 412:	f1 08       	sbc	r15, r1
		mTimer(STEP_TIME_MS);
		}else if(i <= 8 || i >= (steps-8)){
 414:	64 01       	movw	r12, r8
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	c8 1a       	sub	r12, r24
 41a:	d1 08       	sbc	r13, r1
			mTimer((STEP_TIME_MS * 2) / 3);
		}else if(i <= 12 || i >= (steps-12)){
 41c:	54 01       	movw	r10, r8
 41e:	8c e0       	ldi	r24, 0x0C	; 12
 420:	a8 1a       	sub	r10, r24
 422:	b1 08       	sbc	r11, r1
			mTimer(STEP_TIME_MS/2);
		}else if(i <= 16 || i >= (steps-16)){
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	88 1a       	sub	r8, r24
 428:	91 08       	sbc	r9, r1
	stepper_material_position = Black;
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
	for(uint8_t i = 0; i < steps; i++){
		step(dir);
 42a:	87 2d       	mov	r24, r7
 42c:	9b df       	rcall	.-202    	; 0x364 <step>
		if(i <= 4 || i >= (steps-4)){
 42e:	c5 30       	cpi	r28, 0x05	; 5
 430:	20 f0       	brcs	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 432:	9e 01       	movw	r18, r28
 434:	ce 15       	cp	r28, r14
 436:	df 05       	cpc	r29, r15
 438:	24 f0       	brlt	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		mTimer(STEP_TIME_MS);
 43a:	8f e0       	ldi	r24, 0x0F	; 15
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	4e df       	rcall	.-356    	; 0x2dc <mTimer>
 440:	1e c0       	rjmp	.+60     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		}else if(i <= 8 || i >= (steps-8)){
 442:	c9 30       	cpi	r28, 0x09	; 9
 444:	18 f0       	brcs	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	2c 15       	cp	r18, r12
 448:	3d 05       	cpc	r19, r13
			mTimer((STEP_TIME_MS * 2) / 3);
 44a:	24 f0       	brlt	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	45 df       	rcall	.-374    	; 0x2dc <mTimer>
		}else if(i <= 12 || i >= (steps-12)){
 452:	15 c0       	rjmp	.+42     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 454:	cd 30       	cpi	r28, 0x0D	; 13
 456:	18 f0       	brcs	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 458:	2a 15       	cp	r18, r10
			mTimer(STEP_TIME_MS/2);
 45a:	3b 05       	cpc	r19, r11
 45c:	24 f0       	brlt	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	87 e0       	ldi	r24, 0x07	; 7
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	3c df       	rcall	.-392    	; 0x2dc <mTimer>
		}else if(i <= 16 || i >= (steps-16)){
 464:	0c c0       	rjmp	.+24     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 466:	c1 31       	cpi	r28, 0x11	; 17
 468:	18 f0       	brcs	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46a:	28 15       	cp	r18, r8
			mTimer(STEP_TIME_MS/3);
 46c:	39 05       	cpc	r19, r9
 46e:	24 f0       	brlt	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	90 e0       	ldi	r25, 0x00	; 0
		}else{
			mTimer(STEP_TIME_MS/4);
 474:	33 df       	rcall	.-410    	; 0x2dc <mTimer>
 476:	03 c0       	rjmp	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	2f df       	rcall	.-418    	; 0x2dc <mTimer>
	}
	stepper_material_position = Black;
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
	for(uint8_t i = 0; i < steps; i++){
 47e:	21 96       	adiw	r28, 0x01	; 1
 480:	c0 17       	cp	r28, r16
 482:	d1 07       	cpc	r29, r17
			mTimer(STEP_TIME_MS/3);
		}else{
			mTimer(STEP_TIME_MS/4);
		}
	}
}
 484:	91 f6       	brne	.-92     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	bf 90       	pop	r11
 498:	af 90       	pop	r10
 49a:	9f 90       	pop	r9
 49c:	8f 90       	pop	r8
 49e:	7f 90       	pop	r7
 4a0:	08 95       	ret

000004a2 <go_to_material>:

extern void go_to_material(Materials mat){
 4a2:	cf 93       	push	r28
 4a4:	c8 2f       	mov	r28, r24
	if(stepper_material_position == Black){
 4a6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
 4aa:	83 30       	cpi	r24, 0x03	; 3
 4ac:	79 f4       	brne	.+30     	; 0x4cc <go_to_material+0x2a>
		if(mat == Steel){
 4ae:	c2 30       	cpi	r28, 0x02	; 2
 4b0:	21 f4       	brne	.+8      	; 0x4ba <go_to_material+0x18>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 4b2:	6f ef       	ldi	r22, 0xFF	; 255
 4b4:	82 e3       	ldi	r24, 0x32	; 50
 4b6:	90 df       	rcall	.-224    	; 0x3d8 <stepper_repeat_steps>
 4b8:	49 c0       	rjmp	.+146    	; 0x54c <go_to_material+0xaa>
		}else if(mat == Aluminum){
 4ba:	c1 11       	cpse	r28, r1
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <go_to_material+0x24>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	82 e3       	ldi	r24, 0x32	; 50
 4c2:	8a df       	rcall	.-236    	; 0x3d8 <stepper_repeat_steps>
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 4c4:	43 c0       	rjmp	.+134    	; 0x54c <go_to_material+0xaa>
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	84 e6       	ldi	r24, 0x64	; 100
		}
	}
	if(stepper_material_position == Steel){
 4ca:	86 df       	rcall	.-244    	; 0x3d8 <stepper_repeat_steps>
 4cc:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
 4d0:	82 30       	cpi	r24, 0x02	; 2
		if(mat == White)
 4d2:	79 f4       	brne	.+30     	; 0x4f2 <go_to_material+0x50>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 4d4:	c1 30       	cpi	r28, 0x01	; 1
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <go_to_material+0x3e>
 4d8:	6f ef       	ldi	r22, 0xFF	; 255
 4da:	82 e3       	ldi	r24, 0x32	; 50
		else if(mat == Black)
 4dc:	7d df       	rcall	.-262    	; 0x3d8 <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 4de:	3b c0       	rjmp	.+118    	; 0x556 <go_to_material+0xb4>
 4e0:	c3 30       	cpi	r28, 0x03	; 3
 4e2:	21 f4       	brne	.+8      	; 0x4ec <go_to_material+0x4a>
 4e4:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 4e6:	82 e3       	ldi	r24, 0x32	; 50
 4e8:	77 df       	rcall	.-274    	; 0x3d8 <stepper_repeat_steps>
 4ea:	35 c0       	rjmp	.+106    	; 0x556 <go_to_material+0xb4>
 4ec:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(stepper_material_position == White){
 4ee:	84 e6       	ldi	r24, 0x64	; 100
 4f0:	73 df       	rcall	.-282    	; 0x3d8 <stepper_repeat_steps>
 4f2:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
		if(mat == Aluminum)
 4f6:	81 30       	cpi	r24, 0x01	; 1
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 4f8:	79 f4       	brne	.+30     	; 0x518 <go_to_material+0x76>
 4fa:	c1 11       	cpse	r28, r1
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <go_to_material+0x64>
 4fe:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == Steel)
 500:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 502:	6a df       	rcall	.-300    	; 0x3d8 <stepper_repeat_steps>
 504:	2d c0       	rjmp	.+90     	; 0x560 <go_to_material+0xbe>
 506:	c2 30       	cpi	r28, 0x02	; 2
 508:	21 f4       	brne	.+8      	; 0x512 <go_to_material+0x70>
 50a:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 50c:	82 e3       	ldi	r24, 0x32	; 50
 50e:	64 df       	rcall	.-312    	; 0x3d8 <stepper_repeat_steps>
 510:	27 c0       	rjmp	.+78     	; 0x560 <go_to_material+0xbe>
	}
	if(stepper_material_position == Aluminum){
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	84 e6       	ldi	r24, 0x64	; 100
 516:	60 df       	rcall	.-320    	; 0x3d8 <stepper_repeat_steps>
 518:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
		if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 51c:	81 11       	cpse	r24, r1
 51e:	13 c0       	rjmp	.+38     	; 0x546 <go_to_material+0xa4>
 520:	c3 30       	cpi	r28, 0x03	; 3
 522:	21 f4       	brne	.+8      	; 0x52c <go_to_material+0x8a>
 524:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == White){
 526:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 528:	57 df       	rcall	.-338    	; 0x3d8 <stepper_repeat_steps>
 52a:	0d c0       	rjmp	.+26     	; 0x546 <go_to_material+0xa4>
 52c:	c1 30       	cpi	r28, 0x01	; 1
			PORTA ^= 0x04;
 52e:	41 f4       	brne	.+16     	; 0x540 <go_to_material+0x9e>
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	82 e3       	ldi	r24, 0x32	; 50
 534:	51 df       	rcall	.-350    	; 0x3d8 <stepper_repeat_steps>
 536:	92 b1       	in	r25, 0x02	; 2
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	89 27       	eor	r24, r25
 53c:	82 b9       	out	0x02, r24	; 2
 53e:	03 c0       	rjmp	.+6      	; 0x546 <go_to_material+0xa4>
	}//*/
	stepper_material_position = mat;
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	84 e6       	ldi	r24, 0x64	; 100
}
 544:	49 df       	rcall	.-366    	; 0x3d8 <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
		}
	}
	if(stepper_material_position == Steel){
 546:	c0 93 50 02 	sts	0x0250, r28	; 0x800250 <stepper_material_position>
 54a:	0f c0       	rjmp	.+30     	; 0x56a <go_to_material+0xc8>
 54c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
		else if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == White){
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	79 f6       	brne	.-98     	; 0x4f2 <go_to_material+0x50>
 554:	cb cf       	rjmp	.-106    	; 0x4ec <go_to_material+0x4a>
 556:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
		else if(mat == Steel)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == Aluminum){
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	e9 f6       	brne	.-70     	; 0x518 <go_to_material+0x76>
 55e:	d9 cf       	rjmp	.-78     	; 0x512 <go_to_material+0x70>
 560:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <stepper_material_position>
			PORTA ^= 0x04;
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}//*/
	stepper_material_position = mat;
}
 564:	88 23       	and	r24, r24
 566:	61 f3       	breq	.-40     	; 0x540 <go_to_material+0x9e>
 568:	ee cf       	rjmp	.-36     	; 0x546 <go_to_material+0xa4>
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <__vector_6>:

ISR(INT5_vect){
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	8f 93       	push	r24
	home_flag = true;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <home_flag>
 580:	8f 91       	pop	r24
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <usartInit>:
#include "mtimer.h"

extern void usartInit (uint16_t baud)
{
	//Set baud rate
	UBRR1H = (uint8_t)(baud >> 8);
 58c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(baud);
 590:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1A |= DoubSpeed;
 594:	e8 ec       	ldi	r30, 0xC8	; 200
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	80 83       	st	Z, r24
	
	UCSR1B |= TxEn;			//Enable TX mode for USART1
 59e:	e9 ec       	ldi	r30, 0xC9	; 201
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	88 60       	ori	r24, 0x08	; 8
 5a6:	80 83       	st	Z, r24
	//UCSR1B |= RxEn;		//Enable RX mode for USART1
	UCSR1C |= Mode8Bit;		//Set Usart to 8 bit data mode
 5a8:	ea ec       	ldi	r30, 0xCA	; 202
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	86 60       	ori	r24, 0x06	; 6
 5b0:	80 83       	st	Z, r24
 5b2:	08 95       	ret

000005b4 <usartTX>:
//This function displace one char at a time on the serial port
//
//Pass this function a char.
extern void usartTX (unsigned char data)
{
	while (!(UCSR1A & TxBuffRdy));	//Wait for the TX buffer to be ready for data
 5b4:	e8 ec       	ldi	r30, 0xC8	; 200
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	90 81       	ld	r25, Z
 5ba:	95 ff       	sbrs	r25, 5
 5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <usartTX+0x4>
	
	UDR1 = data;
 5be:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 5c2:	08 95       	ret

000005c4 <usartTXs>:
}
//This function can display strings on the serial port by calling the display char
//function.
//Pass this function a string.
extern void usartTXs (const char *string)
{
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	fc 01       	movw	r30, r24
	uint8_t c = 0;
	
	while (string [c] != 0)
 5cc:	80 81       	ld	r24, Z
 5ce:	88 23       	and	r24, r24
 5d0:	51 f0       	breq	.+20     	; 0x5e6 <usartTXs+0x22>
 5d2:	8f 01       	movw	r16, r30
	{
		usartTX(string[c]);
 5d4:	c0 e0       	ldi	r28, 0x00	; 0
		c++;
 5d6:	ee df       	rcall	.-36     	; 0x5b4 <usartTX>
//Pass this function a string.
extern void usartTXs (const char *string)
{
	uint8_t c = 0;
	
	while (string [c] != 0)
 5d8:	cf 5f       	subi	r28, 0xFF	; 255
 5da:	f8 01       	movw	r30, r16
 5dc:	ec 0f       	add	r30, r28
 5de:	f1 1d       	adc	r31, r1
 5e0:	80 81       	ld	r24, Z
 5e2:	81 11       	cpse	r24, r1
	{
		usartTX(string[c]);
		c++;
	}
}
 5e4:	f8 cf       	rjmp	.-16     	; 0x5d6 <usartTXs+0x12>
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <usartNumTXs>:

extern void usartNumTXs(uint16_t num){
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	8c 01       	movw	r16, r24

	usartTX((char)(((num/1000)%10) + 48));
 5f8:	9c 01       	movw	r18, r24
 5fa:	36 95       	lsr	r19
 5fc:	27 95       	ror	r18
 5fe:	36 95       	lsr	r19
 600:	27 95       	ror	r18
 602:	36 95       	lsr	r19
 604:	27 95       	ror	r18
 606:	a5 ec       	ldi	r26, 0xC5	; 197
 608:	b0 e2       	ldi	r27, 0x20	; 32
 60a:	2b d2       	rcall	.+1110   	; 0xa62 <__umulhisi3>
 60c:	ac 01       	movw	r20, r24
 60e:	52 95       	swap	r21
 610:	42 95       	swap	r20
 612:	4f 70       	andi	r20, 0x0F	; 15
 614:	45 27       	eor	r20, r21
 616:	5f 70       	andi	r21, 0x0F	; 15
 618:	45 27       	eor	r20, r21
 61a:	9a 01       	movw	r18, r20
 61c:	ad ec       	ldi	r26, 0xCD	; 205
 61e:	bc ec       	ldi	r27, 0xCC	; 204
 620:	20 d2       	rcall	.+1088   	; 0xa62 <__umulhisi3>
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	9c 01       	movw	r18, r24
 630:	22 0f       	add	r18, r18
 632:	33 1f       	adc	r19, r19
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	82 0f       	add	r24, r18
 642:	93 1f       	adc	r25, r19
 644:	9a 01       	movw	r18, r20
 646:	28 1b       	sub	r18, r24
 648:	39 0b       	sbc	r19, r25
 64a:	c9 01       	movw	r24, r18
 64c:	80 5d       	subi	r24, 0xD0	; 208
 64e:	b2 df       	rcall	.-156    	; 0x5b4 <usartTX>
	usartTX((char)(((num/100)%10) + 48));
 650:	98 01       	movw	r18, r16
 652:	36 95       	lsr	r19
 654:	27 95       	ror	r18
 656:	36 95       	lsr	r19
 658:	27 95       	ror	r18
 65a:	ab e7       	ldi	r26, 0x7B	; 123
 65c:	b4 e1       	ldi	r27, 0x14	; 20
 65e:	01 d2       	rcall	.+1026   	; 0xa62 <__umulhisi3>
 660:	ac 01       	movw	r20, r24
 662:	56 95       	lsr	r21
 664:	47 95       	ror	r20
 666:	9a 01       	movw	r18, r20
 668:	ad ec       	ldi	r26, 0xCD	; 205
 66a:	bc ec       	ldi	r27, 0xCC	; 204
 66c:	fa d1       	rcall	.+1012   	; 0xa62 <__umulhisi3>
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	96 95       	lsr	r25
 674:	87 95       	ror	r24
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	9c 01       	movw	r18, r24
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	82 0f       	add	r24, r18
 68e:	93 1f       	adc	r25, r19
 690:	9a 01       	movw	r18, r20
 692:	28 1b       	sub	r18, r24
 694:	39 0b       	sbc	r19, r25
 696:	c9 01       	movw	r24, r18
 698:	80 5d       	subi	r24, 0xD0	; 208
	usartTX((char)(((num/10)%10) + 48));
 69a:	8c df       	rcall	.-232    	; 0x5b4 <usartTX>
 69c:	98 01       	movw	r18, r16
 69e:	ad ec       	ldi	r26, 0xCD	; 205
 6a0:	bc ec       	ldi	r27, 0xCC	; 204
 6a2:	df d1       	rcall	.+958    	; 0xa62 <__umulhisi3>
 6a4:	ec 01       	movw	r28, r24
 6a6:	d6 95       	lsr	r29
 6a8:	c7 95       	ror	r28
 6aa:	d6 95       	lsr	r29
 6ac:	c7 95       	ror	r28
 6ae:	d6 95       	lsr	r29
 6b0:	c7 95       	ror	r28
 6b2:	9e 01       	movw	r18, r28
 6b4:	d6 d1       	rcall	.+940    	; 0xa62 <__umulhisi3>
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	96 95       	lsr	r25
 6c0:	87 95       	ror	r24
 6c2:	9c 01       	movw	r18, r24
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	82 0f       	add	r24, r18
 6d6:	93 1f       	adc	r25, r19
 6d8:	9e 01       	movw	r18, r28
 6da:	28 1b       	sub	r18, r24
 6dc:	39 0b       	sbc	r19, r25
 6de:	c9 01       	movw	r24, r18
 6e0:	80 5d       	subi	r24, 0xD0	; 208
 6e2:	68 df       	rcall	.-304    	; 0x5b4 <usartTX>
	usartTX((char)((num%10) + 48));
 6e4:	ce 01       	movw	r24, r28
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	cc 0f       	add	r28, r28
 6ec:	dd 1f       	adc	r29, r29
 6ee:	cc 0f       	add	r28, r28
 6f0:	dd 1f       	adc	r29, r29
 6f2:	cc 0f       	add	r28, r28
 6f4:	dd 1f       	adc	r29, r29
 6f6:	c8 0f       	add	r28, r24
 6f8:	d9 1f       	adc	r29, r25
 6fa:	c8 01       	movw	r24, r16
 6fc:	8c 1b       	sub	r24, r28
 6fe:	9d 0b       	sbc	r25, r29
 700:	80 5d       	subi	r24, 0xD0	; 208
 702:	58 df       	rcall	.-336    	; 0x5b4 <usartTX>
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	08 95       	ret

0000070e <main>:
int main()
{	
	cli();
	mTimerConfig();
	init_led();
	init_interrupt();
 70e:	f8 94       	cli
 710:	df dd       	rcall	.-1090   	; 0x2d0 <mTimerConfig>
 712:	b5 dd       	rcall	.-1174   	; 0x27e <init_led>
 714:	9a dd       	rcall	.-1228   	; 0x24a <init_interrupt>
 716:	21 de       	rcall	.-958    	; 0x35a <init_stepper>
 718:	01 de       	rcall	.-1022   	; 0x31c <init_pwm>
 71a:	dc dc       	rcall	.-1608   	; 0xd4 <init_adc>
 71c:	35 dd       	rcall	.-1430   	; 0x188 <buf_init>
 71e:	8c e0       	ldi	r24, 0x0C	; 12
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	34 df       	rcall	.-408    	; 0x58c <usartInit>
 724:	78 94       	sei
 726:	8a e0       	ldi	r24, 0x0A	; 10
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	4c df       	rcall	.-360    	; 0x5c4 <usartTXs>
 72c:	88 ec       	ldi	r24, 0xC8	; 200
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	d5 dd       	rcall	.-1110   	; 0x2dc <mTimer>
 732:	41 de       	rcall	.-894    	; 0x3b6 <block_till_stepper_home>
 734:	88 ec       	ldi	r24, 0xC8	; 200
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	d1 dd       	rcall	.-1118   	; 0x2dc <mTimer>
 73a:	6f ef       	ldi	r22, 0xFF	; 255
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	4c de       	rcall	.-872    	; 0x3d8 <stepper_repeat_steps>
 740:	88 ec       	ldi	r24, 0xC8	; 200
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	cb dd       	rcall	.-1130   	; 0x2dc <mTimer>
 746:	8c e3       	ldi	r24, 0x3C	; 60
 748:	01 de       	rcall	.-1022   	; 0x34c <start_pwm>
 74a:	da dc       	rcall	.-1612   	; 0x100 <adc_start_conv>
 74c:	88 ec       	ldi	r24, 0xC8	; 200
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	c5 dd       	rcall	.-1142   	; 0x2dc <mTimer>
 752:	58 dd       	rcall	.-1360   	; 0x204 <buf_get_first_item_material>
 754:	c8 2f       	mov	r28, r24
 756:	2c de       	rcall	.-936    	; 0x3b0 <get_current_stepper_material>
 758:	c8 13       	cpse	r28, r24
 75a:	15 c0       	rjmp	.+42     	; 0x786 <main+0x78>
 75c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <current_belt_status>
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	b9 f7       	brne	.-18     	; 0x752 <main+0x44>
 764:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pause_state>
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	99 f7       	brne	.-26     	; 0x752 <main+0x44>
 76c:	8c e3       	ldi	r24, 0x3C	; 60
 76e:	ee dd       	rcall	.-1060   	; 0x34c <start_pwm>
 770:	58 dd       	rcall	.-1360   	; 0x222 <remove_first_item>
 772:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <current_belt_status>
 776:	8a ef       	ldi	r24, 0xFA	; 250
 778:	e9 dd       	rcall	.-1070   	; 0x34c <start_pwm>
 77a:	85 e1       	ldi	r24, 0x15	; 21
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	ae dd       	rcall	.-1188   	; 0x2dc <mTimer>
 780:	8c e3       	ldi	r24, 0x3C	; 60
 782:	e4 dd       	rcall	.-1080   	; 0x34c <start_pwm>
 784:	e6 cf       	rjmp	.-52     	; 0x752 <main+0x44>
 786:	3e dd       	rcall	.-1412   	; 0x204 <buf_get_first_item_material>
 788:	8c de       	rcall	.-744    	; 0x4a2 <go_to_material>
 78a:	e3 cf       	rjmp	.-58     	; 0x752 <main+0x44>

0000078c <__vector_29>:
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	0b b6       	in	r0, 0x3b	; 59
 798:	0f 92       	push	r0
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
 7b2:	c2 dc       	rcall	.-1660   	; 0x138 <ADC_interrupt>
 7b4:	ff 91       	pop	r31
 7b6:	ef 91       	pop	r30
 7b8:	bf 91       	pop	r27
 7ba:	af 91       	pop	r26
 7bc:	9f 91       	pop	r25
 7be:	8f 91       	pop	r24
 7c0:	7f 91       	pop	r23
 7c2:	6f 91       	pop	r22
 7c4:	5f 91       	pop	r21
 7c6:	4f 91       	pop	r20
 7c8:	3f 91       	pop	r19
 7ca:	2f 91       	pop	r18
 7cc:	0f 90       	pop	r0
 7ce:	0b be       	out	0x3b, r0	; 59
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <__vector_5>:
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	0b b6       	in	r0, 0x3b	; 59
 7e6:	0f 92       	push	r0
 7e8:	2f 93       	push	r18
 7ea:	3f 93       	push	r19
 7ec:	4f 93       	push	r20
 7ee:	5f 93       	push	r21
 7f0:	6f 93       	push	r22
 7f2:	7f 93       	push	r23
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	ef 93       	push	r30
 7fe:	ff 93       	push	r31
 800:	cc dc       	rcall	.-1640   	; 0x19a <buf_new>
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	0f 90       	pop	r0
 81c:	0b be       	out	0x3b, r0	; 59
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <__vector_7>:
 828:	1f 92       	push	r1
 82a:	0f 92       	push	r0
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	0f 92       	push	r0
 830:	11 24       	eor	r1, r1
 832:	0b b6       	in	r0, 0x3b	; 59
 834:	0f 92       	push	r0
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	4f 93       	push	r20
 83c:	5f 93       	push	r21
 83e:	6f 93       	push	r22
 840:	7f 93       	push	r23
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	af 93       	push	r26
 848:	bf 93       	push	r27
 84a:	cf 93       	push	r28
 84c:	ef 93       	push	r30
 84e:	ff 93       	push	r31
 850:	af dd       	rcall	.-1186   	; 0x3b0 <get_current_stepper_material>
 852:	c8 2f       	mov	r28, r24
 854:	d7 dc       	rcall	.-1618   	; 0x204 <buf_get_first_item_material>
 856:	c8 13       	cpse	r28, r24
 858:	05 c0       	rjmp	.+10     	; 0x864 <__vector_7+0x3c>
 85a:	85 e1       	ldi	r24, 0x15	; 21
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	3e dd       	rcall	.-1412   	; 0x2dc <mTimer>
 860:	e0 dc       	rcall	.-1600   	; 0x222 <remove_first_item>
 862:	04 c0       	rjmp	.+8      	; 0x86c <__vector_7+0x44>
 864:	6f dd       	rcall	.-1314   	; 0x344 <stop_pwm>
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <current_belt_status>
 86c:	ff 91       	pop	r31
 86e:	ef 91       	pop	r30
 870:	cf 91       	pop	r28
 872:	bf 91       	pop	r27
 874:	af 91       	pop	r26
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	7f 91       	pop	r23
 87c:	6f 91       	pop	r22
 87e:	5f 91       	pop	r21
 880:	4f 91       	pop	r20
 882:	3f 91       	pop	r19
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0b be       	out	0x3b, r0	; 59
 88a:	0f 90       	pop	r0
 88c:	0f be       	out	0x3f, r0	; 63
 88e:	0f 90       	pop	r0
 890:	1f 90       	pop	r1
 892:	18 95       	reti

00000894 <__vector_8>:
 894:	1f 92       	push	r1
 896:	0f 92       	push	r0
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	0f 92       	push	r0
 89c:	11 24       	eor	r1, r1
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <__vector_1>:
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
 8b2:	0b b6       	in	r0, 0x3b	; 59
 8b4:	0f 92       	push	r0
 8b6:	2f 93       	push	r18
 8b8:	3f 93       	push	r19
 8ba:	4f 93       	push	r20
 8bc:	5f 93       	push	r21
 8be:	6f 93       	push	r22
 8c0:	7f 93       	push	r23
 8c2:	8f 93       	push	r24
 8c4:	9f 93       	push	r25
 8c6:	af 93       	push	r26
 8c8:	bf 93       	push	r27
 8ca:	ef 93       	push	r30
 8cc:	ff 93       	push	r31
 8ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	39 f4       	brne	.+14     	; 0x8e4 <__vector_1+0x3c>
 8d6:	62 e0       	ldi	r22, 0x02	; 2
 8d8:	86 e0       	ldi	r24, 0x06	; 6
 8da:	d8 dc       	rcall	.-1616   	; 0x28c <status_leds>
 8dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 8e0:	21 dc       	rcall	.-1982   	; 0x124 <ADC_reset_count>
 8e2:	3a c0       	rjmp	.+116    	; 0x958 <__vector_1+0xb0>
 8e4:	63 e0       	ldi	r22, 0x03	; 3
 8e6:	86 e0       	ldi	r24, 0x06	; 6
 8e8:	d1 dc       	rcall	.-1630   	; 0x28c <status_leds>
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8f0:	14 dc       	rcall	.-2008   	; 0x11a <read_Min_ADC>
 8f2:	82 b9       	out	0x02, r24	; 2
 8f4:	12 dc       	rcall	.-2012   	; 0x11a <read_Min_ADC>
 8f6:	8b 3b       	cpi	r24, 0xBB	; 187
 8f8:	93 40       	sbci	r25, 0x03	; 3
 8fa:	38 f0       	brcs	.+14     	; 0x90a <__vector_1+0x62>
 8fc:	87 e1       	ldi	r24, 0x17	; 23
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	61 de       	rcall	.-830    	; 0x5c4 <usartTXs>
 902:	63 e0       	ldi	r22, 0x03	; 3
 904:	83 e0       	ldi	r24, 0x03	; 3
 906:	6b dc       	rcall	.-1834   	; 0x1de <set_second_prox_sensor_item>
 908:	1c c0       	rjmp	.+56     	; 0x942 <__vector_1+0x9a>
 90a:	07 dc       	rcall	.-2034   	; 0x11a <read_Min_ADC>
 90c:	81 37       	cpi	r24, 0x71	; 113
 90e:	93 40       	sbci	r25, 0x03	; 3
 910:	38 f0       	brcs	.+14     	; 0x920 <__vector_1+0x78>
 912:	8e e1       	ldi	r24, 0x1E	; 30
 914:	91 e0       	ldi	r25, 0x01	; 1
 916:	56 de       	rcall	.-852    	; 0x5c4 <usartTXs>
 918:	63 e0       	ldi	r22, 0x03	; 3
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	60 dc       	rcall	.-1856   	; 0x1de <set_second_prox_sensor_item>
 91e:	11 c0       	rjmp	.+34     	; 0x942 <__vector_1+0x9a>
 920:	fc db       	rcall	.-2056   	; 0x11a <read_Min_ADC>
 922:	81 39       	cpi	r24, 0x91	; 145
 924:	91 40       	sbci	r25, 0x01	; 1
 926:	38 f0       	brcs	.+14     	; 0x936 <__vector_1+0x8e>
 928:	85 e2       	ldi	r24, 0x25	; 37
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	4b de       	rcall	.-874    	; 0x5c4 <usartTXs>
 92e:	63 e0       	ldi	r22, 0x03	; 3
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	55 dc       	rcall	.-1878   	; 0x1de <set_second_prox_sensor_item>
 934:	06 c0       	rjmp	.+12     	; 0x942 <__vector_1+0x9a>
 936:	8c e2       	ldi	r24, 0x2C	; 44
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	44 de       	rcall	.-888    	; 0x5c4 <usartTXs>
 93c:	63 e0       	ldi	r22, 0x03	; 3
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	4e dc       	rcall	.-1892   	; 0x1de <set_second_prox_sensor_item>
 942:	eb db       	rcall	.-2090   	; 0x11a <read_Min_ADC>
 944:	54 de       	rcall	.-856    	; 0x5ee <usartNumTXs>
 946:	82 e3       	ldi	r24, 0x32	; 50
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	3c de       	rcall	.-904    	; 0x5c4 <usartTXs>
 94c:	f0 db       	rcall	.-2080   	; 0x12e <ADC_return_Count>
 94e:	4f de       	rcall	.-866    	; 0x5ee <usartNumTXs>
 950:	84 e1       	ldi	r24, 0x14	; 20
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	37 de       	rcall	.-914    	; 0x5c4 <usartTXs>
 956:	da db       	rcall	.-2124   	; 0x10c <adc_stop_conv>
 958:	ff 91       	pop	r31
 95a:	ef 91       	pop	r30
 95c:	bf 91       	pop	r27
 95e:	af 91       	pop	r26
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	7f 91       	pop	r23
 966:	6f 91       	pop	r22
 968:	5f 91       	pop	r21
 96a:	4f 91       	pop	r20
 96c:	3f 91       	pop	r19
 96e:	2f 91       	pop	r18
 970:	0f 90       	pop	r0
 972:	0b be       	out	0x3b, r0	; 59
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <__vector_2>:
 97e:	1f 92       	push	r1
 980:	0f 92       	push	r0
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	0f 92       	push	r0
 986:	11 24       	eor	r1, r1
 988:	0b b6       	in	r0, 0x3b	; 59
 98a:	0f 92       	push	r0
 98c:	2f 93       	push	r18
 98e:	3f 93       	push	r19
 990:	4f 93       	push	r20
 992:	5f 93       	push	r21
 994:	6f 93       	push	r22
 996:	7f 93       	push	r23
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
 9a0:	ef 93       	push	r30
 9a2:	ff 93       	push	r31
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pause_state>
 9aa:	91 11       	cpse	r25, r1
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pause_state>
 9b2:	81 11       	cpse	r24, r1
 9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <__vector_2+0x42>
 9b6:	8a e3       	ldi	r24, 0x3A	; 58
 9b8:	91 e0       	ldi	r25, 0x01	; 1
 9ba:	04 de       	rcall	.-1016   	; 0x5c4 <usartTXs>
 9bc:	c3 dc       	rcall	.-1658   	; 0x344 <stop_pwm>
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__vector_2+0x46>
 9c0:	8c e3       	ldi	r24, 0x3C	; 60
 9c2:	c4 dc       	rcall	.-1656   	; 0x34c <start_pwm>
 9c4:	ff 91       	pop	r31
 9c6:	ef 91       	pop	r30
 9c8:	bf 91       	pop	r27
 9ca:	af 91       	pop	r26
 9cc:	9f 91       	pop	r25
 9ce:	8f 91       	pop	r24
 9d0:	7f 91       	pop	r23
 9d2:	6f 91       	pop	r22
 9d4:	5f 91       	pop	r21
 9d6:	4f 91       	pop	r20
 9d8:	3f 91       	pop	r19
 9da:	2f 91       	pop	r18
 9dc:	0f 90       	pop	r0
 9de:	0b be       	out	0x3b, r0	; 59
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__vector_23>:
 9ea:	1f 92       	push	r1
 9ec:	0f 92       	push	r0
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	0f 92       	push	r0
 9f2:	11 24       	eor	r1, r1
 9f4:	0b b6       	in	r0, 0x3b	; 59
 9f6:	0f 92       	push	r0
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	4f 93       	push	r20
 9fe:	5f 93       	push	r21
 a00:	6f 93       	push	r22
 a02:	7f 93       	push	r23
 a04:	8f 93       	push	r24
 a06:	9f 93       	push	r25
 a08:	af 93       	push	r26
 a0a:	bf 93       	push	r27
 a0c:	ef 93       	push	r30
 a0e:	ff 93       	push	r31
 a10:	82 e4       	ldi	r24, 0x42	; 66
 a12:	91 e0       	ldi	r25, 0x01	; 1
 a14:	d7 dd       	rcall	.-1106   	; 0x5c4 <usartTXs>
 a16:	ff 91       	pop	r31
 a18:	ef 91       	pop	r30
 a1a:	bf 91       	pop	r27
 a1c:	af 91       	pop	r26
 a1e:	9f 91       	pop	r25
 a20:	8f 91       	pop	r24
 a22:	7f 91       	pop	r23
 a24:	6f 91       	pop	r22
 a26:	5f 91       	pop	r21
 a28:	4f 91       	pop	r20
 a2a:	3f 91       	pop	r19
 a2c:	2f 91       	pop	r18
 a2e:	0f 90       	pop	r0
 a30:	0b be       	out	0x3b, r0	; 59
 a32:	0f 90       	pop	r0
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	0f 90       	pop	r0
 a38:	1f 90       	pop	r1
 a3a:	18 95       	reti

00000a3c <__divmodhi4>:
 a3c:	97 fb       	bst	r25, 7
 a3e:	07 2e       	mov	r0, r23
 a40:	16 f4       	brtc	.+4      	; 0xa46 <__divmodhi4+0xa>
 a42:	00 94       	com	r0
 a44:	06 d0       	rcall	.+12     	; 0xa52 <__divmodhi4_neg1>
 a46:	77 fd       	sbrc	r23, 7
 a48:	08 d0       	rcall	.+16     	; 0xa5a <__divmodhi4_neg2>
 a4a:	1a d0       	rcall	.+52     	; 0xa80 <__udivmodhi4>
 a4c:	07 fc       	sbrc	r0, 7
 a4e:	05 d0       	rcall	.+10     	; 0xa5a <__divmodhi4_neg2>
 a50:	3e f4       	brtc	.+14     	; 0xa60 <__divmodhi4_exit>

00000a52 <__divmodhi4_neg1>:
 a52:	90 95       	com	r25
 a54:	81 95       	neg	r24
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__divmodhi4_neg2>:
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a60 <__divmodhi4_exit>:
 a60:	08 95       	ret

00000a62 <__umulhisi3>:
 a62:	a2 9f       	mul	r26, r18
 a64:	b0 01       	movw	r22, r0
 a66:	b3 9f       	mul	r27, r19
 a68:	c0 01       	movw	r24, r0
 a6a:	a3 9f       	mul	r26, r19
 a6c:	70 0d       	add	r23, r0
 a6e:	81 1d       	adc	r24, r1
 a70:	11 24       	eor	r1, r1
 a72:	91 1d       	adc	r25, r1
 a74:	b2 9f       	mul	r27, r18
 a76:	70 0d       	add	r23, r0
 a78:	81 1d       	adc	r24, r1
 a7a:	11 24       	eor	r1, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	08 95       	ret

00000a80 <__udivmodhi4>:
 a80:	aa 1b       	sub	r26, r26
 a82:	bb 1b       	sub	r27, r27
 a84:	51 e1       	ldi	r21, 0x11	; 17
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <__udivmodhi4_ep>

00000a88 <__udivmodhi4_loop>:
 a88:	aa 1f       	adc	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	a6 17       	cp	r26, r22
 a8e:	b7 07       	cpc	r27, r23
 a90:	10 f0       	brcs	.+4      	; 0xa96 <__udivmodhi4_ep>
 a92:	a6 1b       	sub	r26, r22
 a94:	b7 0b       	sbc	r27, r23

00000a96 <__udivmodhi4_ep>:
 a96:	88 1f       	adc	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	5a 95       	dec	r21
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <__udivmodhi4_loop>
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	bc 01       	movw	r22, r24
 aa4:	cd 01       	movw	r24, r26
 aa6:	08 95       	ret

00000aa8 <_exit>:
 aa8:	f8 94       	cli

00000aaa <__stop_program>:
 aaa:	ff cf       	rjmp	.-2      	; 0xaaa <__stop_program>
