
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  0000132c  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000132c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  008001c4  008001c4  00001484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ff9  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ef  00000000  00000000  0000377d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d15  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00007784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000124f5  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000124f  00000000  00000000  0001a5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0001b820  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004d50  00000000  00000000  0001ba20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_1>
       8:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_2>
       c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_3>
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4d c7       	rjmp	.+3738   	; 0xeb0 <__vector_5>
      16:	00 00       	nop
      18:	7f c5       	rjmp	.+2814   	; 0xb18 <__vector_6>
      1a:	00 00       	nop
      1c:	7f c7       	rjmp	.+3838   	; 0xf1c <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__vector_8>
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c6       	rjmp	.+3542   	; 0xe4c <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_32>
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec e2       	ldi	r30, 0x2C	; 44
      ac:	f3 e1       	ldi	r31, 0x13	; 19
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a4 3c       	cpi	r26, 0xC4	; 196
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a4 ec       	ldi	r26, 0xC4	; 196
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	af 3d       	cpi	r26, 0xDF	; 223
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	55 d6       	rcall	.+3242   	; 0xd7a <main>
      d0:	0c 94 94 09 	jmp	0x1328	; 0x1328 <_exit>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <init_adc>:
uint16_t Total_Count;
uint16_t default_voltage;
uint16_t default_voltage_90_percent;
uint16_t time_under_90_percent_volt;

extern void init_adc(){
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<< REFS0)|(1<<MUX0);			// Left adjust, and use VCC as top reference
      de:	8c e7       	ldi	r24, 0x7C	; 124
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	21 e4       	ldi	r18, 0x41	; 65
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
	ADCSRA=(1<<ADEN)|(1<<ADIE);							//Set the values of the ADC Enable and ADC Interrupt Enable bits to 1
      e8:	8a e7       	ldi	r24, 0x7A	; 122
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	28 e8       	ldi	r18, 0x88	; 136
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
	DIDR0 = (1<<ADC1D);									//Turns off the digital input buffer for ADC1 on PF1
      f2:	8e e7       	ldi	r24, 0x7E	; 126
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
	
	ADC_Min_result = 0xFFFF;
      fc:	8f ef       	ldi	r24, 0xFF	; 255
      fe:	9f ef       	ldi	r25, 0xFF	; 255
     100:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <ADC_Min_result+0x1>
     104:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ADC_Min_result>
	Total_Count = 0;
     108:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <Total_Count+0x1>
     10c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <Total_Count>
	ADC_keep_running = false;
     110:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <ADC_keep_running>
	
	
	default_voltage = 0;
     114:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <default_voltage+0x1>
     118:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <default_voltage>
	default_voltage_90_percent = 0;
     11c:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <default_voltage_90_percent+0x1>
     120:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <default_voltage_90_percent>
	time_under_90_percent_volt = 0;
     124:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <time_under_90_percent_volt+0x1>
     128:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <time_under_90_percent_volt>
}
     12c:	00 00       	nop
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <set_default_voltage>:

extern void set_default_voltage(){
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	default_voltage = ADC;
     13c:	88 e7       	ldi	r24, 0x78	; 120
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	fc 01       	movw	r30, r24
     142:	80 81       	ld	r24, Z
     144:	91 81       	ldd	r25, Z+1	; 0x01
     146:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <default_voltage+0x1>
     14a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <default_voltage>
	//default_voltage_90_percent = (ADC*20)/18;
	default_voltage_90_percent = 976;
     14e:	80 ed       	ldi	r24, 0xD0	; 208
     150:	93 e0       	ldi	r25, 0x03	; 3
     152:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <default_voltage_90_percent+0x1>
     156:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <default_voltage_90_percent>
	usartTXs("Thres: ");
     15a:	86 e4       	ldi	r24, 0x46	; 70
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	44 d5       	rcall	.+2696   	; 0xbe8 <usartTXs>
	usartNumTXs(default_voltage_90_percent);
     160:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <default_voltage_90_percent>
     164:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <default_voltage_90_percent+0x1>
	usartTXs("\r\n");
     168:	68 d5       	rcall	.+2768   	; 0xc3a <usartNumTXs>
     16a:	8e e4       	ldi	r24, 0x4E	; 78
     16c:	91 e0       	ldi	r25, 0x01	; 1
}
     16e:	3c d5       	rcall	.+2680   	; 0xbe8 <usartTXs>
     170:	00 00       	nop
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <adc_start_conv>:

extern inline void adc_start_conv(){
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
     180:	8a e7       	ldi	r24, 0x7A	; 122
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	2a e7       	ldi	r18, 0x7A	; 122
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	f9 01       	movw	r30, r18
     18a:	20 81       	ld	r18, Z
     18c:	20 64       	ori	r18, 0x40	; 64
     18e:	fc 01       	movw	r30, r24
     190:	20 83       	st	Z, r18
	//PORTA ^= 0x20;
}
     192:	00 00       	nop
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <adc_stop_conv>:

extern inline void adc_stop_conv(){
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
	ADC_Min_result = 0xFFFF;
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	9f ef       	ldi	r25, 0xFF	; 255
     1a6:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <ADC_Min_result+0x1>
     1aa:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ADC_Min_result>
}
     1ae:	00 00       	nop
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <read_Min_ADC>:


extern inline uint16_t read_Min_ADC(){
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
	return ADC_Min_result;
     1be:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <ADC_Min_result>
     1c2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <ADC_Min_result+0x1>
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <ADC_reset_count>:

extern inline void ADC_reset_count(){
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
	Total_Count = 0;
     1d4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <Total_Count+0x1>
     1d8:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <Total_Count>
	time_under_90_percent_volt = 0;
     1dc:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <time_under_90_percent_volt+0x1>
     1e0:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <time_under_90_percent_volt>
}
     1e4:	00 00       	nop
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <ADC_return_Count>:

extern inline uint16_t ADC_return_Count(){
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
	return Total_Count;
     1f4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <Total_Count>
     1f8:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <Total_Count+0x1>
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <ADC_return_time_under>:

extern inline uint16_t ADC_return_time_under(){
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
	return time_under_90_percent_volt;
     20a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <time_under_90_percent_volt>
     20e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <time_under_90_percent_volt+0x1>
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <ADC_interrupt>:

extern inline void ADC_interrupt(){
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	Total_Count = Total_Count + 1;
     220:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <Total_Count>
     224:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <Total_Count+0x1>
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <Total_Count+0x1>
     22e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <Total_Count>
	if(ADC_Min_result > ADC){
     232:	88 e7       	ldi	r24, 0x78	; 120
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	fc 01       	movw	r30, r24
     238:	20 81       	ld	r18, Z
     23a:	31 81       	ldd	r19, Z+1	; 0x01
     23c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <ADC_Min_result>
     240:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <ADC_Min_result+0x1>
     244:	28 17       	cp	r18, r24
     246:	39 07       	cpc	r19, r25
     248:	48 f4       	brcc	.+18     	; 0x25c <ADC_interrupt+0x44>
		ADC_Min_result = ADC;
     24a:	88 e7       	ldi	r24, 0x78	; 120
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	91 81       	ldd	r25, Z+1	; 0x01
     254:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <ADC_Min_result+0x1>
     258:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ADC_Min_result>
	}
	if(default_voltage_90_percent > ADC){
     25c:	88 e7       	ldi	r24, 0x78	; 120
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	fc 01       	movw	r30, r24
     262:	20 81       	ld	r18, Z
     264:	31 81       	ldd	r19, Z+1	; 0x01
     266:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <default_voltage_90_percent>
     26a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <default_voltage_90_percent+0x1>
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	48 f4       	brcc	.+18     	; 0x286 <ADC_interrupt+0x6e>
		time_under_90_percent_volt = time_under_90_percent_volt + 1;
     274:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <time_under_90_percent_volt>
     278:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <time_under_90_percent_volt+0x1>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <time_under_90_percent_volt+0x1>
     282:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <time_under_90_percent_volt>
	if(ADC_keep_running == true){
		usartNumTXs(ADC);
	}//*/
	//PORTA = Total_Count;
	adc_start_conv();
     286:	78 df       	rcall	.-272    	; 0x178 <adc_start_conv>
     288:	00 00       	nop
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <buf_init>:
}

extern buf_is_magnetic(){
	belt[most_recent_pushed_idx].magnetic = true;
	belt[most_recent_pushed_idx].assumed_material = Steel;
}
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <most_recent_pushed_idx>
     29c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <current_push_idx>
     2a0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <first_on_belt>
     2a4:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <most_recent_idx_to_past_second_prox_sensor>
     2a8:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <white_sorted>
     2ac:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <black_sorted>
     2b0:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <alum_sorted>
     2b4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <steel_sorted>
     2b8:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <total_sorted>
     2bc:	00 00       	nop
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <buf_new>:
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <buf_length>
     2d0:	83 33       	cpi	r24, 0x33	; 51
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <buf_new+0x12>
     2d4:	43 c0       	rjmp	.+134    	; 0x35c <buf_new+0x98>
     2d6:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <current_push_idx>
     2da:	28 2f       	mov	r18, r24
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	c9 01       	movw	r24, r18
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	82 0f       	add	r24, r18
     2ea:	93 1f       	adc	r25, r19
     2ec:	8c 51       	subi	r24, 0x1C	; 28
     2ee:	9e 4f       	sbci	r25, 0xFE	; 254
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <current_push_idx>
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	c9 01       	movw	r24, r18
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	82 0f       	add	r24, r18
     30a:	93 1f       	adc	r25, r19
     30c:	8e 51       	subi	r24, 0x1E	; 30
     30e:	9e 4f       	sbci	r25, 0xFE	; 254
     310:	fc 01       	movw	r30, r24
     312:	10 82       	st	Z, r1
     314:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <current_push_idx>
     318:	28 2f       	mov	r18, r24
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	c9 01       	movw	r24, r18
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	80 52       	subi	r24, 0x20	; 32
     32c:	9e 4f       	sbci	r25, 0xFE	; 254
     32e:	fc 01       	movw	r30, r24
     330:	11 82       	std	Z+1, r1	; 0x01
     332:	10 82       	st	Z, r1
     334:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <current_push_idx>
     338:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <most_recent_pushed_idx>
     33c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <current_push_idx>
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	22 e3       	ldi	r18, 0x32	; 50
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	b9 01       	movw	r22, r18
     34c:	cb d7       	rcall	.+3990   	; 0x12e4 <__divmodhi4>
     34e:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <current_push_idx>
     352:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <buf_length>
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <buf_length>
     35c:	00 00       	nop
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <set_second_prox_sensor_item>:
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	00 d0       	rcall	.+0      	; 0x36a <set_second_prox_sensor_item+0x6>
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	6a 83       	std	Y+2, r22	; 0x02
     372:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <most_recent_idx_to_past_second_prox_sensor>
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	c9 01       	movw	r24, r18
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	82 0f       	add	r24, r18
     386:	93 1f       	adc	r25, r19
     388:	8d 51       	subi	r24, 0x1D	; 29
     38a:	9e 4f       	sbci	r25, 0xFE	; 254
     38c:	29 81       	ldd	r18, Y+1	; 0x01
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
     392:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <most_recent_idx_to_past_second_prox_sensor>
     396:	28 2f       	mov	r18, r24
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	c9 01       	movw	r24, r18
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	8c 51       	subi	r24, 0x1C	; 28
     3aa:	9e 4f       	sbci	r25, 0xFE	; 254
     3ac:	2a 81       	ldd	r18, Y+2	; 0x02
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
     3b2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <most_recent_idx_to_past_second_prox_sensor>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <most_recent_idx_to_past_second_prox_sensor>
     3bc:	00 00       	nop
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <buf_get_first_item_material>:

extern inline Materials buf_get_first_item_material(){
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	return belt[first_on_belt].assumed_material;
     3d0:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <first_on_belt>
     3d4:	28 2f       	mov	r18, r24
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	c9 01       	movw	r24, r18
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	82 0f       	add	r24, r18
     3e4:	93 1f       	adc	r25, r19
     3e6:	8d 51       	subi	r24, 0x1D	; 29
     3e8:	9e 4f       	sbci	r25, 0xFE	; 254
     3ea:	fc 01       	movw	r30, r24
     3ec:	80 81       	ld	r24, Z
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <remove_first_item>:

extern inline remove_first_item(){
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	belt[first_on_belt].last_stage = Complete;
     3fc:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <first_on_belt>
     400:	28 2f       	mov	r18, r24
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	c9 01       	movw	r24, r18
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	8c 51       	subi	r24, 0x1C	; 28
     414:	9e 4f       	sbci	r25, 0xFE	; 254
     416:	24 e0       	ldi	r18, 0x04	; 4
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
	first_on_belt++;
     41c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <first_on_belt>
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <first_on_belt>
	total_sorted++;
     426:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <total_sorted>
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <total_sorted>
	buf_length--;
     430:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <buf_length>
     434:	81 50       	subi	r24, 0x01	; 1
     436:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <buf_length>
}
     43a:	00 00       	nop
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <buffer_get_length>:

extern inline uint8_t buffer_get_length(){
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	return buf_length;
     44a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <buf_length>
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <buffer_get_total_sorted>:

extern inline uint8_t buffer_get_total_sorted(){
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	return total_sorted;
     45c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <total_sorted>
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <init_interrupt>:
 *  Author: abates
 */ 

#include <avr/io.h>

void init_interrupt(){
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	//EICRA |= _BV(ISC00);
	//Any edge causes interrupt on last promixity sensor
	EICRA |= _BV(ISC00);
     46e:	89 e6       	ldi	r24, 0x69	; 105
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	29 e6       	ldi	r18, 0x69	; 105
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	f9 01       	movw	r30, r18
     478:	20 81       	ld	r18, Z
     47a:	21 60       	ori	r18, 0x01	; 1
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
	
	//Pause button, active low
	EICRA |= _BV(ISC11) | _BV(ISC10);
     480:	89 e6       	ldi	r24, 0x69	; 105
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	29 e6       	ldi	r18, 0x69	; 105
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	2c 60       	ori	r18, 0x0C	; 12
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
	
	//Pause button, active low
	EICRA |= _BV(ISC21) | _BV(ISC20);
     492:	89 e6       	ldi	r24, 0x69	; 105
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	29 e6       	ldi	r18, 0x69	; 105
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	20 63       	ori	r18, 0x30	; 48
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
	
	//Stepper motor at home, active low
	EICRB |= _BV(ISC51);
     4a4:	8a e6       	ldi	r24, 0x6A	; 106
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	2a e6       	ldi	r18, 0x6A	; 106
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	f9 01       	movw	r30, r18
     4ae:	20 81       	ld	r18, Z
     4b0:	28 60       	ori	r18, 0x08	; 8
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
	
	//First promixity sensor, active low
	EICRB |= _BV(ISC41);
     4b6:	8a e6       	ldi	r24, 0x6A	; 106
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2a e6       	ldi	r18, 0x6A	; 106
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	22 60       	ori	r18, 0x02	; 2
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
	
	//Last promixity sensor, active low
	EICRB |= _BV(ISC61);
     4c8:	8a e6       	ldi	r24, 0x6A	; 106
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2a e6       	ldi	r18, 0x6A	; 106
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	20 62       	ori	r18, 0x20	; 32
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
	
	//Magnetic detection sensor, active low
	EICRB |= _BV(ISC71);
     4da:	8a e6       	ldi	r24, 0x6A	; 106
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2a e6       	ldi	r18, 0x6A	; 106
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	20 68       	ori	r18, 0x80	; 128
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
	
	EIMSK |= 0b01110111;
     4ec:	8d e3       	ldi	r24, 0x3D	; 61
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2d e3       	ldi	r18, 0x3D	; 61
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	27 67       	ori	r18, 0x77	; 119
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
     4fe:	00 00       	nop
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <init_led>:
		PORTA >>= 1;	
	}
	
	current_LED++;
	current_LED %= 10;
}
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	81 e2       	ldi	r24, 0x21	; 33
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
     518:	8a e2       	ldi	r24, 0x2A	; 42
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	2a e2       	ldi	r18, 0x2A	; 42
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	20 6e       	ori	r18, 0xE0	; 224
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
     52a:	82 e2       	ldi	r24, 0x22	; 34
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	10 82       	st	Z, r1
     532:	00 00       	nop
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <status_leds>:

extern void status_leds(Status_LED_Position pos, Status_LED_Colour colour){
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <status_leds+0x6>
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	6a 83       	std	Y+2, r22	; 0x02
		if(pos == top){
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	86 30       	cpi	r24, 0x06	; 6
     54c:	81 f5       	brne	.+96     	; 0x5ae <status_leds+0x74>
			PORTD &= ~0xC0;
     54e:	8b e2       	ldi	r24, 0x2B	; 43
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	2b e2       	ldi	r18, 0x2B	; 43
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	2f 73       	andi	r18, 0x3F	; 63
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
			if(colour == orange){
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	51 f4       	brne	.+20     	; 0x57a <status_leds+0x40>
				PORTD |= 0xC0;	
     566:	8b e2       	ldi	r24, 0x2B	; 43
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2b e2       	ldi	r18, 0x2B	; 43
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	20 6c       	ori	r18, 0xC0	; 192
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
				PORTD |= 0x20;
				}else{
						
				}
		}
     578:	48 c0       	rjmp	.+144    	; 0x60a <status_leds+0xd0>
extern void status_leds(Status_LED_Position pos, Status_LED_Colour colour){
		if(pos == top){
			PORTD &= ~0xC0;
			if(colour == orange){
				PORTD |= 0xC0;	
			}else if(colour == red){
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	51 f4       	brne	.+20     	; 0x594 <status_leds+0x5a>
				PORTD |= 0x80;
     580:	8b e2       	ldi	r24, 0x2B	; 43
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2b e2       	ldi	r18, 0x2B	; 43
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	20 68       	ori	r18, 0x80	; 128
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
				PORTD |= 0x20;
				}else{
						
				}
		}
     592:	3b c0       	rjmp	.+118    	; 0x60a <status_leds+0xd0>
			PORTD &= ~0xC0;
			if(colour == orange){
				PORTD |= 0xC0;	
			}else if(colour == red){
				PORTD |= 0x80;
			}else if(colour == green){
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	c1 f5       	brne	.+112    	; 0x60a <status_leds+0xd0>
				PORTD |= 0x40;
     59a:	8b e2       	ldi	r24, 0x2B	; 43
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	2b e2       	ldi	r18, 0x2B	; 43
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	f9 01       	movw	r30, r18
     5a4:	20 81       	ld	r18, Z
     5a6:	20 64       	ori	r18, 0x40	; 64
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
				PORTD |= 0x20;
				}else{
						
				}
		}
     5ac:	2e c0       	rjmp	.+92     	; 0x60a <status_leds+0xd0>
				PORTD |= 0x40;
			}else{
				
			}
		}else{
			PORTD &= ~0x30;
     5ae:	8b e2       	ldi	r24, 0x2B	; 43
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	2b e2       	ldi	r18, 0x2B	; 43
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	2f 7c       	andi	r18, 0xCF	; 207
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18
			if(colour == orange){
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	51 f4       	brne	.+20     	; 0x5da <status_leds+0xa0>
				PORTD |= 0x30;
     5c6:	8b e2       	ldi	r24, 0x2B	; 43
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	2b e2       	ldi	r18, 0x2B	; 43
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	20 63       	ori	r18, 0x30	; 48
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
				PORTD |= 0x20;
				}else{
						
				}
		}
     5d8:	18 c0       	rjmp	.+48     	; 0x60a <status_leds+0xd0>
			}
		}else{
			PORTD &= ~0x30;
			if(colour == orange){
				PORTD |= 0x30;
				}else if(colour == red){
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	51 f4       	brne	.+20     	; 0x5f4 <status_leds+0xba>
				PORTD |= 0x10;
     5e0:	8b e2       	ldi	r24, 0x2B	; 43
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2b e2       	ldi	r18, 0x2B	; 43
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	20 61       	ori	r18, 0x10	; 16
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
				PORTD |= 0x20;
				}else{
						
				}
		}
     5f2:	0b c0       	rjmp	.+22     	; 0x60a <status_leds+0xd0>
			PORTD &= ~0x30;
			if(colour == orange){
				PORTD |= 0x30;
				}else if(colour == red){
				PORTD |= 0x10;
				}else if(colour = green){
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	8a 83       	std	Y+2, r24	; 0x02
				PORTD |= 0x20;
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2b e2       	ldi	r18, 0x2B	; 43
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	20 62       	ori	r18, 0x20	; 32
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
				}else{
						
				}
		}
     60a:	00 00       	nop
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <mTimerConfig>:
{
	TCCR3B |= _BV(CS30);
	TIMSK3 |= _BV(OCIE3A);
	TCCR3A |= _BV(WGM31);
	OCR3A = 50; //1000
}
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	81 e8       	ldi	r24, 0x81	; 129
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	21 e8       	ldi	r18, 0x81	; 129
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	21 60       	ori	r18, 0x01	; 1
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
     630:	81 e8       	ldi	r24, 0x81	; 129
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	21 e8       	ldi	r18, 0x81	; 129
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	f9 01       	movw	r30, r18
     63a:	20 81       	ld	r18, Z
     63c:	28 60       	ori	r18, 0x08	; 8
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
     642:	88 e8       	ldi	r24, 0x88	; 136
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	2c e2       	ldi	r18, 0x2C	; 44
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	fc 01       	movw	r30, r24
     64c:	31 83       	std	Z+1, r19	; 0x01
     64e:	20 83       	st	Z, r18
     650:	00 00       	nop
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <mTimer>:

extern void mTimer(uint8_t count)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <mTimer+0x6>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     664:	19 82       	std	Y+1, r1	; 0x01
	
	TCNT1 = 0x0000;
     666:	84 e8       	ldi	r24, 0x84	; 132
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	fc 01       	movw	r30, r24
     66c:	11 82       	std	Z+1, r1	; 0x01
     66e:	10 82       	st	Z, r1
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
     670:	86 e3       	ldi	r24, 0x36	; 54
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	26 e3       	ldi	r18, 0x36	; 54
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	22 60       	ori	r18, 0x02	; 2
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
	
	while (i < count)
     682:	06 c0       	rjmp	.+12     	; 0x690 <mTimer+0x38>
	{
		uTimer140(20);
     684:	84 e1       	ldi	r24, 0x14	; 20
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0d d0       	rcall	.+26     	; 0x6a4 <uTimer140>
		i++;
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	89 83       	std	Y+1, r24	; 0x01
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
     690:	99 81       	ldd	r25, Y+1	; 0x01
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	98 17       	cp	r25, r24
     696:	b0 f3       	brcs	.-20     	; 0x684 <mTimer+0x2c>
	{
		uTimer140(20);
		i++;
	}
	return;
     698:	00 00       	nop
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <uTimer140>:

extern void inline uTimer140(uint16_t count){
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <uTimer140+0x6>
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <uTimer140+0x8>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9c 83       	std	Y+4, r25	; 0x04
     6b2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i = 0;
     6b4:	1a 82       	std	Y+2, r1	; 0x02
     6b6:	19 82       	std	Y+1, r1	; 0x01
	
	TCNT1 = 0x0000;
     6b8:	84 e8       	ldi	r24, 0x84	; 132
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	11 82       	std	Z+1, r1	; 0x01
     6c0:	10 82       	st	Z, r1
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
     6c2:	86 e3       	ldi	r24, 0x36	; 54
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	26 e3       	ldi	r18, 0x36	; 54
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	22 60       	ori	r18, 0x02	; 2
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	
	while (i < count)
     6d4:	18 c0       	rjmp	.+48     	; 0x706 <uTimer140+0x62>
	{
		if ((TIFR1 & 0x02) == 0x02)
     6d6:	86 e3       	ldi	r24, 0x36	; 54
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	82 70       	andi	r24, 0x02	; 2
     6e4:	99 27       	eor	r25, r25
     6e6:	89 2b       	or	r24, r25
     6e8:	71 f0       	breq	.+28     	; 0x706 <uTimer140+0x62>
		{
			TIFR1 |= _BV(OCF1A);
     6ea:	86 e3       	ldi	r24, 0x36	; 54
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	26 e3       	ldi	r18, 0x36	; 54
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	22 60       	ori	r18, 0x02	; 2
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
			i++;
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	9a 83       	std	Y+2, r25	; 0x02
     704:	89 83       	std	Y+1, r24	; 0x01
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
     706:	29 81       	ldd	r18, Y+1	; 0x01
     708:	3a 81       	ldd	r19, Y+2	; 0x02
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	28 17       	cp	r18, r24
     710:	39 07       	cpc	r19, r25
     712:	08 f3       	brcs	.-62     	; 0x6d6 <uTimer140+0x32>
		{
			TIFR1 |= _BV(OCF1A);
			i++;
		}
	}
	return;
     714:	00 00       	nop
}
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <init_pwm>:
#define IA	(0x4)
#define EA	(0x1)
#define IB	(0x2)
#define EB	(0x8)

extern void init_pwm(){
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	//Turn on B7 to output mode
	DDRB |= 0x8F; 
     72c:	84 e2       	ldi	r24, 0x24	; 36
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	24 e2       	ldi	r18, 0x24	; 36
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	2f 68       	ori	r18, 0x8F	; 143
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
	
	TCCR0A =(1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//Set timer counter compare register to Fast PWM
     73e:	84 e4       	ldi	r24, 0x44	; 68
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	23 e8       	ldi	r18, 0x83	; 131
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18

	TCCR0B = (1<<CS01) | (1<<CS00);
     748:	85 e4       	ldi	r24, 0x45	; 69
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	23 e0       	ldi	r18, 0x03	; 3
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
	OCR0A = 0;
     752:	87 e4       	ldi	r24, 0x47	; 71
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	10 82       	st	Z, r1
}
     75a:	00 00       	nop
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <set_dc_motor_speed>:

extern inline void set_dc_motor_speed(uint8_t speed){
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	1f 92       	push	r1
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = speed;
     76e:	87 e4       	ldi	r24, 0x47	; 71
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	29 81       	ldd	r18, Y+1	; 0x01
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
}
     778:	00 00       	nop
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <stop_pwm>:

extern inline void stop_pwm(){
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	set_dc_motor_speed(0);
     78a:	80 e0       	ldi	r24, 0x00	; 0
	set_motor_setting(Brake_to_VCC);
     78c:	ea df       	rcall	.-44     	; 0x762 <set_dc_motor_speed>
     78e:	80 e0       	ldi	r24, 0x00	; 0
}
     790:	13 d0       	rcall	.+38     	; 0x7b8 <set_motor_setting>
     792:	00 00       	nop
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <start_pwm>:

extern inline void start_pwm(uint8_t speed){
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	1f 92       	push	r1
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	89 83       	std	Y+1, r24	; 0x01
	set_motor_setting(DC_Motor_Clockwise);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
	set_dc_motor_speed(speed);
     7a8:	07 d0       	rcall	.+14     	; 0x7b8 <set_motor_setting>
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ac:	da df       	rcall	.-76     	; 0x762 <set_dc_motor_speed>
     7ae:	00 00       	nop
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <set_motor_setting>:

extern void set_motor_setting(Motor_Setting setting){
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	1f 92       	push	r1
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	89 83       	std	Y+1, r24	; 0x01
	//Force all settings to off
	PORTB &= ~(IA | IB | EA | EB);
     7c4:	85 e2       	ldi	r24, 0x25	; 37
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	25 e2       	ldi	r18, 0x25	; 37
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	20 7f       	andi	r18, 0xF0	; 240
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
	
	if(setting == DC_Motor_Clockwise){
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	51 f4       	brne	.+20     	; 0x7f0 <set_motor_setting+0x38>
		PORTB |= IB;
     7dc:	85 e2       	ldi	r24, 0x25	; 37
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	25 e2       	ldi	r18, 0x25	; 37
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	22 60       	ori	r18, 0x02	; 2
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
		//do nothing
	}
	else if(setting == Brake_to_Ground){
		PORTB |= (IA | IB);
	}
     7ee:	1a c0       	rjmp	.+52     	; 0x824 <set_motor_setting+0x6c>
	PORTB &= ~(IA | IB | EA | EB);
	
	if(setting == DC_Motor_Clockwise){
		PORTB |= IB;
	}
	else if (setting == DC_Motor_Counter_Clockwise){
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	51 f4       	brne	.+20     	; 0x80a <set_motor_setting+0x52>
		PORTB |= IA;
     7f6:	85 e2       	ldi	r24, 0x25	; 37
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	25 e2       	ldi	r18, 0x25	; 37
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	f9 01       	movw	r30, r18
     800:	20 81       	ld	r18, Z
     802:	24 60       	ori	r18, 0x04	; 4
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
		//do nothing
	}
	else if(setting == Brake_to_Ground){
		PORTB |= (IA | IB);
	}
     808:	0d c0       	rjmp	.+26     	; 0x824 <set_motor_setting+0x6c>
		PORTB |= IB;
	}
	else if (setting == DC_Motor_Counter_Clockwise){
		PORTB |= IA;
	}
	else if(setting = Brake_to_VCC){
     80a:	19 82       	std	Y+1, r1	; 0x01
		//do nothing
	}
	else if(setting == Brake_to_Ground){
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	49 f4       	brne	.+18     	; 0x824 <set_motor_setting+0x6c>
		PORTB |= (IA | IB);
     812:	85 e2       	ldi	r24, 0x25	; 37
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	25 e2       	ldi	r18, 0x25	; 37
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	f9 01       	movw	r30, r18
     81c:	20 81       	ld	r18, Z
     81e:	26 60       	ori	r18, 0x06	; 6
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
	}
     824:	00 00       	nop
     826:	0f 90       	pop	r0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <drive_stepper>:

bool home_flag;
Materials stepper_material_position;

static inline drive_stepper(stepper_steps current_step)
{
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	89 83       	std	Y+1, r24	; 0x01
	PORTC = steps_lookup[current_step];
     83a:	88 e2       	ldi	r24, 0x28	; 40
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	29 81       	ldd	r18, Y+1	; 0x01
     840:	22 2f       	mov	r18, r18
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	24 5c       	subi	r18, 0xC4	; 196
     84a:	3e 4f       	sbci	r19, 0xFE	; 254
     84c:	f9 01       	movw	r30, r18
     84e:	20 81       	ld	r18, Z
     850:	31 81       	ldd	r19, Z+1	; 0x01
     852:	fc 01       	movw	r30, r24
     854:	20 83       	st	Z, r18
}
     856:	00 00       	nop
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <init_stepper>:

extern inline void init_stepper()
{
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
	home_flag = false;
     868:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <home_flag>
	DDRC = 0xFF; /* Sets all pins on Port D to output */
     86c:	87 e2       	ldi	r24, 0x27	; 39
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
}
     876:	00 00       	nop
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <step>:

extern void step(stepper_direction dir)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t current_step = step_1;
	
	if(dir == Clock_Wise){
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	81 f4       	brne	.+32     	; 0x8b0 <step+0x32>
		current_step = ((current_step + 1) % amount_of_steps);
     890:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	83 70       	andi	r24, 0x03	; 3
     89c:	90 78       	andi	r25, 0x80	; 128
     89e:	99 23       	and	r25, r25
     8a0:	24 f4       	brge	.+8      	; 0x8aa <step+0x2c>
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	8c 6f       	ori	r24, 0xFC	; 252
     8a6:	9f 6f       	ori	r25, 0xFF	; 255
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
     8ae:	0d c0       	rjmp	.+26     	; 0x8ca <step+0x4c>
	}else{
		if(current_step == step_1)
     8b0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
     8b4:	88 23       	and	r24, r24
     8b6:	21 f4       	brne	.+8      	; 0x8c0 <step+0x42>
			current_step = step_4;
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <step+0x4c>
		else
			current_step = current_step - 1;
     8c0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
	}
	
	drive_stepper(current_step);
     8ca:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
     8ce:	af df       	rcall	.-162    	; 0x82e <drive_stepper>
}
     8d0:	00 00       	nop
     8d2:	0f 90       	pop	r0
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <get_current_stepper_material>:

extern inline Materials get_current_stepper_material(){
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
	return stepper_material_position;
     8e2:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <stepper_material_position>
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <check_if_home>:

extern bool check_if_home(){
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
	return (bool)(home_flag); 
     8f4:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <home_flag>
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <block_till_stepper_home>:

extern void block_till_stepper_home(){
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
	while (check_if_home() == false){
     906:	04 c0       	rjmp	.+8      	; 0x910 <block_till_stepper_home+0x12>
		step(Clock_Wise);
     908:	81 e0       	ldi	r24, 0x01	; 1
		mTimer(STEP_TIME_MS);
     90a:	b9 df       	rcall	.-142    	; 0x87e <step>
extern bool check_if_home(){
	return (bool)(home_flag); 
}

extern void block_till_stepper_home(){
	while (check_if_home() == false){
     90c:	8f e0       	ldi	r24, 0x0F	; 15
     90e:	a4 de       	rcall	.-696    	; 0x658 <mTimer>
     910:	ed df       	rcall	.-38     	; 0x8ec <check_if_home>
     912:	98 2f       	mov	r25, r24
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	89 27       	eor	r24, r25
     918:	88 23       	and	r24, r24
		step(Clock_Wise);
		mTimer(STEP_TIME_MS);
	}
	stepper_material_position = Black;
     91a:	b1 f7       	brne	.-20     	; 0x908 <block_till_stepper_home+0xa>
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <stepper_material_position>
}
     922:	00 00       	nop
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <stepper_repeat_steps>:

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	27 97       	sbiw	r28, 0x07	; 7
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	8e 83       	std	Y+6, r24	; 0x06
	#define STEP_CONSTANT (2)
	uint16_t *up;
	uint16_t *dw;
	if (buffer_get_total_sorted() < 5)
     940:	6f 83       	std	Y+7, r22	; 0x07
     942:	88 dd       	rcall	.-1264   	; 0x454 <buffer_get_total_sorted>
     944:	85 30       	cpi	r24, 0x05	; 5
	{
		//usartTXs("5\r\n");
		up = less_than_20_rev_up;
     946:	48 f4       	brcc	.+18     	; 0x95a <stepper_repeat_steps+0x30>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9a 83       	std	Y+2, r25	; 0x02
		dw = less_than_20_rev_dw;
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	88 e2       	ldi	r24, 0x28	; 40
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	9c 83       	std	Y+4, r25	; 0x04
	}
	else if (buffer_get_total_sorted() < 10)
     956:	8b 83       	std	Y+3, r24	; 0x03
     958:	2c c0       	rjmp	.+88     	; 0x9b2 <stepper_repeat_steps+0x88>
     95a:	7c dd       	rcall	.-1288   	; 0x454 <buffer_get_total_sorted>
     95c:	8a 30       	cpi	r24, 0x0A	; 10
	{
		//usartTXs("10\r\n");
		up = less_than_20_rev_up;
     95e:	48 f4       	brcc	.+18     	; 0x972 <stepper_repeat_steps+0x48>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9a 83       	std	Y+2, r25	; 0x02
		dw = less_than_20_rev_dw;
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	88 e2       	ldi	r24, 0x28	; 40
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	9c 83       	std	Y+4, r25	; 0x04
	}//*/
	else if (buffer_get_total_sorted() < 15)
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	20 c0       	rjmp	.+64     	; 0x9b2 <stepper_repeat_steps+0x88>
     972:	70 dd       	rcall	.-1312   	; 0x454 <buffer_get_total_sorted>
     974:	8f 30       	cpi	r24, 0x0F	; 15
	{
		//usartTXs("15\r\n");
		up = less_than_20_rev_up;
     976:	48 f4       	brcc	.+18     	; 0x98a <stepper_repeat_steps+0x60>
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	9a 83       	std	Y+2, r25	; 0x02
		dw = less_than_20_rev_dw;
     97e:	89 83       	std	Y+1, r24	; 0x01
     980:	88 e2       	ldi	r24, 0x28	; 40
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9c 83       	std	Y+4, r25	; 0x04
	}
	else if (buffer_get_total_sorted() < 20)
     986:	8b 83       	std	Y+3, r24	; 0x03
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <stepper_repeat_steps+0x88>
     98a:	64 dd       	rcall	.-1336   	; 0x454 <buffer_get_total_sorted>
     98c:	84 31       	cpi	r24, 0x14	; 20
	{
		up = less_than_20_rev_up;
     98e:	48 f4       	brcc	.+18     	; 0x9a2 <stepper_repeat_steps+0x78>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	9a 83       	std	Y+2, r25	; 0x02
		dw = less_than_20_rev_dw;
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	88 e2       	ldi	r24, 0x28	; 40
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	9c 83       	std	Y+4, r25	; 0x04
     99e:	8b 83       	std	Y+3, r24	; 0x03
	}else{
		up = less_than_20_rev_up;
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <stepper_repeat_steps+0x88>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	9a 83       	std	Y+2, r25	; 0x02
		dw = less_than_20_rev_dw;
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	88 e2       	ldi	r24, 0x28	; 40
     9ac:	91 e0       	ldi	r25, 0x01	; 1
	}
	
	
	for(uint8_t i = 0; i < steps; i++){
     9ae:	9c 83       	std	Y+4, r25	; 0x04
     9b0:	8b 83       	std	Y+3, r24	; 0x03
		step(dir);
     9b2:	1d 82       	std	Y+5, r1	; 0x05
     9b4:	40 c0       	rjmp	.+128    	; 0xa36 <stepper_repeat_steps+0x10c>
     9b6:	8f 81       	ldd	r24, Y+7	; 0x07
		if(i < 18){
     9b8:	62 df       	rcall	.-316    	; 0x87e <step>
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
			uTimer140(*up);
     9bc:	82 31       	cpi	r24, 0x12	; 18
     9be:	60 f4       	brcc	.+24     	; 0x9d8 <stepper_repeat_steps+0xae>
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	fc 01       	movw	r30, r24
     9c6:	80 81       	ld	r24, Z
			up++;
     9c8:	91 81       	ldd	r25, Z+1	; 0x01
     9ca:	6c de       	rcall	.-808    	; 0x6a4 <uTimer140>
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	02 96       	adiw	r24, 0x02	; 2
     9d2:	9a 83       	std	Y+2, r25	; 0x02
		}else if(steps - i < 10){
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	1e c0       	rjmp	.+60     	; 0xa14 <stepper_repeat_steps+0xea>
     9d8:	8e 81       	ldd	r24, Y+6	; 0x06
     9da:	28 2f       	mov	r18, r24
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	8d 81       	ldd	r24, Y+5	; 0x05
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a9 01       	movw	r20, r18
     9e6:	48 1b       	sub	r20, r24
     9e8:	59 0b       	sbc	r21, r25
			uTimer140(*dw);
     9ea:	ca 01       	movw	r24, r20
     9ec:	0a 97       	sbiw	r24, 0x0a	; 10
     9ee:	64 f4       	brge	.+24     	; 0xa08 <stepper_repeat_steps+0xde>
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	9c 81       	ldd	r25, Y+4	; 0x04
     9f4:	fc 01       	movw	r30, r24
     9f6:	80 81       	ld	r24, Z
			dw++;
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	54 de       	rcall	.-856    	; 0x6a4 <uTimer140>
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	02 96       	adiw	r24, 0x02	; 2
		}else{
			uTimer140(*up);
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <stepper_repeat_steps+0xea>
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 81       	ld	r24, Z
		}
		if(steps - i < 36){
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	48 de       	rcall	.-880    	; 0x6a4 <uTimer140>
     a14:	8e 81       	ldd	r24, Y+6	; 0x06
     a16:	28 2f       	mov	r18, r24
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	8d 81       	ldd	r24, Y+5	; 0x05
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a9 01       	movw	r20, r18
     a22:	48 1b       	sub	r20, r24
     a24:	59 0b       	sbc	r21, r25
			start_pwm(MOTOR_PWM);
     a26:	ca 01       	movw	r24, r20
     a28:	84 97       	sbiw	r24, 0x24	; 36
     a2a:	14 f4       	brge	.+4      	; 0xa30 <stepper_repeat_steps+0x106>
		up = less_than_20_rev_up;
		dw = less_than_20_rev_dw;
	}
	
	
	for(uint8_t i = 0; i < steps; i++){
     a2c:	86 e2       	ldi	r24, 0x26	; 38
     a2e:	b5 de       	rcall	.-662    	; 0x79a <start_pwm>
     a30:	8d 81       	ldd	r24, Y+5	; 0x05
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	8d 83       	std	Y+5, r24	; 0x05
     a36:	9d 81       	ldd	r25, Y+5	; 0x05
     a38:	8e 81       	ldd	r24, Y+6	; 0x06
     a3a:	98 17       	cp	r25, r24
		}
		else{
			uTimer140(80);
		}//*/
	}
}
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <stepper_repeat_steps+0x116>
     a3e:	bb cf       	rjmp	.-138    	; 0x9b6 <stepper_repeat_steps+0x8c>
     a40:	00 00       	nop
     a42:	27 96       	adiw	r28, 0x07	; 7
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <go_to_material>:

extern void go_to_material(Materials mat){
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	1f 92       	push	r1
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	89 83       	std	Y+1, r24	; 0x01
	if(stepper_material_position == Black){
     a60:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <stepper_material_position>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	89 f4       	brne	.+34     	; 0xa8a <go_to_material+0x36>
		if(mat == Steel){
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	21 f4       	brne	.+8      	; 0xa76 <go_to_material+0x22>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
     a6e:	6f ef       	ldi	r22, 0xFF	; 255
     a70:	82 e3       	ldi	r24, 0x32	; 50
     a72:	5b df       	rcall	.-330    	; 0x92a <stepper_repeat_steps>
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <go_to_material+0x36>
		}else if(mat == Aluminum){
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 23       	and	r24, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <go_to_material+0x30>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	82 e3       	ldi	r24, 0x32	; 50
     a80:	54 df       	rcall	.-344    	; 0x92a <stepper_repeat_steps>
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <go_to_material+0x36>
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	84 e6       	ldi	r24, 0x64	; 100
		}
	}
	if(stepper_material_position == Steel){
     a88:	50 df       	rcall	.-352    	; 0x92a <stepper_repeat_steps>
     a8a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <stepper_material_position>
     a8e:	82 30       	cpi	r24, 0x02	; 2
		if(mat == White)
     a90:	89 f4       	brne	.+34     	; 0xab4 <go_to_material+0x60>
     a92:	89 81       	ldd	r24, Y+1	; 0x01
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	21 f4       	brne	.+8      	; 0xaa0 <go_to_material+0x4c>
     a98:	6f ef       	ldi	r22, 0xFF	; 255
     a9a:	82 e3       	ldi	r24, 0x32	; 50
     a9c:	46 df       	rcall	.-372    	; 0x92a <stepper_repeat_steps>
		else if(mat == Black)
     a9e:	0a c0       	rjmp	.+20     	; 0xab4 <go_to_material+0x60>
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	21 f4       	brne	.+8      	; 0xaae <go_to_material+0x5a>
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	82 e3       	ldi	r24, 0x32	; 50
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
     aaa:	3f df       	rcall	.-386    	; 0x92a <stepper_repeat_steps>
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <go_to_material+0x60>
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	84 e6       	ldi	r24, 0x64	; 100
	}
	if(stepper_material_position == White){
     ab2:	3b df       	rcall	.-394    	; 0x92a <stepper_repeat_steps>
     ab4:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <stepper_material_position>
		if(mat == Aluminum)
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	89 f4       	brne	.+34     	; 0xade <go_to_material+0x8a>
     abc:	89 81       	ldd	r24, Y+1	; 0x01
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
     abe:	88 23       	and	r24, r24
     ac0:	21 f4       	brne	.+8      	; 0xaca <go_to_material+0x76>
     ac2:	6f ef       	ldi	r22, 0xFF	; 255
     ac4:	82 e3       	ldi	r24, 0x32	; 50
		else if(mat == Steel)
     ac6:	31 df       	rcall	.-414    	; 0x92a <stepper_repeat_steps>
     ac8:	0a c0       	rjmp	.+20     	; 0xade <go_to_material+0x8a>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	21 f4       	brne	.+8      	; 0xad8 <go_to_material+0x84>
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	82 e3       	ldi	r24, 0x32	; 50
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
     ad4:	2a df       	rcall	.-428    	; 0x92a <stepper_repeat_steps>
     ad6:	03 c0       	rjmp	.+6      	; 0xade <go_to_material+0x8a>
     ad8:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(stepper_material_position == Aluminum){
     ada:	84 e6       	ldi	r24, 0x64	; 100
     adc:	26 df       	rcall	.-436    	; 0x92a <stepper_repeat_steps>
     ade:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <stepper_material_position>
		if(mat == Black)
     ae2:	88 23       	and	r24, r24
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
     ae4:	89 f4       	brne	.+34     	; 0xb08 <go_to_material+0xb4>
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	83 30       	cpi	r24, 0x03	; 3
		else if(mat == White){
     aea:	21 f4       	brne	.+8      	; 0xaf4 <go_to_material+0xa0>
     aec:	6f ef       	ldi	r22, 0xFF	; 255
     aee:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
     af0:	1c df       	rcall	.-456    	; 0x92a <stepper_repeat_steps>
     af2:	0a c0       	rjmp	.+20     	; 0xb08 <go_to_material+0xb4>
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	21 f4       	brne	.+8      	; 0xb02 <go_to_material+0xae>
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	82 e3       	ldi	r24, 0x32	; 50
     afe:	15 df       	rcall	.-470    	; 0x92a <stepper_repeat_steps>
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <go_to_material+0xb4>
	}//*/
	stepper_material_position = mat;
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	84 e6       	ldi	r24, 0x64	; 100
     b06:	11 df       	rcall	.-478    	; 0x92a <stepper_repeat_steps>
}
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <stepper_material_position>
     b0e:	00 00       	nop
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <__vector_6>:

ISR(INT5_vect){
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	8f 93       	push	r24
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
	home_flag = true;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <home_flag>
     b34:	00 00       	nop
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	8f 91       	pop	r24
     b3c:	0f 90       	pop	r0
     b3e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <usartInit>:
#include "usart.h"
#include <string.h>
#include "mtimer.h"

extern void usartInit (uint16_t baud)
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <usartInit+0x6>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	//Set baud rate
	UBRR1H = (uint8_t)(baud >> 8);
     b56:	8d ec       	ldi	r24, 0xCD	; 205
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	29 81       	ldd	r18, Y+1	; 0x01
     b5c:	3a 81       	ldd	r19, Y+2	; 0x02
     b5e:	23 2f       	mov	r18, r19
     b60:	33 27       	eor	r19, r19
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18
	UBRR1L = (uint8_t)(baud);
     b66:	8c ec       	ldi	r24, 0xCC	; 204
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	29 81       	ldd	r18, Y+1	; 0x01
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
	
	UCSR1A |= DoubSpeed;
     b70:	88 ec       	ldi	r24, 0xC8	; 200
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	28 ec       	ldi	r18, 0xC8	; 200
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	f9 01       	movw	r30, r18
     b7a:	20 81       	ld	r18, Z
     b7c:	22 60       	ori	r18, 0x02	; 2
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
	
	UCSR1B |= TxEn;			//Enable TX mode for USART1
     b82:	89 ec       	ldi	r24, 0xC9	; 201
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	29 ec       	ldi	r18, 0xC9	; 201
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	f9 01       	movw	r30, r18
     b8c:	20 81       	ld	r18, Z
     b8e:	28 60       	ori	r18, 0x08	; 8
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
	//UCSR1B |= RxEn;		//Enable RX mode for USART1
	UCSR1C |= Mode8Bit;		//Set Usart to 8 bit data mode
     b94:	8a ec       	ldi	r24, 0xCA	; 202
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	2a ec       	ldi	r18, 0xCA	; 202
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	26 60       	ori	r18, 0x06	; 6
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
	
}
     ba6:	00 00       	nop
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <usartTX>:
//This function displace one char at a time on the serial port
//
//Pass this function a char.
extern void usartTX (unsigned char data)
{
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	1f 92       	push	r1
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR1A & TxBuffRdy));	//Wait for the TX buffer to be ready for data
     bbe:	00 00       	nop
     bc0:	88 ec       	ldi	r24, 0xC8	; 200
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 72       	andi	r24, 0x20	; 32
     bce:	99 27       	eor	r25, r25
     bd0:	89 2b       	or	r24, r25
     bd2:	b1 f3       	breq	.-20     	; 0xbc0 <usartTX+0xe>
	
	UDR1 = data;
     bd4:	8e ec       	ldi	r24, 0xCE	; 206
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	29 81       	ldd	r18, Y+1	; 0x01
     bda:	fc 01       	movw	r30, r24
     bdc:	20 83       	st	Z, r18
}
     bde:	00 00       	nop
     be0:	0f 90       	pop	r0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <usartTXs>:
//This function can display strings on the serial port by calling the display char
//function.
//Pass this function a string.
extern void usartTXs (const char *string)
{
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	00 d0       	rcall	.+0      	; 0xbee <usartTXs+0x6>
     bee:	1f 92       	push	r1
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	9b 83       	std	Y+3, r25	; 0x03
     bf6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t c = 0;
     bf8:	19 82       	std	Y+1, r1	; 0x01
	
	while (string [c] != 0)
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <usartTXs+0x2e>
	{
		usartTX(string[c]);
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2a 81       	ldd	r18, Y+2	; 0x02
     c04:	3b 81       	ldd	r19, Y+3	; 0x03
     c06:	82 0f       	add	r24, r18
     c08:	93 1f       	adc	r25, r19
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	d1 df       	rcall	.-94     	; 0xbb2 <usartTX>
		c++;
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	89 83       	std	Y+1, r24	; 0x01
//Pass this function a string.
extern void usartTXs (const char *string)
{
	uint8_t c = 0;
	
	while (string [c] != 0)
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	2a 81       	ldd	r18, Y+2	; 0x02
     c1e:	3b 81       	ldd	r19, Y+3	; 0x03
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	fc 01       	movw	r30, r24
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	41 f7       	brne	.-48     	; 0xbfc <usartTXs+0x14>
	{
		usartTX(string[c]);
		c++;
	}
}
     c2c:	00 00       	nop
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <usartNumTXs>:

extern void usartNumTXs(uint16_t num){
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <usartNumTXs+0x6>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01

	usartTX((char)(((num/1000)%10) + 48));
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	96 95       	lsr	r25
     c4e:	87 95       	ror	r24
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	9c 01       	movw	r18, r24
     c5a:	a5 ec       	ldi	r26, 0xC5	; 197
     c5c:	b0 e2       	ldi	r27, 0x20	; 32
     c5e:	55 d3       	rcall	.+1706   	; 0x130a <__umulhisi3>
     c60:	ac 01       	movw	r20, r24
     c62:	52 95       	swap	r21
     c64:	42 95       	swap	r20
     c66:	4f 70       	andi	r20, 0x0F	; 15
     c68:	45 27       	eor	r20, r21
     c6a:	5f 70       	andi	r21, 0x0F	; 15
     c6c:	45 27       	eor	r20, r21
     c6e:	9a 01       	movw	r18, r20
     c70:	ad ec       	ldi	r26, 0xCD	; 205
     c72:	bc ec       	ldi	r27, 0xCC	; 204
     c74:	4a d3       	rcall	.+1684   	; 0x130a <__umulhisi3>
     c76:	96 95       	lsr	r25
     c78:	87 95       	ror	r24
     c7a:	96 95       	lsr	r25
     c7c:	87 95       	ror	r24
     c7e:	96 95       	lsr	r25
     c80:	87 95       	ror	r24
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	9c 01       	movw	r18, r24
     c88:	22 0f       	add	r18, r18
     c8a:	33 1f       	adc	r19, r19
     c8c:	22 0f       	add	r18, r18
     c8e:	33 1f       	adc	r19, r19
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	9a 01       	movw	r18, r20
     c96:	28 1b       	sub	r18, r24
     c98:	39 0b       	sbc	r19, r25
     c9a:	c9 01       	movw	r24, r18
     c9c:	80 5d       	subi	r24, 0xD0	; 208
     c9e:	89 df       	rcall	.-238    	; 0xbb2 <usartTX>
	usartTX((char)(((num/100)%10) + 48));
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	9c 01       	movw	r18, r24
     cae:	ab e7       	ldi	r26, 0x7B	; 123
     cb0:	b4 e1       	ldi	r27, 0x14	; 20
     cb2:	2b d3       	rcall	.+1622   	; 0x130a <__umulhisi3>
     cb4:	ac 01       	movw	r20, r24
     cb6:	56 95       	lsr	r21
     cb8:	47 95       	ror	r20
     cba:	9a 01       	movw	r18, r20
     cbc:	ad ec       	ldi	r26, 0xCD	; 205
     cbe:	bc ec       	ldi	r27, 0xCC	; 204
     cc0:	24 d3       	rcall	.+1608   	; 0x130a <__umulhisi3>
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	96 95       	lsr	r25
     cc8:	87 95       	ror	r24
     cca:	96 95       	lsr	r25
     ccc:	87 95       	ror	r24
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	9c 01       	movw	r18, r24
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	82 0f       	add	r24, r18
     cde:	93 1f       	adc	r25, r19
     ce0:	9a 01       	movw	r18, r20
     ce2:	28 1b       	sub	r18, r24
     ce4:	39 0b       	sbc	r19, r25
     ce6:	c9 01       	movw	r24, r18
     ce8:	80 5d       	subi	r24, 0xD0	; 208
	usartTX((char)(((num/10)%10) + 48));
     cea:	63 df       	rcall	.-314    	; 0xbb2 <usartTX>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	9c 01       	movw	r18, r24
     cf2:	ad ec       	ldi	r26, 0xCD	; 205
     cf4:	bc ec       	ldi	r27, 0xCC	; 204
     cf6:	09 d3       	rcall	.+1554   	; 0x130a <__umulhisi3>
     cf8:	ac 01       	movw	r20, r24
     cfa:	56 95       	lsr	r21
     cfc:	47 95       	ror	r20
     cfe:	56 95       	lsr	r21
     d00:	47 95       	ror	r20
     d02:	56 95       	lsr	r21
     d04:	47 95       	ror	r20
     d06:	9a 01       	movw	r18, r20
     d08:	ad ec       	ldi	r26, 0xCD	; 205
     d0a:	bc ec       	ldi	r27, 0xCC	; 204
     d0c:	fe d2       	rcall	.+1532   	; 0x130a <__umulhisi3>
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	9c 01       	movw	r18, r24
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	82 0f       	add	r24, r18
     d2a:	93 1f       	adc	r25, r19
     d2c:	9a 01       	movw	r18, r20
     d2e:	28 1b       	sub	r18, r24
     d30:	39 0b       	sbc	r19, r25
     d32:	c9 01       	movw	r24, r18
     d34:	80 5d       	subi	r24, 0xD0	; 208
	usartTX((char)((num%10) + 48));
     d36:	3d df       	rcall	.-390    	; 0xbb2 <usartTX>
     d38:	49 81       	ldd	r20, Y+1	; 0x01
     d3a:	5a 81       	ldd	r21, Y+2	; 0x02
     d3c:	9a 01       	movw	r18, r20
     d3e:	ad ec       	ldi	r26, 0xCD	; 205
     d40:	bc ec       	ldi	r27, 0xCC	; 204
     d42:	e3 d2       	rcall	.+1478   	; 0x130a <__umulhisi3>
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	96 95       	lsr	r25
     d4e:	87 95       	ror	r24
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	9c 01       	movw	r18, r24
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	9a 01       	movw	r18, r20
     d64:	28 1b       	sub	r18, r24
     d66:	39 0b       	sbc	r19, r25
     d68:	c9 01       	movw	r24, r18
     d6a:	80 5d       	subi	r24, 0xD0	; 208
     d6c:	22 df       	rcall	.-444    	; 0xbb2 <usartTX>
     d6e:	00 00       	nop
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <main>:
volatile uint8_t pause_fsm = 0;
volatile uint8_t pause_flag = 0;

/* main routine */
int main()
{	
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	cli();
	mTimerConfig();
	init_led();
	init_interrupt();
     d82:	f8 94       	cli
     d84:	48 dc       	rcall	.-1904   	; 0x616 <mTimerConfig>
     d86:	bf db       	rcall	.-2178   	; 0x506 <init_led>
     d88:	6e db       	rcall	.-2340   	; 0x466 <init_interrupt>
     d8a:	6a dd       	rcall	.-1324   	; 0x860 <init_stepper>
     d8c:	cb dc       	rcall	.-1642   	; 0x724 <init_pwm>
     d8e:	a3 d9       	rcall	.-3258   	; 0xd6 <init_adc>
     d90:	7f da       	rcall	.-2818   	; 0x290 <buf_init>
     d92:	8c e0       	ldi	r24, 0x0C	; 12
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	d8 de       	rcall	.-592    	; 0xb48 <usartInit>
     d98:	78 94       	sei
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <pause_fsm>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <pause_state>
     da6:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <current_belt_status>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <ramp_state>
     db0:	81 e5       	ldi	r24, 0x51	; 81
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	19 df       	rcall	.-462    	; 0xbe8 <usartTXs>
     db6:	88 ec       	ldi	r24, 0xC8	; 200
     db8:	4f dc       	rcall	.-1890   	; 0x658 <mTimer>
     dba:	a1 dd       	rcall	.-1214   	; 0x8fe <block_till_stepper_home>
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	4c dc       	rcall	.-1896   	; 0x658 <mTimer>
     dc0:	6f ef       	ldi	r22, 0xFF	; 255
     dc2:	88 e0       	ldi	r24, 0x08	; 8
     dc4:	b2 dd       	rcall	.-1180   	; 0x92a <stepper_repeat_steps>
     dc6:	88 ec       	ldi	r24, 0xC8	; 200
     dc8:	47 dc       	rcall	.-1906   	; 0x658 <mTimer>
     dca:	86 e2       	ldi	r24, 0x26	; 38
     dcc:	e6 dc       	rcall	.-1588   	; 0x79a <start_pwm>
     dce:	d4 d9       	rcall	.-3160   	; 0x178 <adc_start_conv>
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	42 dc       	rcall	.-1916   	; 0x658 <mTimer>
     dd4:	af d9       	rcall	.-3234   	; 0x134 <set_default_voltage>
     dd6:	8c e5       	ldi	r24, 0x5C	; 92
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	06 df       	rcall	.-500    	; 0xbe8 <usartTXs>
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	3c dc       	rcall	.-1928   	; 0x658 <mTimer>
     de0:	86 e2       	ldi	r24, 0x26	; 38
     de2:	db dc       	rcall	.-1610   	; 0x79a <start_pwm>
     de4:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <pause_state>
     de8:	88 23       	and	r24, r24
     dea:	e1 f7       	brne	.-8      	; 0xde4 <main+0x6a>
     dec:	82 e6       	ldi	r24, 0x62	; 98
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	fb de       	rcall	.-522    	; 0xbe8 <usartTXs>
     df2:	27 db       	rcall	.-2482   	; 0x442 <buffer_get_length>
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	20 df       	rcall	.-448    	; 0xc3a <usartNumTXs>
     dfa:	8d e6       	ldi	r24, 0x6D	; 109
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	f4 de       	rcall	.-536    	; 0xbe8 <usartTXs>
     e00:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <steel_sorted>
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	18 df       	rcall	.-464    	; 0xc3a <usartNumTXs>
     e0a:	87 e7       	ldi	r24, 0x77	; 119
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	ec de       	rcall	.-552    	; 0xbe8 <usartTXs>
     e10:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <alum_sorted>
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	10 df       	rcall	.-480    	; 0xc3a <usartNumTXs>
     e1a:	80 e8       	ldi	r24, 0x80	; 128
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	e4 de       	rcall	.-568    	; 0xbe8 <usartTXs>
     e20:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <white_sorted>
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	08 df       	rcall	.-496    	; 0xc3a <usartNumTXs>
     e2a:	8a e8       	ldi	r24, 0x8A	; 138
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	dc de       	rcall	.-584    	; 0xbe8 <usartTXs>
     e30:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <black_sorted>
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	00 df       	rcall	.-512    	; 0xc3a <usartNumTXs>
     e3a:	84 e9       	ldi	r24, 0x94	; 148
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	d4 de       	rcall	.-600    	; 0xbe8 <usartTXs>
     e40:	00 00       	nop
     e42:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <pause_state>
     e46:	88 23       	and	r24, r24
     e48:	e1 f3       	breq	.-8      	; 0xe42 <main+0xc8>
     e4a:	cc cf       	rjmp	.-104    	; 0xde4 <main+0x6a>

00000e4c <__vector_29>:
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e5c:	0f 92       	push	r0
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	cc d9       	rcall	.-3176   	; 0x218 <ADC_interrupt>
     e80:	00 00       	nop
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ea4:	0f 90       	pop	r0
     ea6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_5>:
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ec0:	0f 92       	push	r0
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <ramp_state>
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_5+0x3c>
     eea:	ec d9       	rcall	.-3112   	; 0x2c4 <buf_new>
     eec:	00 00       	nop
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     f10:	0f 90       	pop	r0
     f12:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_7>:
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     f2c:	0f 92       	push	r0
     f2e:	1f 93       	push	r17
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	3b da       	rcall	.-2954   	; 0x3c8 <buf_get_first_item_material>
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	31 f4       	brne	.+12     	; 0xf62 <__vector_7+0x46>
     f56:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <black_sorted>
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <black_sorted>
     f60:	17 c0       	rjmp	.+46     	; 0xf90 <__vector_7+0x74>
     f62:	32 da       	rcall	.-2972   	; 0x3c8 <buf_get_first_item_material>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	31 f4       	brne	.+12     	; 0xf74 <__vector_7+0x58>
     f68:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <white_sorted>
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <white_sorted>
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <__vector_7+0x74>
     f74:	29 da       	rcall	.-2990   	; 0x3c8 <buf_get_first_item_material>
     f76:	88 23       	and	r24, r24
     f78:	31 f4       	brne	.+12     	; 0xf86 <__vector_7+0x6a>
     f7a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <alum_sorted>
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <alum_sorted>
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <__vector_7+0x74>
     f86:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <steel_sorted>
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <steel_sorted>
     f90:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <ramp_state>
     f94:	88 23       	and	r24, r24
     f96:	29 f4       	brne	.+10     	; 0xfa2 <__vector_7+0x86>
     f98:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <counter.2283>
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <counter.2283>
     fa2:	9b dc       	rcall	.-1738   	; 0x8da <get_current_stepper_material>
     fa4:	18 2f       	mov	r17, r24
     fa6:	10 da       	rcall	.-3040   	; 0x3c8 <buf_get_first_item_material>
     fa8:	18 17       	cp	r17, r24
     faa:	21 f4       	brne	.+8      	; 0xfb4 <__vector_7+0x98>
     fac:	85 e1       	ldi	r24, 0x15	; 21
     fae:	54 db       	rcall	.-2392   	; 0x658 <mTimer>
     fb0:	21 da       	rcall	.-3006   	; 0x3f4 <remove_first_item>
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <__vector_7+0xaa>
     fb4:	e6 db       	rcall	.-2100   	; 0x782 <stop_pwm>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <current_belt_status>
     fbc:	05 da       	rcall	.-3062   	; 0x3c8 <buf_get_first_item_material>
     fbe:	4a dd       	rcall	.-1388   	; 0xa54 <go_to_material>
     fc0:	86 e2       	ldi	r24, 0x26	; 38
     fc2:	eb db       	rcall	.-2090   	; 0x79a <start_pwm>
     fc4:	17 da       	rcall	.-3026   	; 0x3f4 <remove_first_item>
     fc6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <counter.2283>
     fca:	88 23       	and	r24, r24
     fcc:	69 f5       	brne	.+90     	; 0x1028 <__vector_7+0x10c>
     fce:	86 e9       	ldi	r24, 0x96	; 150
     fd0:	43 db       	rcall	.-2426   	; 0x658 <mTimer>
     fd2:	d7 db       	rcall	.-2130   	; 0x782 <stop_pwm>
     fd4:	82 e6       	ldi	r24, 0x62	; 98
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	07 de       	rcall	.-1010   	; 0xbe8 <usartTXs>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	2d de       	rcall	.-934    	; 0xc3a <usartNumTXs>
     fe0:	8d e6       	ldi	r24, 0x6D	; 109
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	01 de       	rcall	.-1022   	; 0xbe8 <usartTXs>
     fe6:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <steel_sorted>
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	25 de       	rcall	.-950    	; 0xc3a <usartNumTXs>
     ff0:	87 e7       	ldi	r24, 0x77	; 119
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	f9 dd       	rcall	.-1038   	; 0xbe8 <usartTXs>
     ff6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <alum_sorted>
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	1d de       	rcall	.-966    	; 0xc3a <usartNumTXs>
    1000:	80 e8       	ldi	r24, 0x80	; 128
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	f1 dd       	rcall	.-1054   	; 0xbe8 <usartTXs>
    1006:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <white_sorted>
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	15 de       	rcall	.-982    	; 0xc3a <usartNumTXs>
    1010:	8a e8       	ldi	r24, 0x8A	; 138
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	e9 dd       	rcall	.-1070   	; 0xbe8 <usartTXs>
    1016:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <black_sorted>
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0d de       	rcall	.-998    	; 0xc3a <usartNumTXs>
    1020:	84 e9       	ldi	r24, 0x94	; 148
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	e1 dd       	rcall	.-1086   	; 0xbe8 <usartTXs>
    1026:	ff cf       	rjmp	.-2      	; 0x1026 <__vector_7+0x10a>
    1028:	00 00       	nop
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	1f 91       	pop	r17
    1048:	0f 90       	pop	r0
    104a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    104e:	0f 90       	pop	r0
    1050:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <__vector_8>:
    105a:	1f 92       	push	r1
    105c:	0f 92       	push	r0
    105e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	00 00       	nop
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	0f 90       	pop	r0
    1076:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_1>:
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1090:	0f 92       	push	r0
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <last_state.2299>
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	51 f4       	brne	.+20     	; 0x10d2 <__vector_1+0x52>
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	86 e0       	ldi	r24, 0x06	; 6
    10c2:	3b da       	rcall	.-2954   	; 0x53a <status_leds>
    10c4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <last_state.2299>
    10c8:	81 d8       	rcall	.-3838   	; 0x1cc <ADC_reset_count>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <ADC_keep_running>
    10d0:	3c c0       	rjmp	.+120    	; 0x114a <__vector_1+0xca>
    10d2:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <ADC_keep_running>
    10d6:	63 e0       	ldi	r22, 0x03	; 3
    10d8:	86 e0       	ldi	r24, 0x06	; 6
    10da:	2f da       	rcall	.-2978   	; 0x53a <status_leds>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <last_state.2299>
    10e2:	02 e2       	ldi	r16, 0x22	; 34
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	67 d8       	rcall	.-3890   	; 0x1b6 <read_Min_ADC>
    10e8:	f8 01       	movw	r30, r16
    10ea:	80 83       	st	Z, r24
    10ec:	8a d8       	rcall	.-3820   	; 0x202 <ADC_return_time_under>
    10ee:	24 e6       	ldi	r18, 0x64	; 100
    10f0:	28 9f       	mul	r18, r24
    10f2:	80 01       	movw	r16, r0
    10f4:	29 9f       	mul	r18, r25
    10f6:	10 0d       	add	r17, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	78 d8       	rcall	.-3856   	; 0x1ec <ADC_return_Count>
    10fc:	9c 01       	movw	r18, r24
    10fe:	c8 01       	movw	r24, r16
    1100:	b9 01       	movw	r22, r18
    1102:	dc d0       	rcall	.+440    	; 0x12bc <__udivmodhi4>
    1104:	cb 01       	movw	r24, r22
    1106:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <ratio_under.2298+0x1>
    110a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <ratio_under.2298>
    110e:	53 d8       	rcall	.-3930   	; 0x1b6 <read_Min_ADC>
    1110:	81 37       	cpi	r24, 0x71	; 113
    1112:	93 40       	sbci	r25, 0x03	; 3
    1114:	70 f0       	brcs	.+28     	; 0x1132 <__vector_1+0xb2>
    1116:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <ratio_under.2298>
    111a:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <ratio_under.2298+0x1>
    111e:	4f 97       	sbiw	r24, 0x1f	; 31
    1120:	20 f0       	brcs	.+8      	; 0x112a <__vector_1+0xaa>
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	1e d9       	rcall	.-3524   	; 0x364 <set_second_prox_sensor_item>
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <__vector_1+0xc8>
    112a:	63 e0       	ldi	r22, 0x03	; 3
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	1a d9       	rcall	.-3532   	; 0x364 <set_second_prox_sensor_item>
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <__vector_1+0xc8>
    1132:	41 d8       	rcall	.-3966   	; 0x1b6 <read_Min_ADC>
    1134:	8d 3c       	cpi	r24, 0xCD	; 205
    1136:	91 40       	sbci	r25, 0x01	; 1
    1138:	20 f0       	brcs	.+8      	; 0x1142 <__vector_1+0xc2>
    113a:	63 e0       	ldi	r22, 0x03	; 3
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	12 d9       	rcall	.-3548   	; 0x364 <set_second_prox_sensor_item>
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <__vector_1+0xc8>
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e d9       	rcall	.-3556   	; 0x364 <set_second_prox_sensor_item>
    1148:	28 d8       	rcall	.-4016   	; 0x19a <adc_stop_conv>
    114a:	00 00       	nop
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	9f 91       	pop	r25
    115a:	8f 91       	pop	r24
    115c:	7f 91       	pop	r23
    115e:	6f 91       	pop	r22
    1160:	5f 91       	pop	r21
    1162:	4f 91       	pop	r20
    1164:	3f 91       	pop	r19
    1166:	2f 91       	pop	r18
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	0f 90       	pop	r0
    116e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1172:	0f 90       	pop	r0
    1174:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <__vector_2>:
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    118e:	0f 92       	push	r0
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <pause_state>
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <__vector_2+0x48>
    11b8:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <pause_state>
    11bc:	87 e9       	ldi	r24, 0x97	; 151
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	13 dd       	rcall	.-1498   	; 0xbe8 <usartTXs>
    11c2:	df da       	rcall	.-2626   	; 0x782 <stop_pwm>
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <__vector_2+0x58>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <pause_state>
    11cc:	86 e2       	ldi	r24, 0x26	; 38
    11ce:	e5 da       	rcall	.-2614   	; 0x79a <start_pwm>
    11d0:	82 ea       	ldi	r24, 0xA2	; 162
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	09 dd       	rcall	.-1518   	; 0xbe8 <usartTXs>
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	3f da       	rcall	.-2946   	; 0x658 <mTimer>
    11da:	00 00       	nop
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    11fe:	0f 90       	pop	r0
    1200:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_3>:
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    121a:	0f 92       	push	r0
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <ramp_state>
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	99 23       	and	r25, r25
    1244:	09 f0       	breq	.+2      	; 0x1248 <__vector_3+0x3e>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <ramp_state>
    124c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <ramp_state>
    1250:	88 23       	and	r24, r24
    1252:	21 f4       	brne	.+8      	; 0x125c <__vector_3+0x52>
    1254:	8e ea       	ldi	r24, 0xAE	; 174
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	c7 dc       	rcall	.-1650   	; 0xbe8 <usartTXs>
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <__vector_3+0x58>
    125c:	88 eb       	ldi	r24, 0xB8	; 184
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	c3 dc       	rcall	.-1658   	; 0xbe8 <usartTXs>
    1262:	85 e0       	ldi	r24, 0x05	; 5
    1264:	f9 d9       	rcall	.-3086   	; 0x658 <mTimer>
    1266:	00 00       	nop
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    128a:	0f 90       	pop	r0
    128c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_32>:
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	00 00       	nop
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	0f 90       	pop	r0
    12b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <__udivmodhi4>:
    12bc:	aa 1b       	sub	r26, r26
    12be:	bb 1b       	sub	r27, r27
    12c0:	51 e1       	ldi	r21, 0x11	; 17
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <__udivmodhi4_ep>

000012c4 <__udivmodhi4_loop>:
    12c4:	aa 1f       	adc	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	a6 17       	cp	r26, r22
    12ca:	b7 07       	cpc	r27, r23
    12cc:	10 f0       	brcs	.+4      	; 0x12d2 <__udivmodhi4_ep>
    12ce:	a6 1b       	sub	r26, r22
    12d0:	b7 0b       	sbc	r27, r23

000012d2 <__udivmodhi4_ep>:
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	5a 95       	dec	r21
    12d8:	a9 f7       	brne	.-22     	; 0x12c4 <__udivmodhi4_loop>
    12da:	80 95       	com	r24
    12dc:	90 95       	com	r25
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	08 95       	ret

000012e4 <__divmodhi4>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	07 2e       	mov	r0, r23
    12e8:	16 f4       	brtc	.+4      	; 0x12ee <__divmodhi4+0xa>
    12ea:	00 94       	com	r0
    12ec:	06 d0       	rcall	.+12     	; 0x12fa <__divmodhi4_neg1>
    12ee:	77 fd       	sbrc	r23, 7
    12f0:	08 d0       	rcall	.+16     	; 0x1302 <__divmodhi4_neg2>
    12f2:	e4 df       	rcall	.-56     	; 0x12bc <__udivmodhi4>
    12f4:	07 fc       	sbrc	r0, 7
    12f6:	05 d0       	rcall	.+10     	; 0x1302 <__divmodhi4_neg2>
    12f8:	3e f4       	brtc	.+14     	; 0x1308 <__divmodhi4_exit>

000012fa <__divmodhi4_neg1>:
    12fa:	90 95       	com	r25
    12fc:	81 95       	neg	r24
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	08 95       	ret

00001302 <__divmodhi4_neg2>:
    1302:	70 95       	com	r23
    1304:	61 95       	neg	r22
    1306:	7f 4f       	sbci	r23, 0xFF	; 255

00001308 <__divmodhi4_exit>:
    1308:	08 95       	ret

0000130a <__umulhisi3>:
    130a:	a2 9f       	mul	r26, r18
    130c:	b0 01       	movw	r22, r0
    130e:	b3 9f       	mul	r27, r19
    1310:	c0 01       	movw	r24, r0
    1312:	a3 9f       	mul	r26, r19
    1314:	70 0d       	add	r23, r0
    1316:	81 1d       	adc	r24, r1
    1318:	11 24       	eor	r1, r1
    131a:	91 1d       	adc	r25, r1
    131c:	b2 9f       	mul	r27, r18
    131e:	70 0d       	add	r23, r0
    1320:	81 1d       	adc	r24, r1
    1322:	11 24       	eor	r1, r1
    1324:	91 1d       	adc	r25, r1
    1326:	08 95       	ret

00001328 <_exit>:
    1328:	f8 94       	cli

0000132a <__stop_program>:
    132a:	ff cf       	rjmp	.-2      	; 0x132a <__stop_program>
