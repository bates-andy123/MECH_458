
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  00800136  00800136  00000a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021c5  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001402  00000000  00000000  00002ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002714  00000000  00000000  000042f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00006a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012259  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089b  00000000  00000000  000191d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00019a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004c31  00000000  00000000  00019c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	19 c4       	rjmp	.+2098   	; 0x838 <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	93 c3       	rjmp	.+1830   	; 0x73c <__vector_5>
  16:	00 00       	nop
  18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__vector_6>
  1a:	00 00       	nop
  1c:	b6 c3       	rjmp	.+1900   	; 0x78a <__vector_7>
  1e:	00 00       	nop
  20:	e4 c3       	rjmp	.+1992   	; 0x7ea <__vector_8>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4f c4       	rjmp	.+2206   	; 0x8fc <__vector_23>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c3       	rjmp	.+1656   	; 0x6ee <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee eb       	ldi	r30, 0xBE	; 190
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 33       	cpi	r26, 0x36	; 54
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	a6 e3       	ldi	r26, 0x36	; 54
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ae 33       	cpi	r26, 0x3E	; 62
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	dd d2       	rcall	.+1466   	; 0x68a <main>
  d0:	74 c4       	rjmp	.+2280   	; 0x9ba <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <init_adc>:

volatile uint16_t ADC_Min_result;
bool ADC_keep_running;

extern void init_adc(){
	ADMUX = (1<< REFS0)|(1<<MUX0);			// Left adjust, and use VCC as top reference
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADIE);							//Set the values of the ADC Enable and ADC Interrupt Enable bits to 1
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 = (1<<ADC1D);									//Turns off the digital input buffer for ADC1 on PF1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	ADC_Min_result = 0xFFFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <ADC_Min_result+0x1>
  ee:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ADC_Min_result>
	ADC_keep_running = false;
  f2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ADC_keep_running>
  f6:	08 95       	ret

000000f8 <adc_start_conv>:
	ADCSRA |= _BV(ADSC);
}

extern inline void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <adc_stop_conv>:
	//PORTA ^= 0x20;
}

extern inline void adc_stop_conv(){
	ADC_Min_result = 0xFFFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	9f ef       	ldi	r25, 0xFF	; 255
 108:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <ADC_Min_result+0x1>
 10c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ADC_Min_result>
 110:	08 95       	ret

00000112 <read_Min_ADC>:
}


extern uint16_t read_Min_ADC(){
	return ADC_Min_result;
 112:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ADC_Min_result>
 116:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ADC_Min_result+0x1>
}
 11a:	08 95       	ret

0000011c <ADC_interrupt>:

extern void ADC_interrupt(){
	ADC_result = ADC;
 11c:	e8 e7       	ldi	r30, 0x78	; 120
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	91 81       	ldd	r25, Z+1	; 0x01
 124:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <ADC_result+0x1>
 128:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <ADC_result>
	if(ADC_Min_result > ADC){
 12c:	20 81       	ld	r18, Z
 12e:	31 81       	ldd	r19, Z+1	; 0x01
 130:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ADC_Min_result>
 134:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ADC_Min_result+0x1>
 138:	28 17       	cp	r18, r24
 13a:	39 07       	cpc	r19, r25
 13c:	40 f4       	brcc	.+16     	; 0x14e <ADC_interrupt+0x32>
		ADC_Min_result = ADC;
 13e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 142:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 146:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <ADC_Min_result+0x1>
 14a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ADC_Min_result>
	ADCSRA |= _BV(ADSC);
}

extern inline void adc_start_conv(){
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <buf_init>:
#include "usart.h"
#include <stdlib.h>
#include <avr/io.h>

extern void buf_init(){
	most_recent_pushed_idx = 0;
 15a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <most_recent_pushed_idx>
	current_push_idx = 0;
 15e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <current_push_idx>
	first_on_belt = 0;
 162:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <first_on_belt>
	most_recent_idx_to_past_second_prox_sensor = 0;
 166:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <most_recent_idx_to_past_second_prox_sensor>
 16a:	08 95       	ret

0000016c <buf_new>:
}

extern void buf_new(){
	if(buf_length <= BUFFER_SIZE){
 16c:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <buf_length>
 170:	23 33       	cpi	r18, 0x33	; 51
 172:	e8 f4       	brcc	.+58     	; 0x1ae <buf_new+0x42>
		//Save the item to the buffer
		//belt[current_push_idx].assumed_material = Black;
		belt[current_push_idx].last_stage = Promixity_stage;
 174:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <current_push_idx>
 178:	83 2f       	mov	r24, r19
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e8 0f       	add	r30, r24
 188:	f9 1f       	adc	r31, r25
 18a:	ef 5b       	subi	r30, 0xBF	; 191
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	44 83       	std	Z+4, r20	; 0x04
		belt[current_push_idx].magnetic = false;
 192:	12 82       	std	Z+2, r1	; 0x02
		belt[current_push_idx].max_adc = 0;
 194:	11 82       	std	Z+1, r1	; 0x01
 196:	10 82       	st	Z, r1

		//Increment the variables for next time		
		most_recent_pushed_idx = current_push_idx;
 198:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <most_recent_pushed_idx>
		current_push_idx = (current_push_idx + 1) % BUFFER_SIZE;
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	62 e3       	ldi	r22, 0x32	; 50
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	d5 d3       	rcall	.+1962   	; 0x94e <__divmodhi4>
 1a4:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <current_push_idx>
		buf_length++;
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <buf_length>
 1ae:	08 95       	ret

000001b0 <set_first_item>:
	}
}

extern set_first_item(Materials mat, Stage stag){
	belt[first_on_belt].assumed_material = mat;
 1b0:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <first_on_belt>
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	9f 01       	movw	r18, r30
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	e2 0f       	add	r30, r18
 1c2:	f3 1f       	adc	r31, r19
 1c4:	ef 5b       	subi	r30, 0xBF	; 191
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	83 83       	std	Z+3, r24	; 0x03
	belt[first_on_belt].last_stage = stag;
 1ca:	64 83       	std	Z+4, r22	; 0x04
}
 1cc:	08 95       	ret

000001ce <set_second_prox_sensor_item>:

extern set_second_prox_sensor_item(Materials mat, Stage stag){
	belt[most_recent_idx_to_past_second_prox_sensor].assumed_material = mat;
 1ce:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <most_recent_idx_to_past_second_prox_sensor>
 1d2:	e9 2f       	mov	r30, r25
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	9f 01       	movw	r18, r30
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	e2 0f       	add	r30, r18
 1e2:	f3 1f       	adc	r31, r19
 1e4:	ef 5b       	subi	r30, 0xBF	; 191
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	83 83       	std	Z+3, r24	; 0x03
	belt[most_recent_idx_to_past_second_prox_sensor].last_stage = stag;
 1ea:	64 83       	std	Z+4, r22	; 0x04
	most_recent_idx_to_past_second_prox_sensor++;
 1ec:	9f 5f       	subi	r25, 0xFF	; 255
 1ee:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <most_recent_idx_to_past_second_prox_sensor>
}
 1f2:	08 95       	ret

000001f4 <buf_is_magnetic>:

extern buf_is_magnetic(){
	belt[most_recent_pushed_idx].magnetic = true;
 1f4:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <most_recent_pushed_idx>
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	cf 01       	movw	r24, r30
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	e8 0f       	add	r30, r24
 206:	f9 1f       	adc	r31, r25
 208:	ef 5b       	subi	r30, 0xBF	; 191
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	82 83       	std	Z+2, r24	; 0x02
	belt[most_recent_pushed_idx].assumed_material = Steel;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	83 83       	std	Z+3, r24	; 0x03
}
 214:	08 95       	ret

00000216 <buf_get_first_item_material>:

extern inline Materials buf_get_first_item_material(){
	return belt[first_on_belt].assumed_material;
 216:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <first_on_belt>
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	8e 0f       	add	r24, r30
 228:	9f 1f       	adc	r25, r31
 22a:	fc 01       	movw	r30, r24
 22c:	ef 5b       	subi	r30, 0xBF	; 191
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
}
 230:	83 81       	ldd	r24, Z+3	; 0x03
 232:	08 95       	ret

00000234 <remove_first_item>:

extern inline remove_first_item(){
	belt[first_on_belt].last_stage = Complete;
 234:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <first_on_belt>
 238:	82 2f       	mov	r24, r18
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	8e 0f       	add	r24, r30
 248:	9f 1f       	adc	r25, r31
 24a:	fc 01       	movw	r30, r24
 24c:	ef 5b       	subi	r30, 0xBF	; 191
 24e:	fe 4f       	sbci	r31, 0xFE	; 254
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	84 83       	std	Z+4, r24	; 0x04
	first_on_belt++;
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <first_on_belt>
}
 25a:	08 95       	ret

0000025c <init_interrupt>:

#include <avr/io.h>

void init_interrupt(){
	//EICRA |= _BV(ISC00);
	EICRA |= _BV(ISC00);
 25c:	e9 e6       	ldi	r30, 0x69	; 105
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
	
	//Stepper motor at home, active low
	EICRB |= _BV(ISC51);
 266:	ea e6       	ldi	r30, 0x6A	; 106
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	80 83       	st	Z, r24
	
	//First promixity sensor, active low
	EICRB |= _BV(ISC41);
 270:	80 81       	ld	r24, Z
 272:	82 60       	ori	r24, 0x02	; 2
 274:	80 83       	st	Z, r24
	
	//Last promixity sensor, active low
	EICRB |= _BV(ISC61);
 276:	80 81       	ld	r24, Z
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	80 83       	st	Z, r24
	
	//Magnetic detection sensor, active low
	EICRB |= _BV(ISC71);
 27c:	80 81       	ld	r24, Z
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	80 83       	st	Z, r24
	
	EIMSK |= 0b11110001;
 282:	8d b3       	in	r24, 0x1d	; 29
 284:	81 6f       	ori	r24, 0xF1	; 241
 286:	8d bb       	out	0x1d, r24	; 29
 288:	08 95       	ret

0000028a <init_led>:
	}else{
		PORTA >>= 1;	
	}
	
	current_LED++;
	current_LED %= 10;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	81 b9       	out	0x01, r24	; 1
 28e:	8a b1       	in	r24, 0x0a	; 10
 290:	80 6f       	ori	r24, 0xF0	; 240
 292:	8a b9       	out	0x0a, r24	; 10
 294:	12 b8       	out	0x02, r1	; 2
 296:	08 95       	ret

00000298 <status_leds>:
}

extern void status_leds(Status_LED_Position pos, Status_LED_Colour colour){
		if(pos == top){
 298:	86 30       	cpi	r24, 0x06	; 6
 29a:	89 f4       	brne	.+34     	; 0x2be <status_leds+0x26>
			PORTD &= ~0xC0;
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	8f 73       	andi	r24, 0x3F	; 63
 2a0:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 2a2:	63 30       	cpi	r22, 0x03	; 3
 2a4:	21 f4       	brne	.+8      	; 0x2ae <status_leds+0x16>
				PORTD |= 0xC0;	
 2a6:	8b b1       	in	r24, 0x0b	; 11
 2a8:	80 6c       	ori	r24, 0xC0	; 192
 2aa:	8b b9       	out	0x0b, r24	; 11
 2ac:	08 95       	ret
			}else if(colour == red){
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <status_leds+0x1e>
				PORTD |= 0x80;
 2b2:	5f 9a       	sbi	0x0b, 7	; 11
 2b4:	08 95       	ret
			}else if(colour == green){
 2b6:	62 30       	cpi	r22, 0x02	; 2
 2b8:	81 f4       	brne	.+32     	; 0x2da <status_leds+0x42>
				PORTD |= 0x40;
 2ba:	5e 9a       	sbi	0x0b, 6	; 11
 2bc:	08 95       	ret
			}else{
				
			}
		}else{
			PORTD &= ~0x30;
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	8f 7c       	andi	r24, 0xCF	; 207
 2c2:	8b b9       	out	0x0b, r24	; 11
			if(colour == orange){
 2c4:	63 30       	cpi	r22, 0x03	; 3
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <status_leds+0x38>
				PORTD |= 0x30;
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	80 63       	ori	r24, 0x30	; 48
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	08 95       	ret
			}else if(colour == red){
 2d0:	61 30       	cpi	r22, 0x01	; 1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <status_leds+0x40>
				PORTD |= 0x10;
 2d4:	5c 9a       	sbi	0x0b, 4	; 11
 2d6:	08 95       	ret
			}else if(colour = green){
				PORTD |= 0x20;
 2d8:	5d 9a       	sbi	0x0b, 5	; 11
 2da:	08 95       	ret

000002dc <mTimerConfig>:
#include "mtimer.h"

extern void mTimerConfig()
{
	/* Insert system clock initialization code here (sysclk_init()). */
	TCCR1B |= _BV(CS10);
 2dc:	e1 e8       	ldi	r30, 0x81	; 129
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	80 83       	st	Z, r24
 2e6:	08 95       	ret

000002e8 <timer0_init>:
}

extern void timer0_init()
{
	TCCR1B |= _BV(CS10);
 2e8:	e1 e8       	ldi	r30, 0x81	; 129
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
	TIMSK0 |= _BV(TOIE1);
 2f2:	ee e6       	ldi	r30, 0x6E	; 110
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <mTimer>:
}

extern void mTimer(int count)
{
 2fe:	ac 01       	movw	r20, r24
	int i = 0;
	
	TCCR1B |= _BV(WGM12); /*CTC mode*/
 300:	e1 e8       	ldi	r30, 0x81	; 129
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	98 60       	ori	r25, 0x08	; 8
 308:	90 83       	st	Z, r25
	
	OCR1A = 0x03e8; //1000
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	93 e0       	ldi	r25, 0x03	; 3
 30e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 312:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCNT1 = 0x0000;
 316:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 31a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
 31e:	b1 9a       	sbi	0x16, 1	; 22
	TIMSK0 |= _BV(TOIE1);
}

extern void mTimer(int count)
{
	int i = 0;
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 324:	05 c0       	rjmp	.+10     	; 0x330 <mTimer+0x32>
	{
		if ((TIFR1 & 0x02) == 0x02)
 326:	b1 9b       	sbis	0x16, 1	; 22
 328:	fe cf       	rjmp	.-4      	; 0x326 <mTimer+0x28>
		{
			TIFR1 |= _BV(OCF1A);
 32a:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 32c:	2f 5f       	subi	r18, 0xFF	; 255
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//TIMSK1 |= 0b00000010;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i < count)
 330:	24 17       	cp	r18, r20
 332:	35 07       	cpc	r19, r21
 334:	1c f4       	brge	.+6      	; 0x33c <mTimer+0x3e>
	{
		if ((TIFR1 & 0x02) == 0x02)
 336:	b1 9b       	sbis	0x16, 1	; 22
 338:	f6 cf       	rjmp	.-20     	; 0x326 <mTimer+0x28>
 33a:	f7 cf       	rjmp	.-18     	; 0x32a <mTimer+0x2c>
 33c:	08 95       	ret

0000033e <init_pwm>:
#define IB	(0x2)
#define EB	(0x8)

extern void init_pwm(){
	//Turn on B7 to output mode
	DDRB |= 0x8F; 
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	8f 68       	ori	r24, 0x8F	; 143
 342:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A =(1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//Set timer counter compare register to Fast PWM
 344:	83 e8       	ldi	r24, 0x83	; 131
 346:	84 bd       	out	0x24, r24	; 36

	TCCR0B = (1<<CS01) | (1<<CS00);
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 34c:	17 bc       	out	0x27, r1	; 39
 34e:	08 95       	ret

00000350 <set_dc_motor_speed>:
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 350:	87 bd       	out	0x27, r24	; 39
 352:	08 95       	ret

00000354 <set_motor_setting>:
	set_motor_setting(Brake_to_VCC);
}

extern void set_motor_setting(Motor_Setting setting){
	//Force all settings to off
	PORTB &= ~(IA | IB | EA | EB);
 354:	95 b1       	in	r25, 0x05	; 5
 356:	90 7f       	andi	r25, 0xF0	; 240
 358:	95 b9       	out	0x05, r25	; 5
	
	if(setting == DC_Motor_Clockwise){
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	11 f4       	brne	.+4      	; 0x362 <set_motor_setting+0xe>
		PORTB |= IB;
 35e:	29 9a       	sbi	0x05, 1	; 5
 360:	08 95       	ret
	}
	else if (setting == DC_Motor_Counter_Clockwise){
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	09 f4       	brne	.+2      	; 0x368 <set_motor_setting+0x14>
		PORTB |= IA;
 366:	2a 9a       	sbi	0x05, 2	; 5
 368:	08 95       	ret

0000036a <stop_pwm>:
	TCCR0B = (1<<CS01) | (1<<CS00);
	OCR0A = 0;
}

extern inline void set_dc_motor_speed(uint8_t speed){
	OCR0A = speed;
 36a:	17 bc       	out	0x27, r1	; 39
}

extern inline void stop_pwm(){
	set_dc_motor_speed(0);
	set_motor_setting(Brake_to_VCC);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	f2 cf       	rjmp	.-28     	; 0x354 <set_motor_setting>
 370:	08 95       	ret

00000372 <init_stepper>:
	return stepper_material_position;
}

extern bool check_if_home(){
	return (bool)(home_flag); 
}
 372:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <home_flag>
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	87 b9       	out	0x07, r24	; 7
 37a:	08 95       	ret

0000037c <step>:
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	79 f4       	brne	.+30     	; 0x39e <step+0x22>
 380:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	83 70       	andi	r24, 0x03	; 3
 38a:	90 78       	andi	r25, 0x80	; 128
 38c:	99 23       	and	r25, r25
 38e:	24 f4       	brge	.+8      	; 0x398 <step+0x1c>
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	8c 6f       	ori	r24, 0xFC	; 252
 394:	9f 6f       	ori	r25, 0xFF	; 255
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 39c:	0b c0       	rjmp	.+22     	; 0x3b4 <step+0x38>
 39e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 3a2:	81 11       	cpse	r24, r1
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <step+0x32>
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <step+0x38>
 3ae:	81 50       	subi	r24, 0x01	; 1
 3b0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
 3b4:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	ef 5f       	subi	r30, 0xFF	; 255
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	80 81       	ld	r24, Z
 3c4:	88 b9       	out	0x08, r24	; 8
 3c6:	08 95       	ret

000003c8 <get_current_stepper_material>:
 3c8:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
 3cc:	08 95       	ret

000003ce <block_till_stepper_home>:

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 3ce:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <home_flag>
 3d2:	81 11       	cpse	r24, r1
 3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <block_till_stepper_home+0x1a>
		step(Clock_Wise);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	d1 df       	rcall	.-94     	; 0x37c <step>
		mTimer(STEP_TIME_MS);
 3da:	8f e0       	ldi	r24, 0x0F	; 15
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	8f df       	rcall	.-226    	; 0x2fe <mTimer>
extern bool check_if_home(){
	return (bool)(home_flag); 
}

extern void block_till_stepper_home(){
	while (check_if_home() == false){
 3e0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <home_flag>
 3e4:	88 23       	and	r24, r24
 3e6:	b9 f3       	breq	.-18     	; 0x3d6 <block_till_stepper_home+0x8>
		step(Clock_Wise);
		mTimer(STEP_TIME_MS);
	}
	stepper_material_position = Black;
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <stepper_material_position>
 3ee:	08 95       	ret

000003f0 <stepper_repeat_steps>:
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
	for(uint8_t i = 0; i < steps; i++){
 3f6:	88 23       	and	r24, r24
 3f8:	59 f0       	breq	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fa:	16 2f       	mov	r17, r22
 3fc:	d8 2f       	mov	r29, r24
 3fe:	c0 e0       	ldi	r28, 0x00	; 0
		step(dir);
 400:	81 2f       	mov	r24, r17
 402:	bc df       	rcall	.-136    	; 0x37c <step>
		mTimer(STEP_TIME_MS);
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	7a df       	rcall	.-268    	; 0x2fe <mTimer>
	}
	stepper_material_position = Black;
}

extern void stepper_repeat_steps(uint8_t steps, stepper_direction dir){
	for(uint8_t i = 0; i < steps; i++){
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	dc 13       	cpse	r29, r28
 40e:	f8 cf       	rjmp	.-16     	; 0x400 <__LOCK_REGION_LENGTH__>
		step(dir);
		mTimer(STEP_TIME_MS);
	}
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <go_to_material>:

extern void go_to_material(Materials mat){
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
	if(stepper_material_position == Black){
 41c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	79 f4       	brne	.+30     	; 0x442 <go_to_material+0x2a>
		if(mat == Steel){
 424:	c2 30       	cpi	r28, 0x02	; 2
 426:	21 f4       	brne	.+8      	; 0x430 <go_to_material+0x18>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 428:	6f ef       	ldi	r22, 0xFF	; 255
 42a:	82 e3       	ldi	r24, 0x32	; 50
 42c:	e1 df       	rcall	.-62     	; 0x3f0 <stepper_repeat_steps>
 42e:	49 c0       	rjmp	.+146    	; 0x4c2 <go_to_material+0xaa>
		}else if(mat == Aluminum){
 430:	c1 11       	cpse	r28, r1
 432:	04 c0       	rjmp	.+8      	; 0x43c <go_to_material+0x24>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	82 e3       	ldi	r24, 0x32	; 50
 438:	db df       	rcall	.-74     	; 0x3f0 <stepper_repeat_steps>
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 43a:	43 c0       	rjmp	.+134    	; 0x4c2 <go_to_material+0xaa>
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	84 e6       	ldi	r24, 0x64	; 100
		}
	}
	if(stepper_material_position == Steel){
 440:	d7 df       	rcall	.-82     	; 0x3f0 <stepper_repeat_steps>
 442:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
 446:	82 30       	cpi	r24, 0x02	; 2
		if(mat == White)
 448:	79 f4       	brne	.+30     	; 0x468 <go_to_material+0x50>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 44a:	c1 30       	cpi	r28, 0x01	; 1
 44c:	21 f4       	brne	.+8      	; 0x456 <go_to_material+0x3e>
 44e:	6f ef       	ldi	r22, 0xFF	; 255
 450:	82 e3       	ldi	r24, 0x32	; 50
		else if(mat == Black)
 452:	ce df       	rcall	.-100    	; 0x3f0 <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 454:	3b c0       	rjmp	.+118    	; 0x4cc <go_to_material+0xb4>
 456:	c3 30       	cpi	r28, 0x03	; 3
 458:	21 f4       	brne	.+8      	; 0x462 <go_to_material+0x4a>
 45a:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 45c:	82 e3       	ldi	r24, 0x32	; 50
 45e:	c8 df       	rcall	.-112    	; 0x3f0 <stepper_repeat_steps>
 460:	35 c0       	rjmp	.+106    	; 0x4cc <go_to_material+0xb4>
 462:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(stepper_material_position == White){
 464:	84 e6       	ldi	r24, 0x64	; 100
 466:	c4 df       	rcall	.-120    	; 0x3f0 <stepper_repeat_steps>
 468:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
		if(mat == Aluminum)
 46c:	81 30       	cpi	r24, 0x01	; 1
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 46e:	79 f4       	brne	.+30     	; 0x48e <go_to_material+0x76>
 470:	c1 11       	cpse	r28, r1
 472:	04 c0       	rjmp	.+8      	; 0x47c <go_to_material+0x64>
 474:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == Steel)
 476:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 478:	bb df       	rcall	.-138    	; 0x3f0 <stepper_repeat_steps>
 47a:	2d c0       	rjmp	.+90     	; 0x4d6 <go_to_material+0xbe>
 47c:	c2 30       	cpi	r28, 0x02	; 2
 47e:	21 f4       	brne	.+8      	; 0x488 <go_to_material+0x70>
 480:	61 e0       	ldi	r22, 0x01	; 1
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 482:	82 e3       	ldi	r24, 0x32	; 50
 484:	b5 df       	rcall	.-150    	; 0x3f0 <stepper_repeat_steps>
 486:	27 c0       	rjmp	.+78     	; 0x4d6 <go_to_material+0xbe>
	}
	if(stepper_material_position == Aluminum){
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	84 e6       	ldi	r24, 0x64	; 100
 48c:	b1 df       	rcall	.-158    	; 0x3f0 <stepper_repeat_steps>
 48e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
		if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Counter_Clock_Wise);
 492:	81 11       	cpse	r24, r1
 494:	13 c0       	rjmp	.+38     	; 0x4bc <go_to_material+0xa4>
 496:	c3 30       	cpi	r28, 0x03	; 3
 498:	21 f4       	brne	.+8      	; 0x4a2 <go_to_material+0x8a>
 49a:	6f ef       	ldi	r22, 0xFF	; 255
		else if(mat == White){
 49c:	82 e3       	ldi	r24, 0x32	; 50
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
 49e:	a8 df       	rcall	.-176    	; 0x3f0 <stepper_repeat_steps>
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <go_to_material+0xa4>
 4a2:	c1 30       	cpi	r28, 0x01	; 1
			PORTA ^= 0x04;
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <go_to_material+0x9e>
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	82 e3       	ldi	r24, 0x32	; 50
 4aa:	a2 df       	rcall	.-188    	; 0x3f0 <stepper_repeat_steps>
 4ac:	92 b1       	in	r25, 0x02	; 2
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	89 27       	eor	r24, r25
 4b2:	82 b9       	out	0x02, r24	; 2
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <go_to_material+0xa4>
	}//*/
	stepper_material_position = mat;
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	84 e6       	ldi	r24, 0x64	; 100
}
 4ba:	9a df       	rcall	.-204    	; 0x3f0 <stepper_repeat_steps>
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		}else{
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
		}
	}
	if(stepper_material_position == Steel){
 4bc:	c0 93 3d 02 	sts	0x023D, r28	; 0x80023d <stepper_material_position>
 4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <go_to_material+0xc8>
 4c2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
		else if(mat == Black)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == White){
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	79 f6       	brne	.-98     	; 0x468 <go_to_material+0x50>
 4ca:	cb cf       	rjmp	.-106    	; 0x462 <go_to_material+0x4a>
 4cc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
		else if(mat == Steel)
			stepper_repeat_steps(STEPS_FOR_90_DEGREES, Clock_Wise);
		else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}
	if(stepper_material_position == Aluminum){
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	e9 f6       	brne	.-70     	; 0x48e <go_to_material+0x76>
 4d4:	d9 cf       	rjmp	.-78     	; 0x488 <go_to_material+0x70>
 4d6:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <stepper_material_position>
			PORTA ^= 0x04;
		}else
			stepper_repeat_steps(STEPS_FOR_180_DEGREES, Clock_Wise);
	}//*/
	stepper_material_position = mat;
}
 4da:	88 23       	and	r24, r24
 4dc:	61 f3       	breq	.-40     	; 0x4b6 <go_to_material+0x9e>
 4de:	ee cf       	rjmp	.-36     	; 0x4bc <go_to_material+0xa4>
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <__vector_6>:

ISR(INT5_vect){
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	8f 93       	push	r24
	home_flag = true;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <home_flag>
 4f6:	8f 91       	pop	r24
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <usartInit>:
#include "mtimer.h"

extern void usartInit (uint16_t baud)
{
	//Set baud rate
	UBRR1H = (uint8_t)(baud >> 8);
 502:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(baud);
 506:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1A |= DoubSpeed;
 50a:	e8 ec       	ldi	r30, 0xC8	; 200
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	82 60       	ori	r24, 0x02	; 2
 512:	80 83       	st	Z, r24
	
	UCSR1B |= TxEn;			//Enable TX mode for USART1
 514:	e9 ec       	ldi	r30, 0xC9	; 201
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	88 60       	ori	r24, 0x08	; 8
 51c:	80 83       	st	Z, r24
	//UCSR1B |= RxEn;		//Enable RX mode for USART1
	UCSR1C |= Mode8Bit;		//Set Usart to 8 bit data mode
 51e:	ea ec       	ldi	r30, 0xCA	; 202
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	86 60       	ori	r24, 0x06	; 6
 526:	80 83       	st	Z, r24
 528:	08 95       	ret

0000052a <usartTX>:
//This function displace one char at a time on the serial port
//
//Pass this function a char.
extern void usartTX (unsigned char data)
{
	while (!(UCSR1A & TxBuffRdy));	//Wait for the TX buffer to be ready for data
 52a:	e8 ec       	ldi	r30, 0xC8	; 200
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	90 81       	ld	r25, Z
 530:	95 ff       	sbrs	r25, 5
 532:	fd cf       	rjmp	.-6      	; 0x52e <usartTX+0x4>
	
	UDR1 = data;
 534:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 538:	08 95       	ret

0000053a <usartTXs>:
}
//This function can display strings on the serial port by calling the display char
//function.
//Pass this function a string.
extern void usartTXs (const char *string)
{
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	fc 01       	movw	r30, r24
	uint8_t c = 0;
	
	while (string [c] != 0)
 542:	80 81       	ld	r24, Z
 544:	88 23       	and	r24, r24
 546:	51 f0       	breq	.+20     	; 0x55c <usartTXs+0x22>
 548:	8f 01       	movw	r16, r30
	{
		usartTX(string[c]);
 54a:	c0 e0       	ldi	r28, 0x00	; 0
		c++;
 54c:	ee df       	rcall	.-36     	; 0x52a <usartTX>
//Pass this function a string.
extern void usartTXs (const char *string)
{
	uint8_t c = 0;
	
	while (string [c] != 0)
 54e:	cf 5f       	subi	r28, 0xFF	; 255
 550:	f8 01       	movw	r30, r16
 552:	ec 0f       	add	r30, r28
 554:	f1 1d       	adc	r31, r1
 556:	80 81       	ld	r24, Z
 558:	81 11       	cpse	r24, r1
	{
		usartTX(string[c]);
		c++;
	}
}
 55a:	f8 cf       	rjmp	.-16     	; 0x54c <usartTXs+0x12>
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <usartNumTXs>:

extern void usartNumTXs(uint16_t num){
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	8c 01       	movw	r16, r24

	usartTX((char)(((num/1000)%10) + 48));
 56e:	9c 01       	movw	r18, r24
 570:	36 95       	lsr	r19
 572:	27 95       	ror	r18
 574:	36 95       	lsr	r19
 576:	27 95       	ror	r18
 578:	36 95       	lsr	r19
 57a:	27 95       	ror	r18
 57c:	a5 ec       	ldi	r26, 0xC5	; 197
 57e:	b0 e2       	ldi	r27, 0x20	; 32
 580:	f9 d1       	rcall	.+1010   	; 0x974 <__umulhisi3>
 582:	ac 01       	movw	r20, r24
 584:	52 95       	swap	r21
 586:	42 95       	swap	r20
 588:	4f 70       	andi	r20, 0x0F	; 15
 58a:	45 27       	eor	r20, r21
 58c:	5f 70       	andi	r21, 0x0F	; 15
 58e:	45 27       	eor	r20, r21
 590:	9a 01       	movw	r18, r20
 592:	ad ec       	ldi	r26, 0xCD	; 205
 594:	bc ec       	ldi	r27, 0xCC	; 204
 596:	ee d1       	rcall	.+988    	; 0x974 <__umulhisi3>
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	9c 01       	movw	r18, r24
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	82 0f       	add	r24, r18
 5b8:	93 1f       	adc	r25, r19
 5ba:	9a 01       	movw	r18, r20
 5bc:	28 1b       	sub	r18, r24
 5be:	39 0b       	sbc	r19, r25
 5c0:	c9 01       	movw	r24, r18
 5c2:	80 5d       	subi	r24, 0xD0	; 208
 5c4:	b2 df       	rcall	.-156    	; 0x52a <usartTX>
	usartTX((char)(((num/100)%10) + 48));
 5c6:	98 01       	movw	r18, r16
 5c8:	36 95       	lsr	r19
 5ca:	27 95       	ror	r18
 5cc:	36 95       	lsr	r19
 5ce:	27 95       	ror	r18
 5d0:	ab e7       	ldi	r26, 0x7B	; 123
 5d2:	b4 e1       	ldi	r27, 0x14	; 20
 5d4:	cf d1       	rcall	.+926    	; 0x974 <__umulhisi3>
 5d6:	ac 01       	movw	r20, r24
 5d8:	56 95       	lsr	r21
 5da:	47 95       	ror	r20
 5dc:	9a 01       	movw	r18, r20
 5de:	ad ec       	ldi	r26, 0xCD	; 205
 5e0:	bc ec       	ldi	r27, 0xCC	; 204
 5e2:	c8 d1       	rcall	.+912    	; 0x974 <__umulhisi3>
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	9c 01       	movw	r18, r24
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	82 0f       	add	r24, r18
 604:	93 1f       	adc	r25, r19
 606:	9a 01       	movw	r18, r20
 608:	28 1b       	sub	r18, r24
 60a:	39 0b       	sbc	r19, r25
 60c:	c9 01       	movw	r24, r18
 60e:	80 5d       	subi	r24, 0xD0	; 208
	usartTX((char)(((num/10)%10) + 48));
 610:	8c df       	rcall	.-232    	; 0x52a <usartTX>
 612:	98 01       	movw	r18, r16
 614:	ad ec       	ldi	r26, 0xCD	; 205
 616:	bc ec       	ldi	r27, 0xCC	; 204
 618:	ad d1       	rcall	.+858    	; 0x974 <__umulhisi3>
 61a:	ec 01       	movw	r28, r24
 61c:	d6 95       	lsr	r29
 61e:	c7 95       	ror	r28
 620:	d6 95       	lsr	r29
 622:	c7 95       	ror	r28
 624:	d6 95       	lsr	r29
 626:	c7 95       	ror	r28
 628:	9e 01       	movw	r18, r28
 62a:	a4 d1       	rcall	.+840    	; 0x974 <__umulhisi3>
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	9c 01       	movw	r18, r24
 63a:	22 0f       	add	r18, r18
 63c:	33 1f       	adc	r19, r19
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	82 0f       	add	r24, r18
 64c:	93 1f       	adc	r25, r19
 64e:	9e 01       	movw	r18, r28
 650:	28 1b       	sub	r18, r24
 652:	39 0b       	sbc	r19, r25
 654:	c9 01       	movw	r24, r18
 656:	80 5d       	subi	r24, 0xD0	; 208
 658:	68 df       	rcall	.-304    	; 0x52a <usartTX>
	usartTX((char)((num%10) + 48));
 65a:	ce 01       	movw	r24, r28
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	cc 0f       	add	r28, r28
 662:	dd 1f       	adc	r29, r29
 664:	cc 0f       	add	r28, r28
 666:	dd 1f       	adc	r29, r29
 668:	cc 0f       	add	r28, r28
 66a:	dd 1f       	adc	r29, r29
 66c:	c8 0f       	add	r28, r24
 66e:	d9 1f       	adc	r29, r25
 670:	c8 01       	movw	r24, r16
 672:	8c 1b       	sub	r24, r28
 674:	9d 0b       	sbc	r25, r29
 676:	80 5d       	subi	r24, 0xD0	; 208
	usartTXs("\r\n");
 678:	58 df       	rcall	.-336    	; 0x52a <usartTX>
 67a:	83 e1       	ldi	r24, 0x13	; 19
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	5d df       	rcall	.-326    	; 0x53a <usartTXs>
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	08 95       	ret

0000068a <main>:
int main()
{	
	cli();
	mTimerConfig();
	init_led();
	init_interrupt();
 68a:	f8 94       	cli
 68c:	27 de       	rcall	.-946    	; 0x2dc <mTimerConfig>
 68e:	fd dd       	rcall	.-1030   	; 0x28a <init_led>
 690:	e5 dd       	rcall	.-1078   	; 0x25c <init_interrupt>
 692:	6f de       	rcall	.-802    	; 0x372 <init_stepper>
 694:	54 de       	rcall	.-856    	; 0x33e <init_pwm>
 696:	1e dd       	rcall	.-1476   	; 0xd4 <init_adc>
 698:	60 dd       	rcall	.-1344   	; 0x15a <buf_init>
 69a:	8c e0       	ldi	r24, 0x0C	; 12
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	31 df       	rcall	.-414    	; 0x502 <usartInit>
 6a0:	23 de       	rcall	.-954    	; 0x2e8 <timer0_init>
 6a2:	78 94       	sei
 6a4:	89 e0       	ldi	r24, 0x09	; 9
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	48 df       	rcall	.-368    	; 0x53a <usartTXs>
 6aa:	88 ec       	ldi	r24, 0xC8	; 200
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	27 de       	rcall	.-946    	; 0x2fe <mTimer>
 6b0:	8e de       	rcall	.-740    	; 0x3ce <block_till_stepper_home>
 6b2:	88 ec       	ldi	r24, 0xC8	; 200
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	23 de       	rcall	.-954    	; 0x2fe <mTimer>
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	4c de       	rcall	.-872    	; 0x354 <set_motor_setting>
 6bc:	8e e1       	ldi	r24, 0x1E	; 30
 6be:	48 de       	rcall	.-880    	; 0x350 <set_dc_motor_speed>
 6c0:	1b dd       	rcall	.-1482   	; 0xf8 <adc_start_conv>
 6c2:	63 e0       	ldi	r22, 0x03	; 3
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	74 dd       	rcall	.-1304   	; 0x1b0 <set_first_item>
 6c8:	88 ec       	ldi	r24, 0xC8	; 200
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	18 de       	rcall	.-976    	; 0x2fe <mTimer>
 6ce:	a3 dd       	rcall	.-1210   	; 0x216 <buf_get_first_item_material>
 6d0:	c8 2f       	mov	r28, r24
 6d2:	7a de       	rcall	.-780    	; 0x3c8 <get_current_stepper_material>
 6d4:	c8 13       	cpse	r28, r24
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <main+0x58>
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	3c de       	rcall	.-904    	; 0x354 <set_motor_setting>
 6dc:	8e e1       	ldi	r24, 0x1E	; 30
 6de:	38 de       	rcall	.-912    	; 0x350 <set_dc_motor_speed>
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <main+0x5c>
 6e2:	99 dd       	rcall	.-1230   	; 0x216 <buf_get_first_item_material>
 6e4:	99 de       	rcall	.-718    	; 0x418 <go_to_material>
 6e6:	84 e6       	ldi	r24, 0x64	; 100
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	09 de       	rcall	.-1006   	; 0x2fe <mTimer>
 6ec:	f0 cf       	rjmp	.-32     	; 0x6ce <main+0x44>

000006ee <__vector_29>:
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	0b b6       	in	r0, 0x3b	; 59
 6fa:	0f 92       	push	r0
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
 714:	03 dd       	rcall	.-1530   	; 0x11c <ADC_interrupt>
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	0f 90       	pop	r0
 730:	0b be       	out	0x3b, r0	; 59
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__vector_5>:
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	0b b6       	in	r0, 0x3b	; 59
 748:	0f 92       	push	r0
 74a:	2f 93       	push	r18
 74c:	3f 93       	push	r19
 74e:	4f 93       	push	r20
 750:	5f 93       	push	r21
 752:	6f 93       	push	r22
 754:	7f 93       	push	r23
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
 75e:	ef 93       	push	r30
 760:	ff 93       	push	r31
 762:	04 dd       	rcall	.-1528   	; 0x16c <buf_new>
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0b be       	out	0x3b, r0	; 59
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <__vector_7>:
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	0b b6       	in	r0, 0x3b	; 59
 796:	0f 92       	push	r0
 798:	2f 93       	push	r18
 79a:	3f 93       	push	r19
 79c:	4f 93       	push	r20
 79e:	5f 93       	push	r21
 7a0:	6f 93       	push	r22
 7a2:	7f 93       	push	r23
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	af 93       	push	r26
 7aa:	bf 93       	push	r27
 7ac:	cf 93       	push	r28
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
 7b2:	0a de       	rcall	.-1004   	; 0x3c8 <get_current_stepper_material>
 7b4:	c8 2f       	mov	r28, r24
 7b6:	2f dd       	rcall	.-1442   	; 0x216 <buf_get_first_item_material>
 7b8:	c8 13       	cpse	r28, r24
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <__vector_7+0x36>
 7bc:	3b dd       	rcall	.-1418   	; 0x234 <remove_first_item>
 7be:	01 c0       	rjmp	.+2      	; 0x7c2 <__vector_7+0x38>
 7c0:	d4 dd       	rcall	.-1112   	; 0x36a <stop_pwm>
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	cf 91       	pop	r28
 7c8:	bf 91       	pop	r27
 7ca:	af 91       	pop	r26
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	7f 91       	pop	r23
 7d2:	6f 91       	pop	r22
 7d4:	5f 91       	pop	r21
 7d6:	4f 91       	pop	r20
 7d8:	3f 91       	pop	r19
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	0b be       	out	0x3b, r0	; 59
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_8>:
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	0b b6       	in	r0, 0x3b	; 59
 7f6:	0f 92       	push	r0
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	4f 93       	push	r20
 7fe:	5f 93       	push	r21
 800:	6f 93       	push	r22
 802:	7f 93       	push	r23
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31
 810:	f1 dc       	rcall	.-1566   	; 0x1f4 <buf_is_magnetic>
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	9f 91       	pop	r25
 81c:	8f 91       	pop	r24
 81e:	7f 91       	pop	r23
 820:	6f 91       	pop	r22
 822:	5f 91       	pop	r21
 824:	4f 91       	pop	r20
 826:	3f 91       	pop	r19
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0b be       	out	0x3b, r0	; 59
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <__vector_1>:
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	0b b6       	in	r0, 0x3b	; 59
 844:	0f 92       	push	r0
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	5f 93       	push	r21
 84e:	6f 93       	push	r22
 850:	7f 93       	push	r23
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
 85a:	ef 93       	push	r30
 85c:	ff 93       	push	r31
 85e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 862:	81 30       	cpi	r24, 0x01	; 1
 864:	31 f4       	brne	.+12     	; 0x872 <__vector_1+0x3a>
 866:	62 e0       	ldi	r22, 0x02	; 2
 868:	86 e0       	ldi	r24, 0x06	; 6
 86a:	16 dd       	rcall	.-1492   	; 0x298 <status_leds>
 86c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 870:	32 c0       	rjmp	.+100    	; 0x8d6 <__vector_1+0x9e>
 872:	63 e0       	ldi	r22, 0x03	; 3
 874:	86 e0       	ldi	r24, 0x06	; 6
 876:	10 dd       	rcall	.-1504   	; 0x298 <status_leds>
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 87e:	49 dc       	rcall	.-1902   	; 0x112 <read_Min_ADC>
 880:	82 b9       	out	0x02, r24	; 2
 882:	47 dc       	rcall	.-1906   	; 0x112 <read_Min_ADC>
 884:	8b 36       	cpi	r24, 0x6B	; 107
 886:	93 40       	sbci	r25, 0x03	; 3
 888:	38 f0       	brcs	.+14     	; 0x898 <__vector_1+0x60>
 88a:	86 e1       	ldi	r24, 0x16	; 22
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	55 de       	rcall	.-854    	; 0x53a <usartTXs>
 890:	63 e0       	ldi	r22, 0x03	; 3
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	9c dc       	rcall	.-1736   	; 0x1ce <set_second_prox_sensor_item>
 896:	1c c0       	rjmp	.+56     	; 0x8d0 <__vector_1+0x98>
 898:	3c dc       	rcall	.-1928   	; 0x112 <read_Min_ADC>
 89a:	8d 30       	cpi	r24, 0x0D	; 13
 89c:	93 40       	sbci	r25, 0x03	; 3
 89e:	38 f0       	brcs	.+14     	; 0x8ae <__vector_1+0x76>
 8a0:	8d e1       	ldi	r24, 0x1D	; 29
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	4a de       	rcall	.-876    	; 0x53a <usartTXs>
 8a6:	63 e0       	ldi	r22, 0x03	; 3
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	91 dc       	rcall	.-1758   	; 0x1ce <set_second_prox_sensor_item>
 8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <__vector_1+0x98>
 8ae:	31 dc       	rcall	.-1950   	; 0x112 <read_Min_ADC>
 8b0:	81 39       	cpi	r24, 0x91	; 145
 8b2:	91 40       	sbci	r25, 0x01	; 1
 8b4:	38 f0       	brcs	.+14     	; 0x8c4 <__vector_1+0x8c>
 8b6:	84 e2       	ldi	r24, 0x24	; 36
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	3f de       	rcall	.-898    	; 0x53a <usartTXs>
 8bc:	63 e0       	ldi	r22, 0x03	; 3
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	86 dc       	rcall	.-1780   	; 0x1ce <set_second_prox_sensor_item>
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__vector_1+0x98>
 8c4:	8b e2       	ldi	r24, 0x2B	; 43
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	38 de       	rcall	.-912    	; 0x53a <usartTXs>
 8ca:	63 e0       	ldi	r22, 0x03	; 3
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	7f dc       	rcall	.-1794   	; 0x1ce <set_second_prox_sensor_item>
 8d0:	20 dc       	rcall	.-1984   	; 0x112 <read_Min_ADC>
 8d2:	48 de       	rcall	.-880    	; 0x564 <usartNumTXs>
 8d4:	17 dc       	rcall	.-2002   	; 0x104 <adc_stop_conv>
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	bf 91       	pop	r27
 8dc:	af 91       	pop	r26
 8de:	9f 91       	pop	r25
 8e0:	8f 91       	pop	r24
 8e2:	7f 91       	pop	r23
 8e4:	6f 91       	pop	r22
 8e6:	5f 91       	pop	r21
 8e8:	4f 91       	pop	r20
 8ea:	3f 91       	pop	r19
 8ec:	2f 91       	pop	r18
 8ee:	0f 90       	pop	r0
 8f0:	0b be       	out	0x3b, r0	; 59
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <__vector_23>:
 8fc:	1f 92       	push	r1
 8fe:	0f 92       	push	r0
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	0f 92       	push	r0
 904:	11 24       	eor	r1, r1
 906:	0b b6       	in	r0, 0x3b	; 59
 908:	0f 92       	push	r0
 90a:	2f 93       	push	r18
 90c:	3f 93       	push	r19
 90e:	4f 93       	push	r20
 910:	5f 93       	push	r21
 912:	6f 93       	push	r22
 914:	7f 93       	push	r23
 916:	8f 93       	push	r24
 918:	9f 93       	push	r25
 91a:	af 93       	push	r26
 91c:	bf 93       	push	r27
 91e:	ef 93       	push	r30
 920:	ff 93       	push	r31
 922:	81 e3       	ldi	r24, 0x31	; 49
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	09 de       	rcall	.-1006   	; 0x53a <usartTXs>
 928:	ff 91       	pop	r31
 92a:	ef 91       	pop	r30
 92c:	bf 91       	pop	r27
 92e:	af 91       	pop	r26
 930:	9f 91       	pop	r25
 932:	8f 91       	pop	r24
 934:	7f 91       	pop	r23
 936:	6f 91       	pop	r22
 938:	5f 91       	pop	r21
 93a:	4f 91       	pop	r20
 93c:	3f 91       	pop	r19
 93e:	2f 91       	pop	r18
 940:	0f 90       	pop	r0
 942:	0b be       	out	0x3b, r0	; 59
 944:	0f 90       	pop	r0
 946:	0f be       	out	0x3f, r0	; 63
 948:	0f 90       	pop	r0
 94a:	1f 90       	pop	r1
 94c:	18 95       	reti

0000094e <__divmodhi4>:
 94e:	97 fb       	bst	r25, 7
 950:	07 2e       	mov	r0, r23
 952:	16 f4       	brtc	.+4      	; 0x958 <__divmodhi4+0xa>
 954:	00 94       	com	r0
 956:	06 d0       	rcall	.+12     	; 0x964 <__divmodhi4_neg1>
 958:	77 fd       	sbrc	r23, 7
 95a:	08 d0       	rcall	.+16     	; 0x96c <__divmodhi4_neg2>
 95c:	1a d0       	rcall	.+52     	; 0x992 <__udivmodhi4>
 95e:	07 fc       	sbrc	r0, 7
 960:	05 d0       	rcall	.+10     	; 0x96c <__divmodhi4_neg2>
 962:	3e f4       	brtc	.+14     	; 0x972 <__divmodhi4_exit>

00000964 <__divmodhi4_neg1>:
 964:	90 95       	com	r25
 966:	81 95       	neg	r24
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	08 95       	ret

0000096c <__divmodhi4_neg2>:
 96c:	70 95       	com	r23
 96e:	61 95       	neg	r22
 970:	7f 4f       	sbci	r23, 0xFF	; 255

00000972 <__divmodhi4_exit>:
 972:	08 95       	ret

00000974 <__umulhisi3>:
 974:	a2 9f       	mul	r26, r18
 976:	b0 01       	movw	r22, r0
 978:	b3 9f       	mul	r27, r19
 97a:	c0 01       	movw	r24, r0
 97c:	a3 9f       	mul	r26, r19
 97e:	70 0d       	add	r23, r0
 980:	81 1d       	adc	r24, r1
 982:	11 24       	eor	r1, r1
 984:	91 1d       	adc	r25, r1
 986:	b2 9f       	mul	r27, r18
 988:	70 0d       	add	r23, r0
 98a:	81 1d       	adc	r24, r1
 98c:	11 24       	eor	r1, r1
 98e:	91 1d       	adc	r25, r1
 990:	08 95       	ret

00000992 <__udivmodhi4>:
 992:	aa 1b       	sub	r26, r26
 994:	bb 1b       	sub	r27, r27
 996:	51 e1       	ldi	r21, 0x11	; 17
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <__udivmodhi4_ep>

0000099a <__udivmodhi4_loop>:
 99a:	aa 1f       	adc	r26, r26
 99c:	bb 1f       	adc	r27, r27
 99e:	a6 17       	cp	r26, r22
 9a0:	b7 07       	cpc	r27, r23
 9a2:	10 f0       	brcs	.+4      	; 0x9a8 <__udivmodhi4_ep>
 9a4:	a6 1b       	sub	r26, r22
 9a6:	b7 0b       	sbc	r27, r23

000009a8 <__udivmodhi4_ep>:
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	5a 95       	dec	r21
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__udivmodhi4_loop>
 9b0:	80 95       	com	r24
 9b2:	90 95       	com	r25
 9b4:	bc 01       	movw	r22, r24
 9b6:	cd 01       	movw	r24, r26
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
